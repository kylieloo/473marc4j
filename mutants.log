1:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler$Error@<init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):99:curRecordID = recordID |==> <NO-OP>
2:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler$Error@<init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):100:curField = field |==> <NO-OP>
3:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler$Error@<init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):101:curSubfield = subfield |==> <NO-OP>
4:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler$Error@<init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):102:this.severity = severity |==> <NO-OP>
5:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler$Error@<init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):103:this.message = message |==> <NO-OP>
6:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler$Error@setCurRecordID(java.lang.String):119:this.curRecordID = curRecordID |==> <NO-OP>
7:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@<init>():131:errors = null |==> <NO-OP>
8:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@<init>():132:hasMissingID = false |==> <NO-OP>
9:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@<init>():133:maxSeverity = INFO |==> <NO-OP>
10:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@getSeverityMsg(int):144:return "FATAL       "; |==> <NO-OP>
11:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@getSeverityMsg(int):146:return "Major Error "; |==> <NO-OP>
12:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@getSeverityMsg(int):148:return "Minor Error "; |==> <NO-OP>
13:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@getSeverityMsg(int):150:return "Typo        "; |==> <NO-OP>
14:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@getSeverityMsg(int):152:return "Info        "; |==> <NO-OP>
15:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@hasErrors():164:errors != null |==> true
16:ROR:>(int,int):!=(int,int):org.marc4j.ErrorHandler@hasErrors():164:errors.size() > 0 |==> errors.size() != 0
17:ROR:>(int,int):>=(int,int):org.marc4j.ErrorHandler@hasErrors():164:errors.size() > 0 |==> errors.size() >= 0
18:ROR:>(int,int):FALSE(int,int):org.marc4j.ErrorHandler@hasErrors():164:errors.size() > 0 |==> false
19:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 |==> errors != null == errors.size() > 0
20:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 |==> false
21:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 |==> errors != null
22:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 |==> errors.size() > 0
23:ROR:>(int,int):!=(int,int):org.marc4j.ErrorHandler@hasErrors():164:maxSeverity > INFO |==> maxSeverity != INFO
24:ROR:>(int,int):>=(int,int):org.marc4j.ErrorHandler@hasErrors():164:maxSeverity > INFO |==> maxSeverity >= INFO
25:ROR:>(int,int):FALSE(int,int):org.marc4j.ErrorHandler@hasErrors():164:maxSeverity > INFO |==> false
26:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 && maxSeverity > INFO |==> (errors != null && errors.size() > 0) == maxSeverity > INFO
27:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 && maxSeverity > INFO |==> false
28:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 && maxSeverity > INFO |==> errors != null && errors.size() > 0
29:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@hasErrors():164:errors != null && errors.size() > 0 && maxSeverity > INFO |==> maxSeverity > INFO
30:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@getErrors():182:errors == null |==> false
31:ROR:==(int,int):<=(int,int):org.marc4j.ErrorHandler@getErrors():182:errors.size() == 0 |==> errors.size() <= 0
32:ROR:==(int,int):>=(int,int):org.marc4j.ErrorHandler@getErrors():182:errors.size() == 0 |==> errors.size() >= 0
33:ROR:==(int,int):FALSE(int,int):org.marc4j.ErrorHandler@getErrors():182:errors.size() == 0 |==> false
34:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.ErrorHandler@getErrors():182:errors == null || errors.size() == 0 |==> errors == null != (errors.size() == 0)
35:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@getErrors():182:errors == null || errors.size() == 0 |==> errors == null
36:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@getErrors():182:errors == null || errors.size() == 0 |==> errors.size() == 0
37:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.ErrorHandler@getErrors():182:errors == null || errors.size() == 0 |==> true
38:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@getErrors():183:return null; |==> <NO-OP>
39:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@reset():192:errors = null |==> <NO-OP>
40:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@reset():193:maxSeverity = INFO |==> <NO-OP>
41:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):210:errors == null |==> false
42:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):211:errors = new LinkedList() |==> <NO-OP>
43:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):212:hasMissingID = false |==> <NO-OP>
44:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):214:id != null |==> true
45:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):214:id != null && id.equals("unknown") |==> id != null == id.equals("unknown")
46:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):214:id != null && id.equals("unknown") |==> false
47:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):214:id != null && id.equals("unknown") |==> id != null
48:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):214:id != null && id.equals("unknown") |==> id.equals("unknown")
49:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):215:hasMissingID = true |==> <NO-OP>
50:COR:hasMissingID:TRUE:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):216:hasMissingID |==> false
51:COR:hasMissingID:FALSE:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):216:hasMissingID |==> true
52:STD:<CALL>:<NO-OP>:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):217:setRecordIDForAll(id) |==> <NO-OP>
53:STD:<CALL>:<NO-OP>:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):219:errors.add(new Error(id, field, subfield, severity, message)) |==> <NO-OP>
54:ROR:>(int,int):!=(int,int):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):220:severity > maxSeverity |==> severity != maxSeverity
55:ROR:>(int,int):>=(int,int):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):220:severity > maxSeverity |==> severity >= maxSeverity
56:ROR:>(int,int):FALSE(int,int):org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):220:severity > maxSeverity |==> false
57:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String):221:maxSeverity = severity |==> <NO-OP>
58:STD:<CALL>:<NO-OP>:org.marc4j.ErrorHandler@addError(int,java.lang.String):233:addError(curRecordID, curField, curSubfield, severity, message) |==> <NO-OP>
59:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors == null |==> false
60:ROR:==(int,int):<=(int,int):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors.size() == 0 |==> newErrors.size() <= 0
61:ROR:==(int,int):>=(int,int):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors.size() == 0 |==> newErrors.size() >= 0
62:ROR:==(int,int):FALSE(int,int):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors.size() == 0 |==> false
63:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors == null || newErrors.size() == 0 |==> newErrors == null != (newErrors.size() == 0)
64:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors == null || newErrors.size() == 0 |==> newErrors == null
65:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors == null || newErrors.size() == 0 |==> newErrors.size() == 0
66:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.util.List):242:newErrors == null || newErrors.size() == 0 |==> true
67:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.util.List):243:return; |==> <NO-OP>
68:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@addErrors(java.util.List):245:errors == null |==> false
69:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.util.List):246:errors = new LinkedList() |==> <NO-OP>
70:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.util.List):247:hasMissingID = false |==> <NO-OP>
71:STD:<CALL>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.util.List):251:errors.add(errobj) |==> <NO-OP>
72:ROR:>(int,int):!=(int,int):org.marc4j.ErrorHandler@addErrors(java.util.List):252:errobj.severity > maxSeverity |==> errobj.severity != maxSeverity
73:ROR:>(int,int):>=(int,int):org.marc4j.ErrorHandler@addErrors(java.util.List):252:errobj.severity > maxSeverity |==> errobj.severity >= maxSeverity
74:ROR:>(int,int):FALSE(int,int):org.marc4j.ErrorHandler@addErrors(java.util.List):252:errobj.severity > maxSeverity |==> false
75:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.util.List):253:maxSeverity = errobj.severity |==> <NO-OP>
76:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors == null |==> false
77:ROR:==(int,int):<=(int,int):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors.size() == 0 |==> recordErrors.size() <= 0
78:ROR:==(int,int):>=(int,int):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors.size() == 0 |==> recordErrors.size() >= 0
79:ROR:==(int,int):FALSE(int,int):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors.size() == 0 |==> false
80:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors == null || recordErrors.size() == 0 |==> recordErrors == null != (recordErrors.size() == 0)
81:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors == null || recordErrors.size() == 0 |==> recordErrors == null
82:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors == null || recordErrors.size() == 0 |==> recordErrors.size() == 0
83:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):266:recordErrors == null || recordErrors.size() == 0 |==> true
84:STD:<RETURN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):267:return; |==> <NO-OP>
85:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):269:errors == null |==> false
86:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):270:errors = new LinkedList() |==> <NO-OP>
87:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):271:hasMissingID = false |==> <NO-OP>
88:STD:<CALL>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):276:errors.add(errobj) |==> <NO-OP>
89:ROR:>(int,int):!=(int,int):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):277:errobj.severity > maxSeverity |==> errobj.severity != maxSeverity
90:ROR:>(int,int):>=(int,int):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):277:errobj.severity > maxSeverity |==> errobj.severity >= maxSeverity
91:ROR:>(int,int):FALSE(int,int):org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):277:errobj.severity > maxSeverity |==> false
92:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@addErrors(java.lang.String,java.util.List<org.marc4j.MarcError>):278:maxSeverity = errobj.severity |==> <NO-OP>
93:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):284:id != null |==> true
94:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):288:err.getCurRecordID() == null |==> false
95:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):288:err.getCurRecordID() == null || err.getCurRecordID().equals("unknown") |==> err.getCurRecordID() == null != err.getCurRecordID().equals("unknown")
96:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):288:err.getCurRecordID() == null || err.getCurRecordID().equals("unknown") |==> err.getCurRecordID() == null
97:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):288:err.getCurRecordID() == null || err.getCurRecordID().equals("unknown") |==> err.getCurRecordID().equals("unknown")
98:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):288:err.getCurRecordID() == null || err.getCurRecordID().equals("unknown") |==> true
99:STD:<CALL>:<NO-OP>:org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):289:err.setCurRecordID(id) |==> <NO-OP>
100:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@setRecordIDForAll(java.lang.String):292:hasMissingID = false |==> <NO-OP>
101:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@setRecordID(java.lang.String):303:curRecordID = recordID |==> <NO-OP>
102:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.ErrorHandler@setRecordID(java.lang.String):304:errors != null |==> true
103:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.ErrorHandler@setRecordID(java.lang.String):304:hasMissingID && errors != null |==> hasMissingID == (errors != null)
104:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.ErrorHandler@setRecordID(java.lang.String):304:hasMissingID && errors != null |==> false
105:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.ErrorHandler@setRecordID(java.lang.String):304:hasMissingID && errors != null |==> hasMissingID
106:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.ErrorHandler@setRecordID(java.lang.String):304:hasMissingID && errors != null |==> errors != null
107:STD:<CALL>:<NO-OP>:org.marc4j.ErrorHandler@setRecordID(java.lang.String):305:setRecordIDForAll(recordID) |==> <NO-OP>
108:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@setCurrentField(java.lang.String):315:this.curField = curField |==> <NO-OP>
109:STD:<ASSIGN>:<NO-OP>:org.marc4j.ErrorHandler@setCurrentSubfield(java.lang.String):324:this.curSubfield = curSubfield |==> <NO-OP>
110:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcError@<init>(java.lang.String,java.lang.String,int,java.lang.String):56:curField = field |==> <NO-OP>
111:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcError@<init>(java.lang.String,java.lang.String,int,java.lang.String):57:curSubfield = subfield |==> <NO-OP>
112:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcError@<init>(java.lang.String,java.lang.String,int,java.lang.String):58:this.severity = severity |==> <NO-OP>
113:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcError@<init>(java.lang.String,java.lang.String,int,java.lang.String):59:this.message = message |==> <NO-OP>
114:STD:<RETURN>:<NO-OP>:org.marc4j.MarcError@getSeverityMsg(int):82:return "FATAL       "; |==> <NO-OP>
115:STD:<RETURN>:<NO-OP>:org.marc4j.MarcError@getSeverityMsg(int):84:return "Major Error "; |==> <NO-OP>
116:STD:<RETURN>:<NO-OP>:org.marc4j.MarcError@getSeverityMsg(int):86:return "Minor Error "; |==> <NO-OP>
117:STD:<RETURN>:<NO-OP>:org.marc4j.MarcError@getSeverityMsg(int):88:return "Typo        "; |==> <NO-OP>
118:STD:<RETURN>:<NO-OP>:org.marc4j.MarcError@getSeverityMsg(int):90:return "Info        "; |==> <NO-OP>
119:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String,java.lang.String):57:this.reader = reader |==> <NO-OP>
120:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String,java.lang.String):58:this.idsToMerge = idsToMerge |==> <NO-OP>
121:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String,java.lang.String):59:this.leftControlField = leftControlField |==> <NO-OP>
122:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String,java.lang.String):60:this.rightControlField = rightControlField |==> <NO-OP>
123:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,org.marc4j.ErrorHandler,org.marc4j.ErrorHandler,java.lang.String,java.lang.String,java.lang.String):95:this.reader = reader |==> <NO-OP>
124:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,org.marc4j.ErrorHandler,org.marc4j.ErrorHandler,java.lang.String,java.lang.String,java.lang.String):96:this.idsToMerge = idsToMerge |==> <NO-OP>
125:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,org.marc4j.ErrorHandler,org.marc4j.ErrorHandler,java.lang.String,java.lang.String,java.lang.String):97:this.leftControlField = leftControlField |==> <NO-OP>
126:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@<init>(org.marc4j.MarcReader,org.marc4j.ErrorHandler,org.marc4j.ErrorHandler,java.lang.String,java.lang.String,java.lang.String):98:this.rightControlField = rightControlField |==> <NO-OP>
127:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@hasNext():109:currentRecord == null |==> false
128:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@hasNext():110:currentRecord = next() |==> <NO-OP>
129:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@hasNext():112:currentRecord != null |==> true
130:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@next():121:currentRecord != null |==> true
131:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():123:currentRecord = null |==> <NO-OP>
132:STD:<RETURN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():124:return tmp; |==> <NO-OP>
133:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@next():125:currentRecord == null |==> false
134:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@next():126:nextRecord != null |==> true
135:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():127:currentRecord = nextRecord |==> <NO-OP>
136:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():128:nextRecord = null |==> <NO-OP>
137:COR:reader.hasNext():TRUE:org.marc4j.MarcCombiningReader@next():130:reader.hasNext() |==> false
138:COR:reader.hasNext():FALSE:org.marc4j.MarcCombiningReader@next():130:reader.hasNext() |==> true
139:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@next():131:currentRecord != null |==> true
140:STD:<RETURN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():131:return Config.__M_NO == 139 ? true : Config.__M_NO == 0 && Config.COVERED(139, 139) ? currentRecord != null : currentRecord != null ? next() : null; |==> <NO-OP>
141:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():135:nextRecord = reader.next() |==> <NO-OP>
142:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@next():137:currentRecord != null |==> true
143:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@next():141:recCntlNum != null |==> true
144:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():149:currentRecord = combineRecords(currentRecord, nextRecord, idsToMerge) |==> <NO-OP>
145:COR:reader.hasNext():TRUE:org.marc4j.MarcCombiningReader@next():150:reader.hasNext() |==> false
146:COR:reader.hasNext():FALSE:org.marc4j.MarcCombiningReader@next():150:reader.hasNext() |==> true
147:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():152:nextRecord = reader.next() |==> <NO-OP>
148:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@next():157:recCntlNum != null |==> true
149:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():161:nextRecord = null |==> <NO-OP>
150:STD:<RETURN>:<NO-OP>:org.marc4j.MarcCombiningReader@next():164:return next(); |==> <NO-OP>
151:COR:cf.getTag().matches(tagstart):TRUE:org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):185:cf.getTag().matches(tagstart) |==> false
152:COR:cf.getTag().matches(tagstart):FALSE:org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):185:cf.getTag().matches(tagstart) |==> true
153:STD:<RETURN>:<NO-OP>:org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):186:return cf.getData(); |==> <NO-OP>
154:COR:df.getTag().matches(tagstart):TRUE:org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):191:df.getTag().matches(tagstart) |==> false
155:COR:df.getTag().matches(tagstart):FALSE:org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):191:df.getTag().matches(tagstart) |==> true
156:ROR:>(int,int):!=(int,int):org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):194:tag.length() > 3 |==> tag.length() != 3
157:ROR:>(int,int):>=(int,int):org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):194:tag.length() > 3 |==> tag.length() >= 3
158:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):194:tag.length() > 3 |==> false
159:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):195:subfieldtag = tag.charAt(4) |==> <NO-OP>
160:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):199:sf != null |==> true
161:STD:<RETURN>:<NO-OP>:org.marc4j.MarcCombiningReader@findControlField(org.marc4j.marc.Record,java.lang.String):200:return sf.getData(); |==> <NO-OP>
162:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):217:left == null |==> false
163:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):217:right == null |==> false
164:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):217:left == null || right == null |==> left == null != (right == null)
165:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):217:left == null || right == null |==> left == null
166:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):217:left == null || right == null |==> right == null
167:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):217:left == null || right == null |==> true
168:STD:<RETURN>:<NO-OP>:org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):218:return false; |==> <NO-OP>
169:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):229:leftControlField == null |==> false
170:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):230:leftStr = left.getControlNumber() |==> <NO-OP>
171:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):232:leftStr = findControlField(left, leftControlField) |==> <NO-OP>
172:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):235:rightControlField == null |==> false
173:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):236:rightStr = right.getControlNumber() |==> <NO-OP>
174:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):238:rightStr = findControlField(right, rightControlField) |==> <NO-OP>
175:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null |==> true
176:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:rightStr != null |==> true
177:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null |==> leftStr != null == (rightStr != null)
178:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null |==> false
179:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null |==> leftStr != null
180:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null |==> rightStr != null
181:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null && leftStr.equals(rightStr) |==> (leftStr != null && rightStr != null) == leftStr.equals(rightStr)
182:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null && leftStr.equals(rightStr) |==> false
183:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null && leftStr.equals(rightStr) |==> leftStr != null && rightStr != null
184:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):242:leftStr != null && rightStr != null && leftStr.equals(rightStr) |==> leftStr.equals(rightStr)
185:STD:<RETURN>:<NO-OP>:org.marc4j.MarcCombiningReader@recordsMatch(org.marc4j.marc.Record,org.marc4j.marc.Record):243:return true; |==> <NO-OP>
186:COR:field.getTag().matches(idsToMerge):TRUE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String):263:field.getTag().matches(idsToMerge) |==> false
187:COR:field.getTag().matches(idsToMerge):FALSE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String):263:field.getTag().matches(idsToMerge) |==> true
188:STD:<CALL>:<NO-OP>:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String):264:currentRecord.addVariableField(field) |==> <NO-OP>
189:COR:nextRecord.hasErrors():TRUE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String):267:nextRecord.hasErrors() |==> false
190:COR:nextRecord.hasErrors():FALSE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String):267:nextRecord.hasErrors() |==> true
191:STD:<CALL>:<NO-OP>:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String):268:currentRecord.addErrors(nextRecord.getErrors()) |==> <NO-OP>
192:COR:field.getTag().matches(fieldInsertBefore):TRUE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):291:field.getTag().matches(fieldInsertBefore) |==> false
193:COR:field.getTag().matches(fieldInsertBefore):FALSE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):291:field.getTag().matches(fieldInsertBefore) |==> true
194:STD:<CALL>:<NO-OP>:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):292:fieldsToMove.add(field) |==> <NO-OP>
195:STD:<CALL>:<NO-OP>:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):293:currentRecord.removeVariableField(field) |==> <NO-OP>
196:COR:field.getTag().matches(idsToMerge):TRUE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):300:field.getTag().matches(idsToMerge) |==> false
197:COR:field.getTag().matches(idsToMerge):FALSE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):300:field.getTag().matches(idsToMerge) |==> true
198:STD:<CALL>:<NO-OP>:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):301:currentRecord.addVariableField(field) |==> <NO-OP>
199:STD:<CALL>:<NO-OP>:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):307:currentRecord.addVariableField(field) |==> <NO-OP>
200:COR:nextRecord.hasErrors():TRUE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):310:nextRecord.hasErrors() |==> false
201:COR:nextRecord.hasErrors():FALSE:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):310:nextRecord.hasErrors() |==> true
202:STD:<CALL>:<NO-OP>:org.marc4j.MarcCombiningReader@combineRecords(org.marc4j.marc.Record,org.marc4j.marc.Record,java.lang.String,java.lang.String):311:currentRecord.addErrors(nextRecord.getErrors()) |==> <NO-OP>
203:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@<init>(java.lang.String):64:init(dir, false, false, null) |==> <NO-OP>
204:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@<init>(java.io.File):75:init(dir, false, false, null) |==> <NO-OP>
205:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@<init>(java.lang.String,boolean,boolean):94:init(dir, permissive, convertToUTF8, null) |==> <NO-OP>
206:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@<init>(java.io.File,boolean,boolean):111:init(dir, permissive, convertToUTF8, null) |==> <NO-OP>
207:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@<init>(java.lang.String,boolean,boolean,java.lang.String):132:init(dir, permissive, convertToUTF8, defaultEncoding) |==> <NO-OP>
208:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@<init>(java.io.File,boolean,boolean,java.lang.String):152:init(dir, permissive, convertToUTF8, defaultEncoding) |==> <NO-OP>
209:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@init(java.io.File,boolean,boolean,java.lang.String):164:this.permissive = permissive |==> <NO-OP>
210:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@init(java.io.File,boolean,boolean,java.lang.String):165:this.convertToUTF8 = convertToUTF8 |==> <NO-OP>
211:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@init(java.io.File,boolean,boolean,java.lang.String):166:list = dir.listFiles(filter) |==> <NO-OP>
212:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@init(java.io.File,boolean,boolean,java.lang.String):167:java.util.Arrays.sort(list) |==> <NO-OP>
213:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@init(java.io.File,boolean,boolean,java.lang.String):168:curFileNum = 0 |==> <NO-OP>
214:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@init(java.io.File,boolean,boolean,java.lang.String):169:curFileReader = null |==> <NO-OP>
215:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@init(java.io.File,boolean,boolean,java.lang.String):170:this.defaultEncoding = defaultEncoding |==> <NO-OP>
216:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader == null |==> false
217:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader.hasNext() == false |==> false
218:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader.hasNext() == false |==> curFileReader.hasNext()
219:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader.hasNext() == false |==> false
220:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader == null || curFileReader.hasNext() == false |==> curFileReader == null != (curFileReader.hasNext() == false)
221:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader == null || curFileReader.hasNext() == false |==> curFileReader == null
222:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader == null || curFileReader.hasNext() == false |==> curFileReader.hasNext() == false
223:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcDirStreamReader@hasNext():178:curFileReader == null || curFileReader.hasNext() == false |==> true
224:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@hasNext():179:nextFile() |==> <NO-OP>
225:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcDirStreamReader@hasNext():181:curFileReader == null |==> false
226:ROR:!=(int,int):<(int,int):org.marc4j.MarcDirStreamReader@nextFile():185:curFileNum != list.length |==> curFileNum < list.length
227:ROR:!=(int,int):>(int,int):org.marc4j.MarcDirStreamReader@nextFile():185:curFileNum != list.length |==> curFileNum > list.length
228:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcDirStreamReader@nextFile():185:curFileNum != list.length |==> true
229:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@nextFile():187:System.err.println("Switching to input file: " + list[curFileNum]) |==> <NO-OP>
230:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcDirStreamReader@nextFile():188:defaultEncoding != null |==> true
231:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@nextFile():189:curFileReader = new MarcPermissiveStreamReader(new FileInputStream(list[curFileNum++]), permissive, convertToUTF8, defaultEncoding) |==> <NO-OP>
232:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@nextFile():192:curFileReader = new MarcPermissiveStreamReader(new FileInputStream(list[curFileNum++]), permissive, convertToUTF8) |==> <NO-OP>
233:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@nextFile():196:nextFile() |==> <NO-OP>
234:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcDirStreamReader@nextFile():199:curFileReader = null |==> <NO-OP>
235:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcDirStreamReader@next():210:curFileReader == null |==> false
236:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcDirStreamReader@next():210:curFileReader.hasNext() == false |==> false
237:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcDirStreamReader@next():210:curFileReader.hasNext() == false |==> curFileReader.hasNext()
238:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcDirStreamReader@next():210:curFileReader.hasNext() == false |==> false
239:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcDirStreamReader@next():210:curFileReader == null || curFileReader.hasNext() == false |==> curFileReader == null != (curFileReader.hasNext() == false)
240:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcDirStreamReader@next():210:curFileReader == null || curFileReader.hasNext() == false |==> curFileReader == null
241:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcDirStreamReader@next():210:curFileReader == null || curFileReader.hasNext() == false |==> curFileReader.hasNext() == false
242:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcDirStreamReader@next():210:curFileReader == null || curFileReader.hasNext() == false |==> true
243:STD:<CALL>:<NO-OP>:org.marc4j.MarcDirStreamReader@next():211:nextFile() |==> <NO-OP>
244:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcDirStreamReader@next():213:curFileReader == null |==> false
245:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):64:ifFieldPresent != null |==> true
246:ROR:<(int,int):!=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):68:i < includeRecordIfFieldsPresent.length |==> i != includeRecordIfFieldsPresent.length
247:ROR:<(int,int):<=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):68:i < includeRecordIfFieldsPresent.length |==> i <= includeRecordIfFieldsPresent.length
248:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):68:i < includeRecordIfFieldsPresent.length |==> false
249:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):69:includeRecordIfFieldsPresent[i][0] = tagPlus[i].substring(0, 3) |==> <NO-OP>
250:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):70:includeRecordIfFieldsPresent[i][1] = tagPlus[i].substring(3) |==> <NO-OP>
251:ROR:>(int,int):!=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):72:present.length > 1 |==> present.length != 1
252:ROR:>(int,int):>=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):72:present.length > 1 |==> present.length >= 1
253:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):72:present.length > 1 |==> false
254:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):82:ifFieldMissing != null |==> true
255:ROR:<(int,int):!=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):86:i < includeRecordIfFieldsMissing.length |==> i != includeRecordIfFieldsMissing.length
256:ROR:<(int,int):<=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):86:i < includeRecordIfFieldsMissing.length |==> i <= includeRecordIfFieldsMissing.length
257:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):86:i < includeRecordIfFieldsMissing.length |==> false
258:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):87:includeRecordIfFieldsMissing[i][0] = tagPlus[i].substring(0, 3) |==> <NO-OP>
259:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):88:includeRecordIfFieldsMissing[i][1] = tagPlus[i].substring(3) |==> <NO-OP>
260:ROR:>(int,int):!=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):90:missing.length > 1 |==> missing.length != 1
261:ROR:>(int,int):>=(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):90:missing.length > 1 |==> missing.length >= 1
262:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcFilteredReader@<init>(org.marc4j.MarcReader,java.lang.String,java.lang.String):90:missing.length > 1 |==> false
263:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@hasNext():108:currentRecord == null |==> false
264:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@hasNext():109:currentRecord = next() |==> <NO-OP>
265:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@hasNext():111:currentRecord != null |==> true
266:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():122:currentRecord != null |==> true
267:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():124:currentRecord = null |==> <NO-OP>
268:STD:<RETURN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():125:return tmp; |==> <NO-OP>
269:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():128:currentRecord == null |==> false
270:COR:reader.hasNext():TRUE:org.marc4j.MarcFilteredReader@next():129:reader.hasNext() |==> false
271:COR:reader.hasNext():FALSE:org.marc4j.MarcFilteredReader@next():129:reader.hasNext() |==> true
272:STD:<RETURN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():130:return null; |==> <NO-OP>
273:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():135:rec = reader.next() |==> <NO-OP>
274:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():140:rec != null |==> true
275:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():140:includeRecordIfFieldsPresent != null |==> true
276:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcFilteredReader@next():140:rec != null && includeRecordIfFieldsPresent != null |==> rec != null == (includeRecordIfFieldsPresent != null)
277:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcFilteredReader@next():140:rec != null && includeRecordIfFieldsPresent != null |==> false
278:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():140:rec != null && includeRecordIfFieldsPresent != null |==> rec != null
279:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():140:rec != null && includeRecordIfFieldsPresent != null |==> includeRecordIfFieldsPresent != null
280:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():146:includeRecordIfFieldContains == null |==> false
281:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcFilteredReader@next():146:includeRecordIfFieldContains == null || ((ControlField)vf).getData().contains(includeRecordIfFieldContains) |==> includeRecordIfFieldContains == null != ((ControlField)vf).getData().contains(includeRecordIfFieldContains)
282:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():146:includeRecordIfFieldContains == null || ((ControlField)vf).getData().contains(includeRecordIfFieldContains) |==> includeRecordIfFieldContains == null
283:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():146:includeRecordIfFieldContains == null || ((ControlField)vf).getData().contains(includeRecordIfFieldContains) |==> ((ControlField)vf).getData().contains(includeRecordIfFieldContains)
284:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcFilteredReader@next():146:includeRecordIfFieldContains == null || ((ControlField)vf).getData().contains(includeRecordIfFieldContains) |==> true
285:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():148:currentRecord = rec |==> <NO-OP>
286:STD:<BREAK>:<NO-OP>:org.marc4j.MarcFilteredReader@next():149:break; |==> <NO-OP>
287:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():152:includeRecordIfFieldContains == null |==> false
288:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcFilteredReader@next():152:includeRecordIfFieldContains == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldContains) |==> includeRecordIfFieldContains == null != ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldContains)
289:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():152:includeRecordIfFieldContains == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldContains) |==> includeRecordIfFieldContains == null
290:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():152:includeRecordIfFieldContains == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldContains) |==> ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldContains)
291:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcFilteredReader@next():152:includeRecordIfFieldContains == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldContains) |==> true
292:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():155:currentRecord = rec |==> <NO-OP>
293:STD:<BREAK>:<NO-OP>:org.marc4j.MarcFilteredReader@next():156:break; |==> <NO-OP>
294:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():160:currentRecord != null |==> true
295:STD:<BREAK>:<NO-OP>:org.marc4j.MarcFilteredReader@next():161:break; |==> <NO-OP>
296:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():166:rec != null |==> true
297:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():166:currentRecord == null |==> false
298:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null |==> rec != null == (currentRecord == null)
299:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null |==> false
300:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null |==> rec != null
301:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null |==> currentRecord == null
302:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():166:includeRecordIfFieldsMissing != null |==> true
303:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null && includeRecordIfFieldsMissing != null |==> (rec != null && currentRecord == null) == (includeRecordIfFieldsMissing != null)
304:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null && includeRecordIfFieldsMissing != null |==> false
305:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null && includeRecordIfFieldsMissing != null |==> rec != null && currentRecord == null
306:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():166:rec != null && currentRecord == null && includeRecordIfFieldsMissing != null |==> includeRecordIfFieldsMissing != null
307:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():173:includeRecordIfFieldDoesntContain == null |==> false
308:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcFilteredReader@next():173:includeRecordIfFieldDoesntContain == null || ((ControlField)vf).getData().contains(includeRecordIfFieldDoesntContain) |==> includeRecordIfFieldDoesntContain == null != ((ControlField)vf).getData().contains(includeRecordIfFieldDoesntContain)
309:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():173:includeRecordIfFieldDoesntContain == null || ((ControlField)vf).getData().contains(includeRecordIfFieldDoesntContain) |==> includeRecordIfFieldDoesntContain == null
310:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():173:includeRecordIfFieldDoesntContain == null || ((ControlField)vf).getData().contains(includeRecordIfFieldDoesntContain) |==> ((ControlField)vf).getData().contains(includeRecordIfFieldDoesntContain)
311:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcFilteredReader@next():173:includeRecordIfFieldDoesntContain == null || ((ControlField)vf).getData().contains(includeRecordIfFieldDoesntContain) |==> true
312:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():175:useRecord = false |==> <NO-OP>
313:STD:<BREAK>:<NO-OP>:org.marc4j.MarcFilteredReader@next():176:break; |==> <NO-OP>
314:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():179:includeRecordIfFieldDoesntContain == null |==> false
315:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcFilteredReader@next():179:includeRecordIfFieldDoesntContain == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldDoesntContain) |==> includeRecordIfFieldDoesntContain == null != ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldDoesntContain)
316:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():179:includeRecordIfFieldDoesntContain == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldDoesntContain) |==> includeRecordIfFieldDoesntContain == null
317:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():179:includeRecordIfFieldDoesntContain == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldDoesntContain) |==> ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldDoesntContain)
318:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcFilteredReader@next():179:includeRecordIfFieldDoesntContain == null || ((DataField)vf).getSubfieldsAsString(tagAndSf[1]).contains(includeRecordIfFieldDoesntContain) |==> true
319:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():182:useRecord = false |==> <NO-OP>
320:STD:<BREAK>:<NO-OP>:org.marc4j.MarcFilteredReader@next():183:break; |==> <NO-OP>
321:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcFilteredReader@next():187:useRecord == false |==> false
322:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():187:useRecord == false |==> useRecord
323:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():187:useRecord == false |==> false
324:STD:<BREAK>:<NO-OP>:org.marc4j.MarcFilteredReader@next():188:break; |==> <NO-OP>
325:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcFilteredReader@next():191:useRecord == true |==> false
326:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():191:useRecord == true |==> useRecord
327:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():191:useRecord == true |==> true
328:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():192:currentRecord = rec |==> <NO-OP>
329:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():196:rec != null |==> true
330:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():196:includeRecordIfFieldsPresent == null |==> false
331:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null |==> rec != null == (includeRecordIfFieldsPresent == null)
332:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null |==> false
333:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null |==> rec != null
334:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null |==> includeRecordIfFieldsPresent == null
335:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcFilteredReader@next():196:includeRecordIfFieldsMissing == null |==> false
336:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null && includeRecordIfFieldsMissing == null |==> (rec != null && includeRecordIfFieldsPresent == null) == (includeRecordIfFieldsMissing == null)
337:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null && includeRecordIfFieldsMissing == null |==> false
338:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null && includeRecordIfFieldsMissing == null |==> rec != null && includeRecordIfFieldsPresent == null
339:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcFilteredReader@next():196:rec != null && includeRecordIfFieldsPresent == null && includeRecordIfFieldsMissing == null |==> includeRecordIfFieldsMissing == null
340:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcFilteredReader@next():197:currentRecord = rec |==> <NO-OP>
341:LOR:|(int,int):&(int,int):org.marc4j.MarcJsonReader@<init>(java.io.InputStream):43:JsonParser.OPT_INTERN_KEYWORDS | JsonParser.OPT_UNQUOTED_KEYWORDS |==> JsonParser.OPT_INTERN_KEYWORDS & JsonParser.OPT_UNQUOTED_KEYWORDS
342:LOR:|(int,int):^(int,int):org.marc4j.MarcJsonReader@<init>(java.io.InputStream):43:JsonParser.OPT_INTERN_KEYWORDS | JsonParser.OPT_UNQUOTED_KEYWORDS |==> JsonParser.OPT_INTERN_KEYWORDS ^ JsonParser.OPT_UNQUOTED_KEYWORDS
343:LOR:|(int,int):&(int,int):org.marc4j.MarcJsonReader@<init>(java.io.InputStream):43:JsonParser.OPT_INTERN_KEYWORDS | JsonParser.OPT_UNQUOTED_KEYWORDS | JsonParser.OPT_SINGLE_QUOTE_STRINGS |==> (JsonParser.OPT_INTERN_KEYWORDS | JsonParser.OPT_UNQUOTED_KEYWORDS) & JsonParser.OPT_SINGLE_QUOTE_STRINGS
344:LOR:|(int,int):^(int,int):org.marc4j.MarcJsonReader@<init>(java.io.InputStream):43:JsonParser.OPT_INTERN_KEYWORDS | JsonParser.OPT_UNQUOTED_KEYWORDS | JsonParser.OPT_SINGLE_QUOTE_STRINGS |==> (JsonParser.OPT_INTERN_KEYWORDS | JsonParser.OPT_UNQUOTED_KEYWORDS) ^ JsonParser.OPT_SINGLE_QUOTE_STRINGS
345:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@<init>(java.io.InputStream):43:parser = new JsonParser(JsonParser.OPT_INTERN_KEYWORDS | JsonParser.OPT_UNQUOTED_KEYWORDS | JsonParser.OPT_SINGLE_QUOTE_STRINGS) |==> <NO-OP>
346:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@<init>(java.io.InputStream):46:parser.setInput("MarcInput", new InputStreamReader(is), false) |==> <NO-OP>
347:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@<init>(java.io.InputStream):52:factory = MarcFactory.newInstance() |==> <NO-OP>
348:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@<init>(java.io.Reader):61:parser = new JsonParser(0) |==> <NO-OP>
349:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@<init>(java.io.Reader):62:parser.setInput("MarcInput", in, false) |==> <NO-OP>
350:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@<init>(java.io.Reader):68:factory = MarcFactory.newInstance() |==> <NO-OP>
351:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@hasNext():79:code == 0 |==> code <= 0
352:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@hasNext():79:code == 0 |==> code >= 0
353:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@hasNext():79:code == 0 |==> false
354:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@hasNext():79:code == JsonParser.EVT_OBJECT_ENDED |==> code <= JsonParser.EVT_OBJECT_ENDED
355:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@hasNext():79:code == JsonParser.EVT_OBJECT_ENDED |==> code >= JsonParser.EVT_OBJECT_ENDED
356:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@hasNext():79:code == JsonParser.EVT_OBJECT_ENDED |==> false
357:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcJsonReader@hasNext():79:code == 0 || code == JsonParser.EVT_OBJECT_ENDED |==> code == 0 != (code == JsonParser.EVT_OBJECT_ENDED)
358:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@hasNext():79:code == 0 || code == JsonParser.EVT_OBJECT_ENDED |==> code == 0
359:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@hasNext():79:code == 0 || code == JsonParser.EVT_OBJECT_ENDED |==> code == JsonParser.EVT_OBJECT_ENDED
360:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcJsonReader@hasNext():79:code == 0 || code == JsonParser.EVT_OBJECT_ENDED |==> true
361:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@hasNext():80:code = parser.next() |==> <NO-OP>
362:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@hasNext():83:code == JsonParser.EVT_OBJECT_BEGIN |==> code <= JsonParser.EVT_OBJECT_BEGIN
363:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@hasNext():83:code == JsonParser.EVT_OBJECT_BEGIN |==> code >= JsonParser.EVT_OBJECT_BEGIN
364:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@hasNext():83:code == JsonParser.EVT_OBJECT_BEGIN |==> false
365:STD:<RETURN>:<NO-OP>:org.marc4j.MarcJsonReader@hasNext():84:return true; |==> <NO-OP>
366:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@hasNext():87:code == JsonParser.EVT_INPUT_ENDED |==> code <= JsonParser.EVT_INPUT_ENDED
367:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@hasNext():87:code == JsonParser.EVT_INPUT_ENDED |==> code >= JsonParser.EVT_INPUT_ENDED
368:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@hasNext():87:code == JsonParser.EVT_INPUT_ENDED |==> false
369:STD:<RETURN>:<NO-OP>:org.marc4j.MarcJsonReader@hasNext():88:return false; |==> <NO-OP>
370:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():111:parserLevel == 0 |==> parserLevel <= 0
371:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():111:parserLevel == 0 |==> parserLevel >= 0
372:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():111:parserLevel == 0 |==> false
373:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():112:record = factory.newRecord() |==> <NO-OP>
374:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():113:inArray == FIELDS_ARRAY |==> inArray <= FIELDS_ARRAY
375:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():113:inArray == FIELDS_ARRAY |==> inArray >= FIELDS_ARRAY
376:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():113:inArray == FIELDS_ARRAY |==> false
377:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():113:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> inArray == FIELDS_ARRAY == mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]")
378:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():113:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> false
379:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():113:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> inArray == FIELDS_ARRAY
380:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():114:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]")
381:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():115:df = factory.newDataField() |==> <NO-OP>
382:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():116:df.setTag(mname) |==> <NO-OP>
383:STD:<INC>:<NO-OP>:org.marc4j.MarcJsonReader@next():119:parserLevel++ |==> <NO-OP>
384:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonReader@next():120:break; |==> <NO-OP>
385:STD:<DEC>:<NO-OP>:org.marc4j.MarcJsonReader@next():122:parserLevel-- |==> <NO-OP>
386:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():123:parserLevel == 0 |==> parserLevel <= 0
387:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():123:parserLevel == 0 |==> parserLevel >= 0
388:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():123:parserLevel == 0 |==> false
389:STD:<RETURN>:<NO-OP>:org.marc4j.MarcJsonReader@next():124:return record; |==> <NO-OP>
390:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():125:inArray == FIELDS_ARRAY |==> inArray <= FIELDS_ARRAY
391:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():125:inArray == FIELDS_ARRAY |==> inArray >= FIELDS_ARRAY
392:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():125:inArray == FIELDS_ARRAY |==> false
393:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():125:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> inArray == FIELDS_ARRAY == mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]")
394:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():125:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> false
395:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():125:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> inArray == FIELDS_ARRAY
396:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():126:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]")
397:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():127:record.addVariableField(df) |==> <NO-OP>
398:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():128:df = null |==> <NO-OP>
399:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():129:inArray == DATAFIELD_ARRAY |==> inArray <= DATAFIELD_ARRAY
400:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():129:inArray == DATAFIELD_ARRAY |==> inArray >= DATAFIELD_ARRAY
401:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():129:inArray == DATAFIELD_ARRAY |==> false
402:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():129:inArray == DATAFIELD_ARRAY && mname.matches("datafield") |==> inArray == DATAFIELD_ARRAY == mname.matches("datafield")
403:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():129:inArray == DATAFIELD_ARRAY && mname.matches("datafield") |==> false
404:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():129:inArray == DATAFIELD_ARRAY && mname.matches("datafield") |==> inArray == DATAFIELD_ARRAY
405:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():130:inArray == DATAFIELD_ARRAY && mname.matches("datafield") |==> mname.matches("datafield")
406:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():131:record.addVariableField(df) |==> <NO-OP>
407:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():132:df = null |==> <NO-OP>
408:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonReader@next():135:break; |==> <NO-OP>
409:COR:mname.equals("fields"):TRUE:org.marc4j.MarcJsonReader@next():137:mname.equals("fields") |==> false
410:COR:mname.equals("fields"):FALSE:org.marc4j.MarcJsonReader@next():137:mname.equals("fields") |==> true
411:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():138:inArray = FIELDS_ARRAY |==> <NO-OP>
412:COR:mname.equals("subfields"):TRUE:org.marc4j.MarcJsonReader@next():139:mname.equals("subfields") |==> false
413:COR:mname.equals("subfields"):FALSE:org.marc4j.MarcJsonReader@next():139:mname.equals("subfields") |==> true
414:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():140:inArray = SUBFIELDS_ARRAY |==> <NO-OP>
415:COR:mname.equals("controlfield"):TRUE:org.marc4j.MarcJsonReader@next():141:mname.equals("controlfield") |==> false
416:COR:mname.equals("controlfield"):FALSE:org.marc4j.MarcJsonReader@next():141:mname.equals("controlfield") |==> true
417:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():142:inArray = CONTROLFIELD_ARRAY |==> <NO-OP>
418:COR:mname.equals("datafield"):TRUE:org.marc4j.MarcJsonReader@next():143:mname.equals("datafield") |==> false
419:COR:mname.equals("datafield"):FALSE:org.marc4j.MarcJsonReader@next():143:mname.equals("datafield") |==> true
420:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():144:inArray = DATAFIELD_ARRAY |==> <NO-OP>
421:COR:mname.equals("subfield"):TRUE:org.marc4j.MarcJsonReader@next():145:mname.equals("subfield") |==> false
422:COR:mname.equals("subfield"):FALSE:org.marc4j.MarcJsonReader@next():145:mname.equals("subfield") |==> true
423:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():146:inArray = SUBFIELD_ARRAY |==> <NO-OP>
424:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonReader@next():149:break; |==> <NO-OP>
425:COR:mname.equals("fields"):TRUE:org.marc4j.MarcJsonReader@next():151:mname.equals("fields") |==> false
426:COR:mname.equals("fields"):FALSE:org.marc4j.MarcJsonReader@next():151:mname.equals("fields") |==> true
427:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():152:inArray = NO_ARRAY |==> <NO-OP>
428:COR:mname.equals("subfields"):TRUE:org.marc4j.MarcJsonReader@next():153:mname.equals("subfields") |==> false
429:COR:mname.equals("subfields"):FALSE:org.marc4j.MarcJsonReader@next():153:mname.equals("subfields") |==> true
430:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():154:inArray = FIELDS_ARRAY |==> <NO-OP>
431:COR:mname.equals("controlfield"):TRUE:org.marc4j.MarcJsonReader@next():155:mname.equals("controlfield") |==> false
432:COR:mname.equals("controlfield"):FALSE:org.marc4j.MarcJsonReader@next():155:mname.equals("controlfield") |==> true
433:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():156:inArray = NO_ARRAY |==> <NO-OP>
434:COR:mname.equals("datafield"):TRUE:org.marc4j.MarcJsonReader@next():157:mname.equals("datafield") |==> false
435:COR:mname.equals("datafield"):FALSE:org.marc4j.MarcJsonReader@next():157:mname.equals("datafield") |==> true
436:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():158:inArray = NO_ARRAY |==> <NO-OP>
437:COR:mname.equals("subfield"):TRUE:org.marc4j.MarcJsonReader@next():159:mname.equals("subfield") |==> false
438:COR:mname.equals("subfield"):FALSE:org.marc4j.MarcJsonReader@next():159:mname.equals("subfield") |==> true
439:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():160:inArray = DATAFIELD_ARRAY |==> <NO-OP>
440:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonReader@next():163:break; |==> <NO-OP>
441:COR:JsonParser.isQuoted(value):TRUE:org.marc4j.MarcJsonReader@next():166:JsonParser.isQuoted(value) |==> false
442:COR:JsonParser.isQuoted(value):FALSE:org.marc4j.MarcJsonReader@next():166:JsonParser.isQuoted(value) |==> true
443:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():167:value = JsonParser.stripQuotes(value) |==> <NO-OP>
444:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():170:value = value.replaceAll("\u2044", "/") |==> <NO-OP>
445:COR:mname.equals("ind1"):TRUE:org.marc4j.MarcJsonReader@next():172:mname.equals("ind1") |==> false
446:COR:mname.equals("ind1"):FALSE:org.marc4j.MarcJsonReader@next():172:mname.equals("ind1") |==> true
447:ROR:>=(int,int):==(int,int):org.marc4j.MarcJsonReader@next():173:value.length() >= 1 |==> value.length() == 1
448:ROR:>=(int,int):>(int,int):org.marc4j.MarcJsonReader@next():173:value.length() >= 1 |==> value.length() > 1
449:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcJsonReader@next():173:value.length() >= 1 |==> true
450:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():173:df.setIndicator1(value.length() >= 1 ? value.charAt(0) : ' ') |==> <NO-OP>
451:COR:mname.equals("ind2"):TRUE:org.marc4j.MarcJsonReader@next():174:mname.equals("ind2") |==> false
452:COR:mname.equals("ind2"):FALSE:org.marc4j.MarcJsonReader@next():174:mname.equals("ind2") |==> true
453:ROR:>=(int,int):==(int,int):org.marc4j.MarcJsonReader@next():175:value.length() >= 1 |==> value.length() == 1
454:ROR:>=(int,int):>(int,int):org.marc4j.MarcJsonReader@next():175:value.length() >= 1 |==> value.length() > 1
455:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcJsonReader@next():175:value.length() >= 1 |==> true
456:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():175:df.setIndicator2(value.length() >= 1 ? value.charAt(0) : ' ') |==> <NO-OP>
457:COR:mname.equals("leader"):TRUE:org.marc4j.MarcJsonReader@next():176:mname.equals("leader") |==> false
458:COR:mname.equals("leader"):FALSE:org.marc4j.MarcJsonReader@next():176:mname.equals("leader") |==> true
459:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():177:record.setLeader(factory.newLeader(value)) |==> <NO-OP>
460:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():178:inArray == FIELDS_ARRAY |==> inArray <= FIELDS_ARRAY
461:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():178:inArray == FIELDS_ARRAY |==> inArray >= FIELDS_ARRAY
462:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():178:inArray == FIELDS_ARRAY |==> false
463:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():178:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> inArray == FIELDS_ARRAY == mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]")
464:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():178:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> false
465:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():178:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> inArray == FIELDS_ARRAY
466:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():178:inArray == FIELDS_ARRAY && mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]") |==> mname.matches("[A-Z0-9][A-Z0-9][A-Z0-9]")
467:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():179:cf = factory.newControlField(mname, value) |==> <NO-OP>
468:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():180:record.addVariableField(cf) |==> <NO-OP>
469:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():181:inArray == SUBFIELDS_ARRAY |==> inArray <= SUBFIELDS_ARRAY
470:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():181:inArray == SUBFIELDS_ARRAY |==> inArray >= SUBFIELDS_ARRAY
471:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():181:inArray == SUBFIELDS_ARRAY |==> false
472:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():181:inArray == SUBFIELDS_ARRAY && mname.matches("[a-z0-9]") |==> inArray == SUBFIELDS_ARRAY == mname.matches("[a-z0-9]")
473:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():181:inArray == SUBFIELDS_ARRAY && mname.matches("[a-z0-9]") |==> false
474:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():181:inArray == SUBFIELDS_ARRAY && mname.matches("[a-z0-9]") |==> inArray == SUBFIELDS_ARRAY
475:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():181:inArray == SUBFIELDS_ARRAY && mname.matches("[a-z0-9]") |==> mname.matches("[a-z0-9]")
476:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():182:sf = factory.newSubfield(mname.charAt(0), value) |==> <NO-OP>
477:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():183:df.addSubfield(sf) |==> <NO-OP>
478:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():184:inArray == CONTROLFIELD_ARRAY |==> inArray <= CONTROLFIELD_ARRAY
479:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():184:inArray == CONTROLFIELD_ARRAY |==> inArray >= CONTROLFIELD_ARRAY
480:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():184:inArray == CONTROLFIELD_ARRAY |==> false
481:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():184:inArray == CONTROLFIELD_ARRAY && mname.equals("tag") |==> inArray == CONTROLFIELD_ARRAY == mname.equals("tag")
482:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():184:inArray == CONTROLFIELD_ARRAY && mname.equals("tag") |==> false
483:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():184:inArray == CONTROLFIELD_ARRAY && mname.equals("tag") |==> inArray == CONTROLFIELD_ARRAY
484:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():184:inArray == CONTROLFIELD_ARRAY && mname.equals("tag") |==> mname.equals("tag")
485:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():185:cf = factory.newControlField() |==> <NO-OP>
486:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():186:cf.setTag(value) |==> <NO-OP>
487:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():187:inArray == CONTROLFIELD_ARRAY |==> inArray <= CONTROLFIELD_ARRAY
488:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():187:inArray == CONTROLFIELD_ARRAY |==> inArray >= CONTROLFIELD_ARRAY
489:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():187:inArray == CONTROLFIELD_ARRAY |==> false
490:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():187:inArray == CONTROLFIELD_ARRAY && mname.equals("data") |==> inArray == CONTROLFIELD_ARRAY == mname.equals("data")
491:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():187:inArray == CONTROLFIELD_ARRAY && mname.equals("data") |==> false
492:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():187:inArray == CONTROLFIELD_ARRAY && mname.equals("data") |==> inArray == CONTROLFIELD_ARRAY
493:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():187:inArray == CONTROLFIELD_ARRAY && mname.equals("data") |==> mname.equals("data")
494:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():188:cf.setData(value) |==> <NO-OP>
495:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():189:record.addVariableField(cf) |==> <NO-OP>
496:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():190:inArray == DATAFIELD_ARRAY |==> inArray <= DATAFIELD_ARRAY
497:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():190:inArray == DATAFIELD_ARRAY |==> inArray >= DATAFIELD_ARRAY
498:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():190:inArray == DATAFIELD_ARRAY |==> false
499:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():190:inArray == DATAFIELD_ARRAY && mname.equals("tag") |==> inArray == DATAFIELD_ARRAY == mname.equals("tag")
500:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():190:inArray == DATAFIELD_ARRAY && mname.equals("tag") |==> false
501:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():190:inArray == DATAFIELD_ARRAY && mname.equals("tag") |==> inArray == DATAFIELD_ARRAY
502:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():190:inArray == DATAFIELD_ARRAY && mname.equals("tag") |==> mname.equals("tag")
503:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():191:df = factory.newDataField() |==> <NO-OP>
504:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():192:df.setTag(value) |==> <NO-OP>
505:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():193:inArray == DATAFIELD_ARRAY |==> inArray <= DATAFIELD_ARRAY
506:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():193:inArray == DATAFIELD_ARRAY |==> inArray >= DATAFIELD_ARRAY
507:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():193:inArray == DATAFIELD_ARRAY |==> false
508:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():193:inArray == DATAFIELD_ARRAY && mname.equals("ind") |==> inArray == DATAFIELD_ARRAY == mname.equals("ind")
509:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():193:inArray == DATAFIELD_ARRAY && mname.equals("ind") |==> false
510:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():193:inArray == DATAFIELD_ARRAY && mname.equals("ind") |==> inArray == DATAFIELD_ARRAY
511:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():193:inArray == DATAFIELD_ARRAY && mname.equals("ind") |==> mname.equals("ind")
512:ROR:>=(int,int):==(int,int):org.marc4j.MarcJsonReader@next():194:value.length() >= 1 |==> value.length() == 1
513:ROR:>=(int,int):>(int,int):org.marc4j.MarcJsonReader@next():194:value.length() >= 1 |==> value.length() > 1
514:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcJsonReader@next():194:value.length() >= 1 |==> true
515:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():194:df.setIndicator1(value.length() >= 1 ? value.charAt(0) : ' ') |==> <NO-OP>
516:ROR:>(int,int):!=(int,int):org.marc4j.MarcJsonReader@next():195:value.length() > 1 |==> value.length() != 1
517:ROR:>(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():195:value.length() > 1 |==> value.length() >= 1
518:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():195:value.length() > 1 |==> false
519:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():195:df.setIndicator2(value.length() > 1 ? value.charAt(1) : ' ') |==> <NO-OP>
520:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():196:inArray == SUBFIELD_ARRAY |==> inArray <= SUBFIELD_ARRAY
521:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():196:inArray == SUBFIELD_ARRAY |==> inArray >= SUBFIELD_ARRAY
522:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():196:inArray == SUBFIELD_ARRAY |==> false
523:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():196:inArray == SUBFIELD_ARRAY && mname.equals("code") |==> inArray == SUBFIELD_ARRAY == mname.equals("code")
524:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():196:inArray == SUBFIELD_ARRAY && mname.equals("code") |==> false
525:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():196:inArray == SUBFIELD_ARRAY && mname.equals("code") |==> inArray == SUBFIELD_ARRAY
526:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():196:inArray == SUBFIELD_ARRAY && mname.equals("code") |==> mname.equals("code")
527:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():197:sf = factory.newSubfield() |==> <NO-OP>
528:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():198:sf.setCode(value.charAt(0)) |==> <NO-OP>
529:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonReader@next():199:inArray == SUBFIELD_ARRAY |==> inArray <= SUBFIELD_ARRAY
530:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonReader@next():199:inArray == SUBFIELD_ARRAY |==> inArray >= SUBFIELD_ARRAY
531:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonReader@next():199:inArray == SUBFIELD_ARRAY |==> false
532:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcJsonReader@next():199:inArray == SUBFIELD_ARRAY && mname.equals("data") |==> inArray == SUBFIELD_ARRAY == mname.equals("data")
533:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcJsonReader@next():199:inArray == SUBFIELD_ARRAY && mname.equals("data") |==> false
534:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonReader@next():199:inArray == SUBFIELD_ARRAY && mname.equals("data") |==> inArray == SUBFIELD_ARRAY
535:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonReader@next():199:inArray == SUBFIELD_ARRAY && mname.equals("data") |==> mname.equals("data")
536:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():200:sf.setData(value) |==> <NO-OP>
537:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonReader@next():201:df.addSubfield(sf) |==> <NO-OP>
538:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonReader@next():204:break; |==> <NO-OP>
539:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonReader@next():208:code = parser.next() |==> <NO-OP>
540:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@newInstance():70:loader == null |==> false
541:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.MarcFactory@newInstance():71:loader = MarcFactory.class.getClassLoader() |==> <NO-OP>
542:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.MarcFactory@newInstance():78:className = getFactoryClassName(loader, count++) |==> <NO-OP>
543:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@newInstance():80:className != null |==> true
544:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@newInstance():82:loader != null |==> true
545:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@newInstance():84:return (MarcFactory)t.newInstance(); |==> <NO-OP>
546:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.MarcFactory@newInstance():86:className = null |==> <NO-OP>
547:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@newInstance():90:className == null |==> false
548:ROR:<(int,int):!=(int,int):org.marc4j.marc.MarcFactory@newInstance():90:count < 3 |==> count != 3
549:ROR:<(int,int):<=(int,int):org.marc4j.marc.MarcFactory@newInstance():90:count < 3 |==> count <= 3
550:ROR:<(int,int):FALSE(int,int):org.marc4j.marc.MarcFactory@newInstance():90:count < 3 |==> false
551:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.MarcFactory@newInstance():90:className == null && count < 3 |==> className == null == count < 3
552:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.MarcFactory@newInstance():90:className == null && count < 3 |==> false
553:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.MarcFactory@newInstance():90:className == null && count < 3 |==> className == null
554:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.MarcFactory@newInstance():90:className == null && count < 3 |==> count < 3
555:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):99:return System.getProperty(propertyName); |==> <NO-OP>
556:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):103:file = new File(file, "lib") |==> <NO-OP>
557:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):104:file = new File(file, "marc4j.properties") |==> <NO-OP>
558:STD:<CALL>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):107:props.load(in) |==> <NO-OP>
559:STD:<CALL>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):108:in.close() |==> <NO-OP>
560:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):110:return props.getProperty(propertyName); |==> <NO-OP>
561:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):112:return null; |==> <NO-OP>
562:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):118:loader != null |==> true
563:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):118:in = (loader != null) ? loader.getResourceAsStream(serviceKey) : MarcFactory.class.getResourceAsStream(serviceKey) |==> <NO-OP>
564:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):121:in != null |==> true
565:STD:<CALL>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):124:r.close() |==> <NO-OP>
566:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):125:return ret; |==> <NO-OP>
567:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):130:in != null |==> true
568:STD:<CALL>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):130:in.close() |==> <NO-OP>
569:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@getFactoryClassName(java.lang.ClassLoader,int):134:return null; |==> <NO-OP>
570:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):266:record.getLeader() == null |==> false
571:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):267:return false; |==> <NO-OP>
572:COR:validateControlField(controlField):TRUE:org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):271:validateControlField(controlField) |==> false
573:COR:validateControlField(controlField):FALSE:org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):271:validateControlField(controlField) |==> true
574:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):272:return false; |==> <NO-OP>
575:COR:validateDataField(dataField):TRUE:org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):277:validateDataField(dataField) |==> false
576:COR:validateDataField(dataField):FALSE:org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):277:validateDataField(dataField) |==> true
577:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@validateRecord(org.marc4j.marc.Record):278:return false; |==> <NO-OP>
578:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@validateVariableField(org.marc4j.marc.VariableField):293:field.getTag() != null |==> true
579:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@validateControlField(org.marc4j.marc.ControlField):304:field.getData() != null |==> true
580:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.MarcFactory@validateControlField(org.marc4j.marc.ControlField):304:validateVariableField(field) && field.getData() != null |==> validateVariableField(field) == (field.getData() != null)
581:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.MarcFactory@validateControlField(org.marc4j.marc.ControlField):304:validateVariableField(field) && field.getData() != null |==> false
582:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.MarcFactory@validateControlField(org.marc4j.marc.ControlField):304:validateVariableField(field) && field.getData() != null |==> validateVariableField(field)
583:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.MarcFactory@validateControlField(org.marc4j.marc.ControlField):304:validateVariableField(field) && field.getData() != null |==> field.getData() != null
584:COR:validateVariableField(field):TRUE:org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):315:validateVariableField(field) |==> false
585:COR:validateVariableField(field):FALSE:org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):315:validateVariableField(field) |==> true
586:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):316:return false; |==> <NO-OP>
587:ROR:==(int,int):<=(int,int):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator1() == 0 |==> field.getIndicator1() <= 0
588:ROR:==(int,int):>=(int,int):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator1() == 0 |==> field.getIndicator1() >= 0
589:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator1() == 0 |==> false
590:ROR:==(int,int):<=(int,int):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator2() == 0 |==> field.getIndicator2() <= 0
591:ROR:==(int,int):>=(int,int):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator2() == 0 |==> field.getIndicator2() >= 0
592:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator2() == 0 |==> false
593:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator1() == 0 || field.getIndicator2() == 0 |==> field.getIndicator1() == 0 != (field.getIndicator2() == 0)
594:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator1() == 0 || field.getIndicator2() == 0 |==> field.getIndicator1() == 0
595:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator1() == 0 || field.getIndicator2() == 0 |==> field.getIndicator2() == 0
596:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):319:field.getIndicator1() == 0 || field.getIndicator2() == 0 |==> true
597:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):320:return false; |==> <NO-OP>
598:COR:validateSubField(subfield):TRUE:org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):324:validateSubField(subfield) |==> false
599:COR:validateSubField(subfield):FALSE:org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):324:validateSubField(subfield) |==> true
600:STD:<RETURN>:<NO-OP>:org.marc4j.marc.MarcFactory@validateDataField(org.marc4j.marc.DataField):325:return false; |==> <NO-OP>
601:ROR:!=(int,int):<(int,int):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getCode() != 0 |==> subfield.getCode() < 0
602:ROR:!=(int,int):>(int,int):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getCode() != 0 |==> subfield.getCode() > 0
603:ROR:!=(int,int):TRUE(int,int):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getCode() != 0 |==> true
604:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getData() != null |==> true
605:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getCode() != 0 && subfield.getData() != null |==> subfield.getCode() != 0 == (subfield.getData() != null)
606:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getCode() != 0 && subfield.getData() != null |==> false
607:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getCode() != 0 && subfield.getData() != null |==> subfield.getCode() != 0
608:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.MarcFactory@validateSubField(org.marc4j.marc.Subfield):340:subfield.getCode() != 0 && subfield.getData() != null |==> subfield.getData() != null
609:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):105:opt & OPT_EOL_IS_COMMA |==> opt ^ OPT_EOL_IS_COMMA
610:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):105:opt & OPT_EOL_IS_COMMA |==> opt | OPT_EOL_IS_COMMA
611:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):105:(opt & OPT_EOL_IS_COMMA) != 0 |==> (opt & OPT_EOL_IS_COMMA) < 0
612:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):105:(opt & OPT_EOL_IS_COMMA) != 0 |==> (opt & OPT_EOL_IS_COMMA) > 0
613:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):105:(opt & OPT_EOL_IS_COMMA) != 0 |==> true
614:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):106:opt & OPT_INTERN_KEYWORDS |==> opt ^ OPT_INTERN_KEYWORDS
615:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):106:opt & OPT_INTERN_KEYWORDS |==> opt | OPT_INTERN_KEYWORDS
616:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):106:(opt & OPT_INTERN_KEYWORDS) != 0 |==> (opt & OPT_INTERN_KEYWORDS) < 0
617:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):106:(opt & OPT_INTERN_KEYWORDS) != 0 |==> (opt & OPT_INTERN_KEYWORDS) > 0
618:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):106:(opt & OPT_INTERN_KEYWORDS) != 0 |==> true
619:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):107:opt & OPT_INTERN_VALUES |==> opt ^ OPT_INTERN_VALUES
620:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):107:opt & OPT_INTERN_VALUES |==> opt | OPT_INTERN_VALUES
621:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):107:(opt & OPT_INTERN_VALUES) != 0 |==> (opt & OPT_INTERN_VALUES) < 0
622:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):107:(opt & OPT_INTERN_VALUES) != 0 |==> (opt & OPT_INTERN_VALUES) > 0
623:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):107:(opt & OPT_INTERN_VALUES) != 0 |==> true
624:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):108:opt & OPT_MULTILINE_COMMENTS |==> opt ^ OPT_MULTILINE_COMMENTS
625:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):108:opt & OPT_MULTILINE_COMMENTS |==> opt | OPT_MULTILINE_COMMENTS
626:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):108:(opt & OPT_MULTILINE_COMMENTS) != 0 |==> (opt & OPT_MULTILINE_COMMENTS) < 0
627:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):108:(opt & OPT_MULTILINE_COMMENTS) != 0 |==> (opt & OPT_MULTILINE_COMMENTS) > 0
628:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):108:(opt & OPT_MULTILINE_COMMENTS) != 0 |==> true
629:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):109:opt & OPT_MULTILINE_STRINGS |==> opt ^ OPT_MULTILINE_STRINGS
630:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):109:opt & OPT_MULTILINE_STRINGS |==> opt | OPT_MULTILINE_STRINGS
631:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):109:(opt & OPT_MULTILINE_STRINGS) != 0 |==> (opt & OPT_MULTILINE_STRINGS) < 0
632:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):109:(opt & OPT_MULTILINE_STRINGS) != 0 |==> (opt & OPT_MULTILINE_STRINGS) > 0
633:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):109:(opt & OPT_MULTILINE_STRINGS) != 0 |==> true
634:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):110:opt & OPT_SINGLE_QUOTE_STRINGS |==> opt ^ OPT_SINGLE_QUOTE_STRINGS
635:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):110:opt & OPT_SINGLE_QUOTE_STRINGS |==> opt | OPT_SINGLE_QUOTE_STRINGS
636:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):110:(opt & OPT_SINGLE_QUOTE_STRINGS) != 0 |==> (opt & OPT_SINGLE_QUOTE_STRINGS) < 0
637:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):110:(opt & OPT_SINGLE_QUOTE_STRINGS) != 0 |==> (opt & OPT_SINGLE_QUOTE_STRINGS) > 0
638:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):110:(opt & OPT_SINGLE_QUOTE_STRINGS) != 0 |==> true
639:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):111:opt & OPT_PRELOAD_INPUT |==> opt ^ OPT_PRELOAD_INPUT
640:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):111:opt & OPT_PRELOAD_INPUT |==> opt | OPT_PRELOAD_INPUT
641:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):111:(opt & OPT_PRELOAD_INPUT) != 0 |==> (opt & OPT_PRELOAD_INPUT) < 0
642:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):111:(opt & OPT_PRELOAD_INPUT) != 0 |==> (opt & OPT_PRELOAD_INPUT) > 0
643:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):111:(opt & OPT_PRELOAD_INPUT) != 0 |==> true
644:LOR:&(int,int):^(int,int):org.marc4j.util.JsonParser@<init>(int):112:opt & OPT_UNQUOTED_KEYWORDS |==> opt ^ OPT_UNQUOTED_KEYWORDS
645:LOR:&(int,int):|(int,int):org.marc4j.util.JsonParser@<init>(int):112:opt & OPT_UNQUOTED_KEYWORDS |==> opt | OPT_UNQUOTED_KEYWORDS
646:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@<init>(int):112:(opt & OPT_UNQUOTED_KEYWORDS) != 0 |==> (opt & OPT_UNQUOTED_KEYWORDS) < 0
647:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@<init>(int):112:(opt & OPT_UNQUOTED_KEYWORDS) != 0 |==> (opt & OPT_UNQUOTED_KEYWORDS) > 0
648:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@<init>(int):112:(opt & OPT_UNQUOTED_KEYWORDS) != 0 |==> true
649:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@<init>(int):117:reset(true) |==> <NO-OP>
650:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@close():125:reset(true) |==> <NO-OP>
651:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@reset():133:reset(false) |==> <NO-OP>
652:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.JsonParser@reset(boolean):137:inpReader != null |==> true
653:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@reset(boolean):137:inpClose && inpReader != null |==> inpClose == (inpReader != null)
654:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@reset(boolean):137:inpClose && inpReader != null |==> false
655:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@reset(boolean):137:inpClose && inpReader != null |==> inpClose
656:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@reset(boolean):137:inpClose && inpReader != null |==> inpReader != null
657:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):139:inpReader.close() |==> <NO-OP>
658:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):145:objectStack.clear() |==> <NO-OP>
659:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):146:accumulator.setLength(0) |==> <NO-OP>
660:COR:all:TRUE:org.marc4j.util.JsonParser@reset(boolean):148:all |==> false
661:COR:all:FALSE:org.marc4j.util.JsonParser@reset(boolean):148:all |==> true
662:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):149:accumulator.trimToSize() |==> <NO-OP>
663:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):152:inpName = null |==> <NO-OP>
664:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):153:inpReader = null |==> <NO-OP>
665:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):154:inpLine = 1 |==> <NO-OP>
666:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):155:inpColumn = 0 |==> <NO-OP>
667:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):156:objectData = new ObjectData("") |==> <NO-OP>
668:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):157:pushBack = -1 |==> <NO-OP>
669:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):159:evtCode = 0 |==> <NO-OP>
670:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):160:evtLine = 0 |==> <NO-OP>
671:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):161:evtColumn = 0 |==> <NO-OP>
672:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):162:mbrName = "" |==> <NO-OP>
673:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@reset(boolean):163:mbrValue = "" |==> <NO-OP>
674:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@getMemberArray():264:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
675:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@getMemberArray():264:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
676:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@getMemberArray():264:objectData.arrayDepth != 0 |==> true
677:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):303:reset(false) |==> <NO-OP>
678:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):305:inpName = inpnam |==> <NO-OP>
679:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):306:inpReader = inpsrc |==> <NO-OP>
680:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):307:inpClose = inpcls |==> <NO-OP>
681:COR:optPreloadInput:TRUE:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):309:optPreloadInput |==> false
682:COR:optPreloadInput:FALSE:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):309:optPreloadInput |==> true
683:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):310:inpReader = preloadInput(inpnam, inpReader, inpClose, 0) |==> <NO-OP>
684:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.Reader,boolean):311:inpClose = true |==> <NO-OP>
685:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.InputStream,java.lang.String,boolean):328:reset(false) |==> <NO-OP>
686:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.InputStream,java.lang.String,boolean):330:inpName = inpnam |==> <NO-OP>
687:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.InputStream,java.lang.String,boolean):337:inpClose = inpcls |==> <NO-OP>
688:COR:optPreloadInput:TRUE:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.InputStream,java.lang.String,boolean):339:optPreloadInput |==> false
689:COR:optPreloadInput:FALSE:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.InputStream,java.lang.String,boolean):339:optPreloadInput |==> true
690:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.InputStream,java.lang.String,boolean):340:inpReader = preloadInput(inpnam, inpReader, inpClose, 0) |==> <NO-OP>
691:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.io.InputStream,java.lang.String,boolean):341:inpClose = true |==> <NO-OP>
692:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.lang.String,int):356:reset(false) |==> <NO-OP>
693:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.lang.String,int):358:inpName = inpfil |==> <NO-OP>
694:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.lang.String,int):370:inpClose = true |==> <NO-OP>
695:COR:optPreloadInput:TRUE:org.marc4j.util.JsonParser@setInput(java.lang.String,java.lang.String,int):372:optPreloadInput |==> false
696:COR:optPreloadInput:FALSE:org.marc4j.util.JsonParser@setInput(java.lang.String,java.lang.String,int):372:optPreloadInput |==> true
697:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.lang.String,int):373:inpReader = preloadInput(inpfil, inpReader, inpClose, Math.min(Integer.MAX_VALUE, (int)new File(inpfil).length())) |==> <NO-OP>
698:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.lang.String,java.lang.String,int):375:inpClose = true |==> <NO-OP>
699:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.io.File,java.lang.String,int):390:reset(false) |==> <NO-OP>
700:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.io.File,java.lang.String,int):392:inpName = inpfil.toString() |==> <NO-OP>
701:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.io.File,java.lang.String,int):404:inpClose = true |==> <NO-OP>
702:COR:optPreloadInput:TRUE:org.marc4j.util.JsonParser@setInput(java.io.File,java.lang.String,int):406:optPreloadInput |==> false
703:COR:optPreloadInput:FALSE:org.marc4j.util.JsonParser@setInput(java.io.File,java.lang.String,int):406:optPreloadInput |==> true
704:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.io.File,java.lang.String,int):407:inpReader = preloadInput(inpfil.toString(), inpReader, inpClose, Math.min(Integer.MAX_VALUE, (int)inpfil.length())) |==> <NO-OP>
705:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@setInput(java.io.File,java.lang.String,int):409:inpClose = true |==> <NO-OP>
706:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():421:evtCode != EVT_INPUT_ENDED |==> evtCode < EVT_INPUT_ENDED
707:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():421:evtCode != EVT_INPUT_ENDED |==> evtCode > EVT_INPUT_ENDED
708:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():421:evtCode != EVT_INPUT_ENDED |==> true
709:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():433:evtCode = 0 |==> <NO-OP>
710:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():434:evtLine = 0 |==> <NO-OP>
711:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():435:evtColumn = 0 |==> <NO-OP>
712:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():436:pet == EVT_OBJECT_BEGIN |==> pet <= EVT_OBJECT_BEGIN
713:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():436:pet == EVT_OBJECT_BEGIN |==> pet >= EVT_OBJECT_BEGIN
714:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():436:pet == EVT_OBJECT_BEGIN |==> false
715:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():437:mbrName = "" |==> <NO-OP>
716:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():438:pet == EVT_OBJECT_ENDED |==> pet <= EVT_OBJECT_ENDED
717:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():438:pet == EVT_OBJECT_ENDED |==> pet >= EVT_OBJECT_ENDED
718:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():438:pet == EVT_OBJECT_ENDED |==> false
719:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():439:popObjectData() |==> <NO-OP>
720:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():440:pet == EVT_ARRAY_ENDED |==> pet <= EVT_ARRAY_ENDED
721:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():440:pet == EVT_ARRAY_ENDED |==> pet >= EVT_ARRAY_ENDED
722:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():440:pet == EVT_ARRAY_ENDED |==> false
723:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():441:mbrName = "" |==> <NO-OP>
724:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():442:pet == EVT_OBJECT_MEMBER |==> pet <= EVT_OBJECT_MEMBER
725:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():442:pet == EVT_OBJECT_MEMBER |==> pet >= EVT_OBJECT_MEMBER
726:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():442:pet == EVT_OBJECT_MEMBER |==> false
727:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():443:mbrName = "" |==> <NO-OP>
728:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():445:mbrValue = null |==> <NO-OP>
729:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():447:(ich = readChar()) != -1 |==> (ich = readChar()) < -1
730:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():447:(ich = readChar()) != -1 |==> (ich = readChar()) > -1
731:COR:qut:TRUE:org.marc4j.util.JsonParser@next():448:qut |==> false
732:COR:qut:FALSE:org.marc4j.util.JsonParser@next():448:qut |==> true
733:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():450:ich == '*' |==> ich <= '*'
734:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():450:ich == '*' |==> ich >= '*'
735:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():450:ich == '*' |==> false
736:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():450:ich == '#' |==> ich <= '#'
737:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():450:ich == '#' |==> ich >= '#'
738:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():450:ich == '#' |==> false
739:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@next():450:ich == '*' || ich == '#' |==> ich == '*' != (ich == '#')
740:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():450:ich == '*' || ich == '#' |==> ich == '*'
741:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():450:ich == '*' || ich == '#' |==> ich == '#'
742:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.JsonParser@next():450:ich == '*' || ich == '#' |==> true
743:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():451:(ich = readChar()) != -1 |==> (ich = readChar()) < -1
744:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():451:(ich = readChar()) != -1 |==> (ich = readChar()) > -1
745:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():451:(ich = readChar()) != -1 |==> true
746:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():451:ich != '\n' |==> ich < '\n'
747:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():451:ich != '\n' |==> ich > '\n'
748:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():451:ich != '\n' |==> true
749:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():451:(ich = readChar()) != -1 && ich != '\n' |==> (ich = readChar()) != -1 == (ich != '\n')
750:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():451:(ich = readChar()) != -1 && ich != '\n' |==> false
751:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():451:(ich = readChar()) != -1 && ich != '\n' |==> (ich = readChar()) != -1
752:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():451:(ich = readChar()) != -1 && ich != '\n' |==> ich != '\n'
753:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():454:ich == '/' |==> ich <= '/'
754:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():454:ich == '/' |==> ich >= '/'
755:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():454:ich == '/' |==> false
756:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():456:tmp == '/' |==> tmp <= '/'
757:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():456:tmp == '/' |==> tmp >= '/'
758:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():456:tmp == '/' |==> false
759:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():457:(ich = readChar()) != -1 |==> (ich = readChar()) < -1
760:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():457:(ich = readChar()) != -1 |==> (ich = readChar()) > -1
761:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():457:(ich = readChar()) != -1 |==> true
762:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():457:ich != '\n' |==> ich < '\n'
763:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():457:ich != '\n' |==> ich > '\n'
764:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():457:ich != '\n' |==> true
765:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():457:(ich = readChar()) != -1 && ich != '\n' |==> (ich = readChar()) != -1 == (ich != '\n')
766:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():457:(ich = readChar()) != -1 && ich != '\n' |==> false
767:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():457:(ich = readChar()) != -1 && ich != '\n' |==> (ich = readChar()) != -1
768:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():457:(ich = readChar()) != -1 && ich != '\n' |==> ich != '\n'
769:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():460:tmp == '*' |==> tmp <= '*'
770:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():460:tmp == '*' |==> tmp >= '*'
771:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():460:tmp == '*' |==> false
772:COR:optMultilineComments:TRUE:org.marc4j.util.JsonParser@next():461:optMultilineComments |==> false
773:COR:optMultilineComments:FALSE:org.marc4j.util.JsonParser@next():461:optMultilineComments |==> true
774:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():466:(tmp = readChar()) != -1 |==> (tmp = readChar()) < -1
775:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():466:(tmp = readChar()) != -1 |==> (tmp = readChar()) > -1
776:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():466:(tmp = readChar()) != -1 |==> true
777:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():467:tmp == '*' |==> tmp <= '*'
778:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():467:tmp == '*' |==> tmp >= '*'
779:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():467:tmp == '*' |==> false
780:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():467:(tmp = readChar()) == '/' |==> (tmp = readChar()) <= '/'
781:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():467:(tmp = readChar()) == '/' |==> (tmp = readChar()) >= '/'
782:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():467:(tmp = readChar()) == '/' |==> false
783:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():467:tmp == '*' && (tmp = readChar()) == '/' |==> tmp == '*' == ((tmp = readChar()) == '/')
784:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():467:tmp == '*' && (tmp = readChar()) == '/' |==> false
785:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():467:tmp == '*' && (tmp = readChar()) == '/' |==> tmp == '*'
786:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():467:tmp == '*' && (tmp = readChar()) == '/' |==> (tmp = readChar()) == '/'
787:STD:<BREAK>:<NO-OP>:org.marc4j.util.JsonParser@next():468:break; |==> <NO-OP>
788:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():471:tmp != '/' |==> tmp < '/'
789:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():471:tmp != '/' |==> tmp > '/'
790:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():471:tmp != '/' |==> true
791:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():476:ich = ' ' |==> <NO-OP>
792:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():478:unreadChar(tmp) |==> <NO-OP>
793:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():479:ich = '/' |==> <NO-OP>
794:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():482:ich == -1 |==> ich <= -1
795:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():482:ich == -1 |==> ich >= -1
796:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():482:ich == -1 |==> false
797:STD:<BREAK>:<NO-OP>:org.marc4j.util.JsonParser@next():483:break; |==> <NO-OP>
798:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():492:ich == '\\' |==> ich <= '\\'
799:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():492:ich == '\\' |==> ich >= '\\'
800:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():492:ich == '\\' |==> false
801:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():494:(ich = readChar()) == -1 |==> (ich = readChar()) <= -1
802:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():494:(ich = readChar()) == -1 |==> (ich = readChar()) >= -1
803:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():494:(ich = readChar()) == -1 |==> false
804:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():501:storeChar('\"') |==> <NO-OP>
805:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():503:continue; |==> <NO-OP>
806:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():505:storeChar('\\') |==> <NO-OP>
807:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():507:continue; |==> <NO-OP>
808:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():509:storeChar('\u2044') |==> <NO-OP>
809:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():511:continue; |==> <NO-OP>
810:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():513:storeChar('\b') |==> <NO-OP>
811:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():515:continue; |==> <NO-OP>
812:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():517:storeChar('\f') |==> <NO-OP>
813:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():519:continue; |==> <NO-OP>
814:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():521:storeChar('\n') |==> <NO-OP>
815:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():523:continue; |==> <NO-OP>
816:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():525:storeChar('\r') |==> <NO-OP>
817:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():527:continue; |==> <NO-OP>
818:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():529:storeChar('\t') |==> <NO-OP>
819:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():531:continue; |==> <NO-OP>
820:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():537:ic4 == -1 |==> ic4 <= -1
821:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():537:ic4 == -1 |==> ic4 >= -1
822:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():537:ic4 == -1 |==> false
823:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():543:storeChar((char)decodeHexChar((char)ic1, (char)ic2, (char)ic3, (char)ic4, lin, col)) |==> <NO-OP>
824:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():546:continue; |==> <NO-OP>
825:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():550:ic2 == -1 |==> ic2 <= -1
826:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():550:ic2 == -1 |==> ic2 >= -1
827:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():550:ic2 == -1 |==> false
828:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():556:storeChar((char)decodeHexByte((char)ic1, (char)ic2, lin, col)) |==> <NO-OP>
829:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():558:continue; |==> <NO-OP>
830:COR:qut:TRUE:org.marc4j.util.JsonParser@next():568:qut |==> false
831:COR:qut:FALSE:org.marc4j.util.JsonParser@next():568:qut |==> true
832:ROR:<(int,int):!=(int,int):org.marc4j.util.JsonParser@next():569:ich < 32 |==> ich != 32
833:ROR:<(int,int):<=(int,int):org.marc4j.util.JsonParser@next():569:ich < 32 |==> ich <= 32
834:ROR:<(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():569:ich < 32 |==> false
835:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():569:ich == '\r' |==> ich <= '\r'
836:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():569:ich == '\r' |==> ich >= '\r'
837:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():569:ich == '\r' |==> false
838:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():569:ich == '\n' |==> ich <= '\n'
839:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():569:ich == '\n' |==> ich >= '\n'
840:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():569:ich == '\n' |==> false
841:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich == '\r' || ich == '\n' |==> ich == '\r' != (ich == '\n')
842:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich == '\r' || ich == '\n' |==> ich == '\r'
843:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich == '\r' || ich == '\n' |==> ich == '\n'
844:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich == '\r' || ich == '\n' |==> true
845:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():569:optMultilineStrings && (ich == '\r' || ich == '\n') |==> optMultilineStrings == (ich == '\r' || ich == '\n')
846:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():569:optMultilineStrings && (ich == '\r' || ich == '\n') |==> false
847:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():569:optMultilineStrings && (ich == '\r' || ich == '\n') |==> optMultilineStrings
848:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():569:optMultilineStrings && (ich == '\r' || ich == '\n') |==> (ich == '\r' || ich == '\n')
849:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich < 32 && !(optMultilineStrings && (ich == '\r' || ich == '\n')) |==> ich < 32 == !(optMultilineStrings && (ich == '\r' || ich == '\n'))
850:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich < 32 && !(optMultilineStrings && (ich == '\r' || ich == '\n')) |==> false
851:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich < 32 && !(optMultilineStrings && (ich == '\r' || ich == '\n')) |==> ich < 32
852:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():569:ich < 32 && !(optMultilineStrings && (ich == '\r' || ich == '\n')) |==> !(optMultilineStrings && (ich == '\r' || ich == '\n'))
853:COR:optMultilineStrings:TRUE:org.marc4j.util.JsonParser@next():572:optMultilineStrings |==> false
854:COR:optMultilineStrings:FALSE:org.marc4j.util.JsonParser@next():572:optMultilineStrings |==> true
855:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():575:ich == '\"' |==> ich <= '\"'
856:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():575:ich == '\"' |==> ich >= '\"'
857:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():575:ich == '\"' |==> false
858:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' |==> !squ == (ich == '\"')
859:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' |==> false
860:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' |==> !squ
861:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' |==> ich == '\"'
862:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():575:ich == '\'' |==> ich <= '\''
863:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():575:ich == '\'' |==> ich >= '\''
864:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():575:ich == '\'' |==> false
865:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():575:squ && ich == '\'' |==> squ == (ich == '\'')
866:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():575:squ && ich == '\'' |==> false
867:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():575:squ && ich == '\'' |==> squ
868:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():575:squ && ich == '\'' |==> ich == '\''
869:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' || squ && ich == '\'' |==> (!squ && ich == '\"') != (squ && ich == '\'')
870:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' || squ && ich == '\'' |==> !squ && ich == '\"'
871:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' || squ && ich == '\'' |==> squ && ich == '\''
872:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.JsonParser@next():575:!squ && ich == '\"' || squ && ich == '\'' |==> true
873:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():576:qut = false |==> <NO-OP>
874:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():577:amd = false |==> <NO-OP>
875:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():579:storeChar((char)ich) |==> <NO-OP>
876:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():580:continue; |==> <NO-OP>
877:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():583:ich == '\r' |==> ich <= '\r'
878:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():583:ich == '\r' |==> ich >= '\r'
879:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():583:ich == '\r' |==> false
880:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():583:ich == '\n' |==> ich <= '\n'
881:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():583:ich == '\n' |==> ich >= '\n'
882:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():583:ich == '\n' |==> false
883:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@next():583:ich == '\r' || ich == '\n' |==> ich == '\r' != (ich == '\n')
884:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():583:ich == '\r' || ich == '\n' |==> ich == '\r'
885:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():583:ich == '\r' || ich == '\n' |==> ich == '\n'
886:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.JsonParser@next():583:ich == '\r' || ich == '\n' |==> true
887:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():583:!optEolIsComma && (ich == '\r' || ich == '\n') |==> !optEolIsComma == (ich == '\r' || ich == '\n')
888:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():583:!optEolIsComma && (ich == '\r' || ich == '\n') |==> false
889:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():583:!optEolIsComma && (ich == '\r' || ich == '\n') |==> !optEolIsComma
890:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():583:!optEolIsComma && (ich == '\r' || ich == '\n') |==> (ich == '\r' || ich == '\n')
891:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():585:continue; |==> <NO-OP>
892:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():588:ich == '\"' |==> ich <= '\"'
893:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():588:ich == '\"' |==> ich >= '\"'
894:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():588:ich == '\"' |==> false
895:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():588:ich == '\'' |==> ich <= '\''
896:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():588:ich == '\'' |==> ich >= '\''
897:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():588:ich == '\'' |==> false
898:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():588:optSingleQuoteStrings && ich == '\'' |==> optSingleQuoteStrings == (ich == '\'')
899:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():588:optSingleQuoteStrings && ich == '\'' |==> false
900:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():588:optSingleQuoteStrings && ich == '\'' |==> optSingleQuoteStrings
901:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():588:optSingleQuoteStrings && ich == '\'' |==> ich == '\''
902:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@next():588:ich == '\"' || optSingleQuoteStrings && ich == '\'' |==> ich == '\"' != (optSingleQuoteStrings && ich == '\'')
903:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():588:ich == '\"' || optSingleQuoteStrings && ich == '\'' |==> ich == '\"'
904:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():588:ich == '\"' || optSingleQuoteStrings && ich == '\'' |==> optSingleQuoteStrings && ich == '\''
905:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.JsonParser@next():588:ich == '\"' || optSingleQuoteStrings && ich == '\'' |==> true
906:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():589:accumulator.length() != 0 |==> accumulator.length() < 0
907:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():589:accumulator.length() != 0 |==> accumulator.length() > 0
908:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():589:accumulator.length() != 0 |==> true
909:COR:amd:TRUE:org.marc4j.util.JsonParser@next():595:amd |==> false
910:COR:amd:FALSE:org.marc4j.util.JsonParser@next():595:amd |==> true
911:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():600:qut = true |==> <NO-OP>
912:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():601:ich == '\'' |==> ich <= '\''
913:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():601:ich == '\'' |==> ich >= '\''
914:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():601:ich == '\'' |==> false
915:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():601:squ = ich == '\'' |==> <NO-OP>
916:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():602:storeChar((char)ich) |==> <NO-OP>
917:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():603:continue; |==> <NO-OP>
918:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@next():608:mbrName.length() > 0 |==> mbrName.length() != 0
919:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@next():608:mbrName.length() > 0 |==> mbrName.length() >= 0
920:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():608:mbrName.length() > 0 |==> false
921:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():613:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
922:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():613:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
923:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():613:objectData.arrayDepth != 0 |==> true
924:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():619:txt.length() == 0 |==> txt.length() <= 0
925:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():619:txt.length() == 0 |==> txt.length() >= 0
926:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():619:txt.length() == 0 |==> false
927:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():624:mbrName = stripQuotes(txt) |==> <NO-OP>
928:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():625:amd = true |==> <NO-OP>
929:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():627:!optUnquotedKeywords && !isQuoted(txt) |==> !optUnquotedKeywords == !isQuoted(txt)
930:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():627:!optUnquotedKeywords && !isQuoted(txt) |==> false
931:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():627:!optUnquotedKeywords && !isQuoted(txt) |==> !optUnquotedKeywords
932:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():627:!optUnquotedKeywords && !isQuoted(txt) |==> !isQuoted(txt)
933:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():632:continue; |==> <NO-OP>
934:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():638:accumulator.length() == 0 |==> accumulator.length() <= 0
935:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():638:accumulator.length() == 0 |==> accumulator.length() >= 0
936:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():638:accumulator.length() == 0 |==> false
937:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():640:mbrName = "" |==> <NO-OP>
938:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():642:pet = EVT_OBJECT_MEMBER |==> <NO-OP>
939:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():643:pet == EVT_OBJECT_ENDED |==> pet <= EVT_OBJECT_ENDED
940:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():643:pet == EVT_OBJECT_ENDED |==> pet >= EVT_OBJECT_ENDED
941:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():643:pet == EVT_OBJECT_ENDED |==> false
942:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():648:pet == EVT_ARRAY_ENDED |==> pet <= EVT_ARRAY_ENDED
943:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():648:pet == EVT_ARRAY_ENDED |==> pet >= EVT_ARRAY_ENDED
944:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():648:pet == EVT_ARRAY_ENDED |==> false
945:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():653:objectData.arrayDepth == 0 |==> objectData.arrayDepth <= 0
946:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():653:objectData.arrayDepth == 0 |==> objectData.arrayDepth >= 0
947:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():653:objectData.arrayDepth == 0 |==> false
948:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():653:mbrName.length() == 0 |==> mbrName.length() <= 0
949:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():653:mbrName.length() == 0 |==> mbrName.length() >= 0
950:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():653:mbrName.length() == 0 |==> false
951:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():653:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> objectData.arrayDepth == 0 == (mbrName.length() == 0)
952:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():653:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> false
953:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():653:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> objectData.arrayDepth == 0
954:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():653:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> mbrName.length() == 0
955:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():658:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
956:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():658:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
957:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():658:objectData.arrayDepth != 0 |==> true
958:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():659:mbrName = objectData.arrayName |==> <NO-OP>
959:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():661:mbrValue = getAccumulatedText(false) |==> <NO-OP>
960:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@next():662:return evtCode = EVT_OBJECT_MEMBER; |==> <NO-OP>
961:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():664:amd = true |==> <NO-OP>
962:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():665:continue; |==> <NO-OP>
963:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():669:accumulator.length() != 0 |==> accumulator.length() < 0
964:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():669:accumulator.length() != 0 |==> accumulator.length() > 0
965:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():669:accumulator.length() != 0 |==> true
966:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():675:pushObjectData() |==> <NO-OP>
967:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():676:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
968:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():676:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
969:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():676:objectData.arrayDepth != 0 |==> true
970:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():677:mbrName = objectData.arrayName |==> <NO-OP>
971:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():679:objectData = new ObjectData(mbrName) |==> <NO-OP>
972:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@next():680:return evtCode = EVT_OBJECT_BEGIN; |==> <NO-OP>
973:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():684:mbrValue = getAccumulatedText(false) |==> <NO-OP>
974:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 |==> objectData.arrayDepth <= 0
975:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 |==> objectData.arrayDepth >= 0
976:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 |==> false
977:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():685:mbrName.length() == 0 |==> mbrName.length() <= 0
978:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():685:mbrName.length() == 0 |==> mbrName.length() >= 0
979:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():685:mbrName.length() == 0 |==> false
980:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> objectData.arrayDepth == 0 == (mbrName.length() == 0)
981:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> false
982:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> objectData.arrayDepth == 0
983:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 |==> mbrName.length() == 0
984:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@next():685:mbrValue.length() > 0 |==> mbrValue.length() != 0
985:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@next():685:mbrValue.length() > 0 |==> mbrValue.length() >= 0
986:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():686:mbrValue.length() > 0 |==> false
987:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 && mbrValue.length() > 0 |==> (objectData.arrayDepth == 0 && mbrName.length() == 0) == mbrValue.length() > 0
988:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 && mbrValue.length() > 0 |==> false
989:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 && mbrValue.length() > 0 |==> objectData.arrayDepth == 0 && mbrName.length() == 0
990:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():685:objectData.arrayDepth == 0 && mbrName.length() == 0 && mbrValue.length() > 0 |==> mbrValue.length() > 0
991:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@next():690:mbrValue.length() > 0 |==> mbrValue.length() != 0
992:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@next():690:mbrValue.length() > 0 |==> mbrValue.length() >= 0
993:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():690:mbrValue.length() > 0 |==> false
994:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():691:unreadChar(ich) |==> <NO-OP>
995:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():692:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
996:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():692:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
997:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():692:objectData.arrayDepth != 0 |==> true
998:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():693:mbrName = objectData.arrayName |==> <NO-OP>
999:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@next():695:return evtCode = EVT_OBJECT_MEMBER; |==> <NO-OP>
1000:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():698:mbrName = objectData.name |==> <NO-OP>
1001:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@next():699:return evtCode = EVT_OBJECT_ENDED; |==> <NO-OP>
1002:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():703:accumulator.length() != 0 |==> accumulator.length() < 0
1003:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():703:accumulator.length() != 0 |==> accumulator.length() > 0
1004:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():703:accumulator.length() != 0 |==> true
1005:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():709:objectData.arrayDepth == 0 |==> objectData.arrayDepth <= 0
1006:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():709:objectData.arrayDepth == 0 |==> objectData.arrayDepth >= 0
1007:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():709:objectData.arrayDepth == 0 |==> false
1008:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():710:objectData.arrayName = mbrName |==> <NO-OP>
1009:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():712:mbrName = objectData.arrayName |==> <NO-OP>
1010:STD:<INC>:<NO-OP>:org.marc4j.util.JsonParser@next():714:objectData.arrayDepth++ |==> <NO-OP>
1011:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@next():715:return evtCode = EVT_ARRAY_BEGIN; |==> <NO-OP>
1012:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():719:objectData.arrayDepth == 0 |==> objectData.arrayDepth <= 0
1013:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():719:objectData.arrayDepth == 0 |==> objectData.arrayDepth >= 0
1014:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():719:objectData.arrayDepth == 0 |==> false
1015:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():725:mbrValue = getAccumulatedText(false) |==> <NO-OP>
1016:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@next():726:mbrValue.length() > 0 |==> mbrValue.length() != 0
1017:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@next():726:mbrValue.length() > 0 |==> mbrValue.length() >= 0
1018:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():726:mbrValue.length() > 0 |==> false
1019:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():727:unreadChar(ich) |==> <NO-OP>
1020:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():728:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
1021:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():728:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
1022:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():728:objectData.arrayDepth != 0 |==> true
1023:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():729:mbrName = objectData.arrayName |==> <NO-OP>
1024:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@next():731:return evtCode = EVT_OBJECT_MEMBER; |==> <NO-OP>
1025:STD:<DEC>:<NO-OP>:org.marc4j.util.JsonParser@next():734:objectData.arrayDepth-- |==> <NO-OP>
1026:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():735:mbrName = objectData.arrayName |==> <NO-OP>
1027:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@next():736:objectData.arrayDepth == 0 |==> objectData.arrayDepth <= 0
1028:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@next():736:objectData.arrayDepth == 0 |==> objectData.arrayDepth >= 0
1029:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@next():736:objectData.arrayDepth == 0 |==> false
1030:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():737:objectData.arrayName = "" |==> <NO-OP>
1031:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@next():739:return evtCode = EVT_ARRAY_ENDED; |==> <NO-OP>
1032:COR:Character.isWhitespace((char)ich):TRUE:org.marc4j.util.JsonParser@next():743:Character.isWhitespace((char)ich) |==> false
1033:COR:Character.isWhitespace((char)ich):FALSE:org.marc4j.util.JsonParser@next():743:Character.isWhitespace((char)ich) |==> true
1034:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():744:pws = true |==> <NO-OP>
1035:COR:amd:TRUE:org.marc4j.util.JsonParser@next():746:amd |==> false
1036:COR:amd:FALSE:org.marc4j.util.JsonParser@next():746:amd |==> true
1037:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():751:accumulator.length() != 0 |==> accumulator.length() < 0
1038:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():751:accumulator.length() != 0 |==> accumulator.length() > 0
1039:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():751:accumulator.length() != 0 |==> true
1040:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@next():751:pws && accumulator.length() != 0 |==> pws == (accumulator.length() != 0)
1041:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@next():751:pws && accumulator.length() != 0 |==> false
1042:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@next():751:pws && accumulator.length() != 0 |==> pws
1043:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@next():751:pws && accumulator.length() != 0 |==> accumulator.length() != 0
1044:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():757:storeChar((char)ich) |==> <NO-OP>
1045:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():758:pws = false |==> <NO-OP>
1046:STD:<CONT>:<NO-OP>:org.marc4j.util.JsonParser@next():760:continue; |==> <NO-OP>
1047:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():766:mbrName = null |==> <NO-OP>
1048:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():767:mbrValue = null |==> <NO-OP>
1049:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():768:objectStack.size() != 0 |==> objectStack.size() < 0
1050:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():768:objectStack.size() != 0 |==> objectStack.size() > 0
1051:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():768:objectStack.size() != 0 |==> true
1052:COR:qut:TRUE:org.marc4j.util.JsonParser@next():769:qut |==> false
1053:COR:qut:FALSE:org.marc4j.util.JsonParser@next():769:qut |==> true
1054:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@next():779:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
1055:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@next():779:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
1056:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@next():779:objectData.arrayDepth != 0 |==> true
1057:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():785:evtLine = inpLine |==> <NO-OP>
1058:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@next():786:evtColumn = inpColumn |==> <NO-OP>
1059:COR:inpClose:TRUE:org.marc4j.util.JsonParser@next():787:inpClose |==> false
1060:COR:inpClose:FALSE:org.marc4j.util.JsonParser@next():787:inpClose |==> true
1061:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():789:inpReader.close() |==> <NO-OP>
1062:COR:inpClose:TRUE:org.marc4j.util.JsonParser@next():797:inpClose |==> false
1063:COR:inpClose:FALSE:org.marc4j.util.JsonParser@next():797:inpClose |==> true
1064:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@next():799:inpReader.close() |==> <NO-OP>
1065:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@skipObject():812:getEventCode() != EVT_OBJECT_BEGIN |==> getEventCode() < EVT_OBJECT_BEGIN
1066:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@skipObject():812:getEventCode() != EVT_OBJECT_BEGIN |==> getEventCode() > EVT_OBJECT_BEGIN
1067:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@skipObject():812:getEventCode() != EVT_OBJECT_BEGIN |==> true
1068:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@skipObject():818:level > 0 |==> level != 0
1069:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@skipObject():818:level > 0 |==> level >= 0
1070:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@skipObject():818:level > 0 |==> false
1071:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@skipObject():820:eventCode == EVT_OBJECT_BEGIN |==> eventCode <= EVT_OBJECT_BEGIN
1072:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@skipObject():820:eventCode == EVT_OBJECT_BEGIN |==> eventCode >= EVT_OBJECT_BEGIN
1073:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@skipObject():820:eventCode == EVT_OBJECT_BEGIN |==> false
1074:STD:<INC>:<NO-OP>:org.marc4j.util.JsonParser@skipObject():821:level++ |==> <NO-OP>
1075:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@skipObject():822:eventCode == EVT_OBJECT_ENDED |==> eventCode <= EVT_OBJECT_ENDED
1076:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@skipObject():822:eventCode == EVT_OBJECT_ENDED |==> eventCode >= EVT_OBJECT_ENDED
1077:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@skipObject():822:eventCode == EVT_OBJECT_ENDED |==> false
1078:STD:<DEC>:<NO-OP>:org.marc4j.util.JsonParser@skipObject():823:level-- |==> <NO-OP>
1079:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@skipArray():832:getEventCode() != EVT_ARRAY_BEGIN |==> getEventCode() < EVT_ARRAY_BEGIN
1080:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@skipArray():832:getEventCode() != EVT_ARRAY_BEGIN |==> getEventCode() > EVT_ARRAY_BEGIN
1081:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@skipArray():832:getEventCode() != EVT_ARRAY_BEGIN |==> true
1082:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@skipArray():838:level > 0 |==> level != 0
1083:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@skipArray():838:level > 0 |==> level >= 0
1084:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@skipArray():838:level > 0 |==> false
1085:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@skipArray():840:eventCode == EVT_ARRAY_BEGIN |==> eventCode <= EVT_ARRAY_BEGIN
1086:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@skipArray():840:eventCode == EVT_ARRAY_BEGIN |==> eventCode >= EVT_ARRAY_BEGIN
1087:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@skipArray():840:eventCode == EVT_ARRAY_BEGIN |==> false
1088:STD:<INC>:<NO-OP>:org.marc4j.util.JsonParser@skipArray():841:level++ |==> <NO-OP>
1089:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@skipArray():842:eventCode == EVT_ARRAY_ENDED |==> eventCode <= EVT_ARRAY_ENDED
1090:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@skipArray():842:eventCode == EVT_ARRAY_ENDED |==> eventCode >= EVT_ARRAY_ENDED
1091:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@skipArray():842:eventCode == EVT_ARRAY_ENDED |==> false
1092:STD:<DEC>:<NO-OP>:org.marc4j.util.JsonParser@skipArray():843:level-- |==> <NO-OP>
1093:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@skipArray():844:eventCode == EVT_OBJECT_BEGIN |==> eventCode <= EVT_OBJECT_BEGIN
1094:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@skipArray():844:eventCode == EVT_OBJECT_BEGIN |==> eventCode >= EVT_OBJECT_BEGIN
1095:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@skipArray():844:eventCode == EVT_OBJECT_BEGIN |==> false
1096:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@skipArray():845:skipObject() |==> <NO-OP>
1097:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@storeChar(char):851:evtLine == 0 |==> evtLine <= 0
1098:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@storeChar(char):851:evtLine == 0 |==> evtLine >= 0
1099:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@storeChar(char):851:evtLine == 0 |==> false
1100:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@storeChar(char):852:evtLine = inpLine |==> <NO-OP>
1101:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@storeChar(char):853:evtColumn = inpColumn |==> <NO-OP>
1102:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@storeChar(char):855:accumulator.append(ch) |==> <NO-OP>
1103:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName != null |==> true
1104:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName.length() != 0 |==> mbrName.length() < 0
1105:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName.length() != 0 |==> mbrName.length() > 0
1106:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName.length() != 0 |==> true
1107:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName != null && mbrName.length() != 0 |==> mbrName != null == (mbrName.length() != 0)
1108:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName != null && mbrName.length() != 0 |==> false
1109:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName != null && mbrName.length() != 0 |==> mbrName != null
1110:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@createLocation(int,int):876:mbrName != null && mbrName.length() != 0 |==> mbrName.length() != 0
1111:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@readChar():887:pushBack != -1 |==> pushBack < -1
1112:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@readChar():887:pushBack != -1 |==> pushBack > -1
1113:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@readChar():887:pushBack != -1 |==> true
1114:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@readChar():889:pushBack = -1 |==> <NO-OP>
1115:STD:<INC>:<NO-OP>:org.marc4j.util.JsonParser@readChar():890:inpColumn++ |==> <NO-OP>
1116:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@readChar():892:(ich = inpReader.read()) != -1 |==> (ich = inpReader.read()) < -1
1117:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@readChar():892:(ich = inpReader.read()) != -1 |==> (ich = inpReader.read()) > -1
1118:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@readChar():893:ich == '\n' |==> ich <= '\n'
1119:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@readChar():893:ich == '\n' |==> ich >= '\n'
1120:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@readChar():893:ich == '\n' |==> false
1121:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@readChar():894:inpColumn = 0 |==> <NO-OP>
1122:STD:<INC>:<NO-OP>:org.marc4j.util.JsonParser@readChar():895:inpLine++ |==> <NO-OP>
1123:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@readChar():896:ich == '\ufeff' |==> ich <= '\ufeff'
1124:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@readChar():896:ich == '\ufeff' |==> ich >= '\ufeff'
1125:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@readChar():896:ich == '\ufeff' |==> false
1126:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@readChar():897:ich = ' ' |==> <NO-OP>
1127:STD:<INC>:<NO-OP>:org.marc4j.util.JsonParser@readChar():900:inpColumn++ |==> <NO-OP>
1128:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@unreadChar(int):908:ich != -1 |==> ich < -1
1129:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@unreadChar(int):908:ich != -1 |==> ich > -1
1130:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@unreadChar(int):908:ich != -1 |==> true
1131:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@unreadChar(int):909:pushBack != -1 |==> pushBack < -1
1132:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@unreadChar(int):909:pushBack != -1 |==> pushBack > -1
1133:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@unreadChar(int):909:pushBack != -1 |==> true
1134:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@unreadChar(int):914:pushBack = ich |==> <NO-OP>
1135:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@unreadChar(int):915:ich == '\n' |==> ich <= '\n'
1136:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@unreadChar(int):915:ich == '\n' |==> ich >= '\n'
1137:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@unreadChar(int):915:ich == '\n' |==> false
1138:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@unreadChar(int):916:inpColumn = 0 |==> <NO-OP>
1139:STD:<DEC>:<NO-OP>:org.marc4j.util.JsonParser@unreadChar(int):917:inpLine-- |==> <NO-OP>
1140:STD:<DEC>:<NO-OP>:org.marc4j.util.JsonParser@unreadChar(int):919:inpColumn-- |==> <NO-OP>
1141:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@pushObjectData():925:objectStack.add(objectData) |==> <NO-OP>
1142:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@popObjectData():931:siz == 0 |==> siz <= 0
1143:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@popObjectData():931:siz == 0 |==> siz >= 0
1144:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@popObjectData():931:siz == 0 |==> false
1145:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@popObjectData():936:objectData.arrayDepth != 0 |==> objectData.arrayDepth < 0
1146:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@popObjectData():936:objectData.arrayDepth != 0 |==> objectData.arrayDepth > 0
1147:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@popObjectData():936:objectData.arrayDepth != 0 |==> true
1148:AOR:-(int,int):%(int,int):org.marc4j.util.JsonParser@popObjectData():942:siz - 1 |==> siz % 1
1149:AOR:-(int,int):*(int,int):org.marc4j.util.JsonParser@popObjectData():942:siz - 1 |==> siz * 1
1150:AOR:-(int,int):+(int,int):org.marc4j.util.JsonParser@popObjectData():942:siz - 1 |==> siz + 1
1151:AOR:-(int,int):/(int,int):org.marc4j.util.JsonParser@popObjectData():942:siz - 1 |==> siz / 1
1152:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@popObjectData():942:objectData = objectStack.remove(siz - 1) |==> <NO-OP>
1153:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@popObjectData():943:mbrName = objectData.name |==> <NO-OP>
1154:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@getAccumulatedText(boolean):950:accumulator.setLength(0) |==> <NO-OP>
1155:COR:kwd:TRUE:org.marc4j.util.JsonParser@getAccumulatedText(boolean):951:kwd |==> false
1156:COR:kwd:FALSE:org.marc4j.util.JsonParser@getAccumulatedText(boolean):951:kwd |==> true
1157:COR:optInternKeywords:TRUE:org.marc4j.util.JsonParser@getAccumulatedText(boolean):952:optInternKeywords |==> false
1158:COR:optInternKeywords:FALSE:org.marc4j.util.JsonParser@getAccumulatedText(boolean):952:optInternKeywords |==> true
1159:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@getAccumulatedText(boolean):953:val = val.intern() |==> <NO-OP>
1160:COR:optInternValues:TRUE:org.marc4j.util.JsonParser@getAccumulatedText(boolean):956:optInternValues |==> false
1161:COR:optInternValues:FALSE:org.marc4j.util.JsonParser@getAccumulatedText(boolean):956:optInternValues |==> true
1162:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@getAccumulatedText(boolean):957:val = val.intern() |==> <NO-OP>
1163:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam == null |==> false
1164:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam.length() == 0 |==> mbrnam.length() <= 0
1165:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam.length() == 0 |==> mbrnam.length() >= 0
1166:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam.length() == 0 |==> false
1167:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam == null || mbrnam.length() == 0 |==> mbrnam == null != (mbrnam.length() == 0)
1168:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam == null || mbrnam.length() == 0 |==> mbrnam == null
1169:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam == null || mbrnam.length() == 0 |==> mbrnam.length() == 0
1170:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.JsonParser$Location@<init>(java.lang.String,int,int,java.lang.String):998:mbrnam == null || mbrnam.length() == 0 |==> true
1171:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser$Location@toString():1003:inpCol > 0 |==> inpCol != 0
1172:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser$Location@toString():1003:inpCol > 0 |==> inpCol >= 0
1173:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser$Location@toString():1003:inpCol > 0 |==> false
1174:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.JsonParser$Location@toString():1004:mbrName == null |==> false
1175:AOR:-(int,int):%(int,int):org.marc4j.util.JsonParser$Location@toString():1007:inpLine - 1 |==> inpLine % 1
1176:AOR:-(int,int):*(int,int):org.marc4j.util.JsonParser$Location@toString():1007:inpLine - 1 |==> inpLine * 1
1177:AOR:-(int,int):+(int,int):org.marc4j.util.JsonParser$Location@toString():1007:inpLine - 1 |==> inpLine + 1
1178:AOR:-(int,int):/(int,int):org.marc4j.util.JsonParser$Location@toString():1007:inpLine - 1 |==> inpLine / 1
1179:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.JsonParser$Location@toString():1007:mbrName == null |==> false
1180:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser$ObjectData@<init>(java.lang.String):1045:arrayName = "" |==> <NO-OP>
1181:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser$ObjectData@<init>(java.lang.String):1046:arrayDepth = 0 |==> <NO-OP>
1182:COR:val.equalsIgnoreCase("null"):TRUE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1141:val.equalsIgnoreCase("null") |==> false
1183:COR:val.equalsIgnoreCase("null"):FALSE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1141:val.equalsIgnoreCase("null") |==> true
1184:COR:val.equalsIgnoreCase("true"):TRUE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1143:val.equalsIgnoreCase("true") |==> false
1185:COR:val.equalsIgnoreCase("true"):FALSE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1143:val.equalsIgnoreCase("true") |==> true
1186:COR:val.equalsIgnoreCase("false"):TRUE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1145:val.equalsIgnoreCase("false") |==> false
1187:COR:val.equalsIgnoreCase("false"):FALSE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1145:val.equalsIgnoreCase("false") |==> true
1188:COR:isQuoted(val):TRUE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1147:isQuoted(val) |==> false
1189:COR:isQuoted(val):FALSE:org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1147:isQuoted(val) |==> true
1190:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1149:val.length() == 0 |==> val.length() <= 0
1191:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1149:val.length() == 0 |==> val.length() >= 0
1192:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@createTypedValue(java.lang.String):1149:val.length() == 0 |==> false
1193:ROR:<(int,int):!=(int,int):org.marc4j.util.JsonParser@getEventName(int):1162:cod < 1 |==> cod != 1
1194:ROR:<(int,int):<=(int,int):org.marc4j.util.JsonParser@getEventName(int):1162:cod < 1 |==> cod <= 1
1195:ROR:<(int,int):FALSE(int,int):org.marc4j.util.JsonParser@getEventName(int):1162:cod < 1 |==> false
1196:ROR:>=(int,int):==(int,int):org.marc4j.util.JsonParser@getEventName(int):1164:cod >= EVT_NAMES.length |==> cod == EVT_NAMES.length
1197:ROR:>=(int,int):>(int,int):org.marc4j.util.JsonParser@getEventName(int):1164:cod >= EVT_NAMES.length |==> cod > EVT_NAMES.length
1198:ROR:>=(int,int):TRUE(int,int):org.marc4j.util.JsonParser@getEventName(int):1164:cod >= EVT_NAMES.length |==> true
1199:COR:isQuoted(val):TRUE:org.marc4j.util.JsonParser@stripQuotes(java.lang.String):1177:isQuoted(val) |==> false
1200:COR:isQuoted(val):FALSE:org.marc4j.util.JsonParser@stripQuotes(java.lang.String):1177:isQuoted(val) |==> true
1201:AOR:-(int,int):%(int,int):org.marc4j.util.JsonParser@stripQuotes(java.lang.String):1178:val.length() - 1 |==> val.length() % 1
1202:AOR:-(int,int):*(int,int):org.marc4j.util.JsonParser@stripQuotes(java.lang.String):1178:val.length() - 1 |==> val.length() * 1
1203:AOR:-(int,int):+(int,int):org.marc4j.util.JsonParser@stripQuotes(java.lang.String):1178:val.length() - 1 |==> val.length() + 1
1204:AOR:-(int,int):/(int,int):org.marc4j.util.JsonParser@stripQuotes(java.lang.String):1178:val.length() - 1 |==> val.length() / 1
1205:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser@stripQuotes(java.lang.String):1178:val = val.substring(1, val.length() - 1) |==> <NO-OP>
1206:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1191:val != null |==> true
1207:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1191:(len = val.length()) > 1 |==> (len = val.length()) != 1
1208:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1191:(len = val.length()) > 1 |==> (len = val.length()) >= 1
1209:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1191:(len = val.length()) > 1 |==> false
1210:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1191:val != null && (len = val.length()) > 1 |==> val != null == (len = val.length()) > 1
1211:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1191:val != null && (len = val.length()) > 1 |==> (len = val.length()) > 1
1212:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\"' |==> ch0 <= '\"'
1213:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\"' |==> ch0 >= '\"'
1214:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\"' |==> false
1215:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\'' |==> ch0 <= '\''
1216:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\'' |==> ch0 >= '\''
1217:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\'' |==> false
1218:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\"' || ch0 == '\'' |==> ch0 == '\"' != (ch0 == '\'')
1219:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\"' || ch0 == '\'' |==> ch0 == '\"'
1220:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\"' || ch0 == '\'' |==> ch0 == '\''
1221:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == '\"' || ch0 == '\'' |==> true
1222:AOR:-(int,int):%(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:len - 1 |==> len % 1
1223:AOR:-(int,int):*(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:len - 1 |==> len * 1
1224:AOR:-(int,int):+(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:len - 1 |==> len + 1
1225:AOR:-(int,int):/(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:len - 1 |==> len / 1
1226:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == val.charAt(len - 1) |==> ch0 <= val.charAt(len - 1)
1227:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == val.charAt(len - 1) |==> ch0 >= val.charAt(len - 1)
1228:ROR:==(int,int):FALSE(int,int):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:ch0 == val.charAt(len - 1) |==> false
1229:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:(ch0 == '\"' || ch0 == '\'') && ch0 == val.charAt(len - 1) |==> (ch0 == '\"' || ch0 == '\'') == (ch0 == val.charAt(len - 1))
1230:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:(ch0 == '\"' || ch0 == '\'') && ch0 == val.charAt(len - 1) |==> false
1231:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:(ch0 == '\"' || ch0 == '\'') && ch0 == val.charAt(len - 1) |==> (ch0 == '\"' || ch0 == '\'')
1232:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@isQuoted(java.lang.String):1193:(ch0 == '\"' || ch0 == '\'') && ch0 == val.charAt(len - 1) |==> ch0 == val.charAt(len - 1)
1233:STD:<RETURN>:<NO-OP>:org.marc4j.util.JsonParser@isQuoted(java.lang.String):1194:return true; |==> <NO-OP>
1234:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1213:sizest > 0 |==> sizest != 0
1235:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1213:sizest > 0 |==> sizest >= 0
1236:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1213:sizest > 0 |==> false
1237:ROR:!=(int,int):<(int,int):org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1214:(len = inprdr.read(buf)) != -1 |==> (len = inprdr.read(buf)) < -1
1238:ROR:!=(int,int):>(int,int):org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1214:(len = inprdr.read(buf)) != -1 |==> (len = inprdr.read(buf)) > -1
1239:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1215:wtr.write(buf, 0, len) |==> <NO-OP>
1240:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1217:wtr.flush() |==> <NO-OP>
1241:COR:inpcls:TRUE:org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1218:inpcls |==> false
1242:COR:inpcls:FALSE:org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1218:inpcls |==> true
1243:STD:<CALL>:<NO-OP>:org.marc4j.util.JsonParser@preloadInput(java.lang.String,java.io.Reader,boolean,int):1219:wtr.close() |==> <NO-OP>
1244:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1234:decodeHex = new int[256] |==> <NO-OP>
1245:ROR:<(int,int):!=(int,int):org.marc4j.util.JsonParser:1235:xa < decodeHex.length |==> xa != decodeHex.length
1246:ROR:<(int,int):<=(int,int):org.marc4j.util.JsonParser:1235:xa < decodeHex.length |==> xa <= decodeHex.length
1247:ROR:<(int,int):FALSE(int,int):org.marc4j.util.JsonParser:1235:xa < decodeHex.length |==> false
1248:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1236:decodeHex[xa] = -1 |==> <NO-OP>
1249:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1238:decodeHex['0'] = 0 |==> <NO-OP>
1250:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1239:decodeHex['1'] = 1 |==> <NO-OP>
1251:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1240:decodeHex['2'] = 2 |==> <NO-OP>
1252:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1241:decodeHex['3'] = 3 |==> <NO-OP>
1253:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1242:decodeHex['4'] = 4 |==> <NO-OP>
1254:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1243:decodeHex['5'] = 5 |==> <NO-OP>
1255:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1244:decodeHex['6'] = 6 |==> <NO-OP>
1256:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1245:decodeHex['7'] = 7 |==> <NO-OP>
1257:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1246:decodeHex['8'] = 8 |==> <NO-OP>
1258:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1247:decodeHex['9'] = 9 |==> <NO-OP>
1259:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1248:decodeHex['A'] = 10 |==> <NO-OP>
1260:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1249:decodeHex['B'] = 11 |==> <NO-OP>
1261:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1250:decodeHex['C'] = 12 |==> <NO-OP>
1262:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1251:decodeHex['D'] = 13 |==> <NO-OP>
1263:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1252:decodeHex['E'] = 14 |==> <NO-OP>
1264:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1253:decodeHex['F'] = 15 |==> <NO-OP>
1265:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1254:decodeHex['a'] = 10 |==> <NO-OP>
1266:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1255:decodeHex['b'] = 11 |==> <NO-OP>
1267:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1256:decodeHex['c'] = 12 |==> <NO-OP>
1268:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1257:decodeHex['d'] = 13 |==> <NO-OP>
1269:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1258:decodeHex['e'] = 14 |==> <NO-OP>
1270:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.JsonParser:1259:decodeHex['f'] = 15 |==> <NO-OP>
1271:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1266:hex1 > 255 |==> hex1 != 255
1272:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1266:hex1 > 255 |==> hex1 >= 255
1273:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1266:hex1 > 255 |==> false
1274:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1266:(n1 = decodeHex[hex1]) == -1 |==> (n1 = decodeHex[hex1]) <= -1
1275:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1266:(n1 = decodeHex[hex1]) == -1 |==> (n1 = decodeHex[hex1]) >= -1
1276:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@decodeHexByte(char,char):1266:hex1 > 255 || (n1 = decodeHex[hex1]) == -1 |==> hex1 > 255 != ((n1 = decodeHex[hex1]) == -1)
1277:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@decodeHexByte(char,char):1266:hex1 > 255 || (n1 = decodeHex[hex1]) == -1 |==> (n1 = decodeHex[hex1]) == -1
1278:ROR:>(int,int):!=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1270:hex2 > 255 |==> hex2 != 255
1279:ROR:>(int,int):>=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1270:hex2 > 255 |==> hex2 >= 255
1280:ROR:>(int,int):FALSE(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1270:hex2 > 255 |==> false
1281:ROR:==(int,int):<=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1270:(n2 = decodeHex[hex2]) == -1 |==> (n2 = decodeHex[hex2]) <= -1
1282:ROR:==(int,int):>=(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1270:(n2 = decodeHex[hex2]) == -1 |==> (n2 = decodeHex[hex2]) >= -1
1283:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.JsonParser@decodeHexByte(char,char):1270:hex2 > 255 || (n2 = decodeHex[hex2]) == -1 |==> hex2 > 255 != ((n2 = decodeHex[hex2]) == -1)
1284:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.JsonParser@decodeHexByte(char,char):1270:hex2 > 255 || (n2 = decodeHex[hex2]) == -1 |==> (n2 = decodeHex[hex2]) == -1
1285:SOR:<<(int,int):>>(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1274:n1 << 4 |==> n1 >> 4
1286:SOR:<<(int,int):>>>(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1274:n1 << 4 |==> n1 >>> 4
1287:LOR:|(int,int):&(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1274:n1 << 4 | n2 |==> n1 << 4 & n2
1288:LOR:|(int,int):^(int,int):org.marc4j.util.JsonParser@decodeHexByte(char,char):1274:n1 << 4 | n2 |==> n1 << 4 ^ n2
1289:SOR:<<(int,int):>>(int,int):org.marc4j.util.JsonParser@decodeHexChar(char,char,char,char):1279:decodeHexByte(hex1, hex2) << 8 |==> decodeHexByte(hex1, hex2) >> 8
1290:SOR:<<(int,int):>>>(int,int):org.marc4j.util.JsonParser@decodeHexChar(char,char,char,char):1279:decodeHexByte(hex1, hex2) << 8 |==> decodeHexByte(hex1, hex2) >>> 8
1291:LOR:|(int,int):&(int,int):org.marc4j.util.JsonParser@decodeHexChar(char,char,char,char):1279:decodeHexByte(hex1, hex2) << 8 | decodeHexByte(hex3, hex4) |==> decodeHexByte(hex1, hex2) << 8 & decodeHexByte(hex3, hex4)
1292:LOR:|(int,int):^(int,int):org.marc4j.util.JsonParser@decodeHexChar(char,char,char,char):1279:decodeHexByte(hex1, hex2) << 8 | decodeHexByte(hex3, hex4) |==> decodeHexByte(hex1, hex2) << 8 ^ decodeHexByte(hex3, hex4)
1293:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream):46:this.os = os |==> <NO-OP>
1294:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter):56:this.os = os |==> <NO-OP>
1295:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter):57:setConverter(conv) |==> <NO-OP>
1296:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,int):67:this.os = os |==> <NO-OP>
1297:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,int):68:useJsonFormat = jsonFormat |==> <NO-OP>
1298:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,int):70:useJsonFormat == MARC_JSON |==> useJsonFormat <= MARC_JSON
1299:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,int):70:useJsonFormat == MARC_JSON |==> useJsonFormat >= MARC_JSON
1300:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,int):70:useJsonFormat == MARC_JSON |==> false
1301:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,int):71:this.setQuoteLabels(false) |==> <NO-OP>
1302:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter,int):84:setConverter(conv) |==> <NO-OP>
1303:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter,int):85:useJsonFormat = jsonFormat |==> <NO-OP>
1304:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter,int):87:useJsonFormat == MARC_JSON |==> useJsonFormat <= MARC_JSON
1305:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter,int):87:useJsonFormat == MARC_JSON |==> useJsonFormat >= MARC_JSON
1306:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter,int):87:useJsonFormat == MARC_JSON |==> false
1307:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@<init>(java.io.OutputStream,org.marc4j.converter.CharConverter,int):88:this.setQuoteLabels(false) |==> <NO-OP>
1308:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):102:buf.append("{") |==> <NO-OP>
1309:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):104:indent(buf, "\n    ") |==> <NO-OP>
1310:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):106:buf.append(ql + "leader" + ql + ":\"").append(record.getLeader().toString()).append("\",") |==> <NO-OP>
1311:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):108:indent(buf, "\n    ") |==> <NO-OP>
1312:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):110:buf.append(ql + "controlfield" + ql + ":") |==> <NO-OP>
1313:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):112:indent(buf, "\n    ") |==> <NO-OP>
1314:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):114:buf.append("[") |==> <NO-OP>
1315:COR:firstField:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):118:firstField |==> false
1316:COR:firstField:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):118:firstField |==> true
1317:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):119:buf.append(",") |==> <NO-OP>
1318:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):121:firstField = false |==> <NO-OP>
1319:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):124:indent |==> false
1320:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):124:indent |==> true
1321:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):125:buf.append("\n        ") |==> <NO-OP>
1322:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):128:buf.append("{ " + ql + "tag" + ql + " : \"" + cf.getTag() + "\", " + ql + "data" + ql + " : ").append("\"" + unicodeEscape(cf.getData()) + "\" }") |==> <NO-OP>
1323:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):132:indent(buf, "\n    ") |==> <NO-OP>
1324:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):134:buf.append("]") |==> <NO-OP>
1325:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):136:indent(buf, "\n    ") |==> <NO-OP>
1326:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):138:buf.append("datafield :") |==> <NO-OP>
1327:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):140:indent(buf, "\n    ") |==> <NO-OP>
1328:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):142:buf.append("[") |==> <NO-OP>
1329:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):143:firstField = true |==> <NO-OP>
1330:COR:firstField:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):146:firstField |==> false
1331:COR:firstField:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):146:firstField |==> true
1332:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):147:buf.append(",") |==> <NO-OP>
1333:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):149:firstField = false |==> <NO-OP>
1334:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):152:indent |==> false
1335:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):152:indent |==> true
1336:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):153:buf.append("\n        ") |==> <NO-OP>
1337:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):156:buf.append("{") |==> <NO-OP>
1338:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):158:indent |==> false
1339:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):158:indent |==> true
1340:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):159:buf.append("\n            ") |==> <NO-OP>
1341:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):162:buf.append(ql + "tag" + ql + " : \"" + df.getTag() + "\", " + ql + "ind" + ql + " : \"" + df.getIndicator1() + df.getIndicator2() + "\",") |==> <NO-OP>
1342:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):165:indent |==> false
1343:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):165:indent |==> true
1344:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):166:buf.append("\n            ") |==> <NO-OP>
1345:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):169:buf.append(ql + "subfield" + ql + " :") |==> <NO-OP>
1346:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):171:indent |==> false
1347:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):171:indent |==> true
1348:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):172:buf.append("\n            ") |==> <NO-OP>
1349:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):175:buf.append("[") |==> <NO-OP>
1350:COR:firstSubfield:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):179:firstSubfield |==> false
1351:COR:firstSubfield:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):179:firstSubfield |==> true
1352:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):180:buf.append(",") |==> <NO-OP>
1353:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):182:firstSubfield = false |==> <NO-OP>
1354:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):185:indent |==> false
1355:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):185:indent |==> true
1356:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):186:buf.append("\n                ") |==> <NO-OP>
1357:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):189:buf.append("{ " + ql + "code" + ql + " : \"" + sf.getCode() + "\", " + ql + "data" + ql + " : \"" + unicodeEscape(sf.getData()) + "\" }") |==> <NO-OP>
1358:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):193:indent |==> false
1359:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):193:indent |==> true
1360:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):194:buf.append("\n            ") |==> <NO-OP>
1361:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):197:buf.append("]") |==> <NO-OP>
1362:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):199:indent |==> false
1363:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):199:indent |==> true
1364:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):200:buf.append("\n        ") |==> <NO-OP>
1365:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):203:buf.append("}") |==> <NO-OP>
1366:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):206:indent(buf, "\n    ") |==> <NO-OP>
1367:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):208:buf.append("]") |==> <NO-OP>
1368:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):210:indent(buf, "\n") |==> <NO-OP>
1369:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcJson(org.marc4j.marc.Record):212:buf.append("}\n") |==> <NO-OP>
1370:COR:indent:TRUE:org.marc4j.MarcJsonWriter@indent(java.lang.StringBuffer,java.lang.String):218:indent |==> false
1371:COR:indent:FALSE:org.marc4j.MarcJsonWriter@indent(java.lang.StringBuffer,java.lang.String):218:indent |==> true
1372:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@indent(java.lang.StringBuffer,java.lang.String):219:buf.append(indentStr) |==> <NO-OP>
1373:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):226:buf.append("{") |==> <NO-OP>
1374:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):228:indent(buf, "\n    ") |==> <NO-OP>
1375:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):230:buf.append(ql + "leader" + ql + ":\"").append(record.getLeader().toString()).append("\",") |==> <NO-OP>
1376:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):232:indent(buf, "\n    ") |==> <NO-OP>
1377:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):234:buf.append(ql + "fields" + ql + ":") |==> <NO-OP>
1378:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):236:indent(buf, "\n    ") |==> <NO-OP>
1379:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):238:buf.append("[") |==> <NO-OP>
1380:COR:firstField:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):242:firstField |==> false
1381:COR:firstField:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):242:firstField |==> true
1382:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):243:buf.append(",") |==> <NO-OP>
1383:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):245:firstField = false |==> <NO-OP>
1384:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):248:indent |==> false
1385:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):248:indent |==> true
1386:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):249:buf.append("\n        ") |==> <NO-OP>
1387:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):252:buf.append("{") |==> <NO-OP>
1388:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):254:indent |==> false
1389:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):254:indent |==> true
1390:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):255:buf.append("\n            ") |==> <NO-OP>
1391:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):258:buf.append(ql + cf.getTag() + ql + ":").append("\"" + unicodeEscape(cf.getData()) + "\"") |==> <NO-OP>
1392:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):260:indent |==> false
1393:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):260:indent |==> true
1394:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):261:buf.append("\n        ") |==> <NO-OP>
1395:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):264:buf.append("}") |==> <NO-OP>
1396:COR:firstField:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):268:firstField |==> false
1397:COR:firstField:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):268:firstField |==> true
1398:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):269:buf.append(",") |==> <NO-OP>
1399:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):271:firstField = false |==> <NO-OP>
1400:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):274:indent |==> false
1401:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):274:indent |==> true
1402:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):275:buf.append("\n        ") |==> <NO-OP>
1403:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):278:buf.append("{") |==> <NO-OP>
1404:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):280:indent |==> false
1405:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):280:indent |==> true
1406:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):281:buf.append("\n            ") |==> <NO-OP>
1407:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):284:buf.append(ql + df.getTag() + ql + ":") |==> <NO-OP>
1408:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):286:indent |==> false
1409:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):286:indent |==> true
1410:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):287:buf.append("\n                ") |==> <NO-OP>
1411:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):290:buf.append("{") |==> <NO-OP>
1412:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):292:buf.append(ql + "subfields" + ql + ":") |==> <NO-OP>
1413:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):294:indent |==> false
1414:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):294:indent |==> true
1415:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):295:buf.append("\n                ") |==> <NO-OP>
1416:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):298:buf.append("[") |==> <NO-OP>
1417:COR:firstSubfield:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):302:firstSubfield |==> false
1418:COR:firstSubfield:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):302:firstSubfield |==> true
1419:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):303:buf.append(",") |==> <NO-OP>
1420:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):305:firstSubfield = false |==> <NO-OP>
1421:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):308:indent |==> false
1422:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):308:indent |==> true
1423:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):309:buf.append("\n                    ") |==> <NO-OP>
1424:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):312:buf.append("{") |==> <NO-OP>
1425:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):314:indent |==> false
1426:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):314:indent |==> true
1427:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):315:buf.append("\n                        ") |==> <NO-OP>
1428:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):318:buf.append(ql + sf.getCode() + ql + ":\"" + unicodeEscape(sf.getData()) + "\"") |==> <NO-OP>
1429:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):320:indent |==> false
1430:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):320:indent |==> true
1431:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):321:buf.append("\n                    ") |==> <NO-OP>
1432:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):324:buf.append("}") |==> <NO-OP>
1433:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):327:indent |==> false
1434:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):327:indent |==> true
1435:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):328:buf.append("\n                ") |==> <NO-OP>
1436:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):331:buf.append("],") |==> <NO-OP>
1437:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):333:indent |==> false
1438:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):333:indent |==> true
1439:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):334:buf.append("\n                ") |==> <NO-OP>
1440:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):337:buf.append(ql + "ind1" + ql + ":\"" + df.getIndicator1() + "\",") |==> <NO-OP>
1441:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):339:indent |==> false
1442:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):339:indent |==> true
1443:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):340:buf.append("\n                ") |==> <NO-OP>
1444:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):343:buf.append(ql + "ind2" + ql + ":\"" + df.getIndicator2() + "\"") |==> <NO-OP>
1445:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):345:indent |==> false
1446:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):345:indent |==> true
1447:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):346:buf.append("\n            ") |==> <NO-OP>
1448:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):349:buf.append("}") |==> <NO-OP>
1449:COR:indent:TRUE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):351:indent |==> false
1450:COR:indent:FALSE:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):351:indent |==> true
1451:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):352:buf.append("\n        ") |==> <NO-OP>
1452:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):355:buf.append("}") |==> <NO-OP>
1453:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):358:indent(buf, "\n    ") |==> <NO-OP>
1454:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):360:buf.append("]") |==> <NO-OP>
1455:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):362:indent(buf, "\n") |==> <NO-OP>
1456:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@toMarcInJson(org.marc4j.marc.Record):364:buf.append("}\n") |==> <NO-OP>
1457:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):370:converter != null |==> true
1458:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):371:data = converter.convert(data) |==> <NO-OP>
1459:COR:normalize:TRUE:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):374:normalize |==> false
1460:COR:normalize:FALSE:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):374:normalize |==> true
1461:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):375:data = Normalizer.normalize(data, Normalizer.Form.NFC) |==> <NO-OP>
1462:ROR:<(int,int):!=(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):380:i < data.length() |==> i != data.length()
1463:ROR:<(int,int):<=(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):380:i < data.length() |==> i <= data.length()
1464:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):380:i < data.length() |==> false
1465:COR:escapeSlash:TRUE:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):384:escapeSlash |==> false
1466:COR:escapeSlash:FALSE:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):384:escapeSlash |==> true
1467:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):385:buffer.append("\\/") |==> <NO-OP>
1468:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):387:buffer.append("/") |==> <NO-OP>
1469:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):390:break; |==> <NO-OP>
1470:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):392:buffer.append("\\\"") |==> <NO-OP>
1471:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):393:break; |==> <NO-OP>
1472:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):395:buffer.append("\\\\") |==> <NO-OP>
1473:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):396:break; |==> <NO-OP>
1474:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):398:buffer.append("\\b") |==> <NO-OP>
1475:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):399:break; |==> <NO-OP>
1476:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):401:buffer.append("\\f") |==> <NO-OP>
1477:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):402:break; |==> <NO-OP>
1478:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):404:buffer.append("\\n") |==> <NO-OP>
1479:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):405:break; |==> <NO-OP>
1480:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):407:buffer.append("\\r") |==> <NO-OP>
1481:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):408:break; |==> <NO-OP>
1482:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):410:buffer.append("\\t") |==> <NO-OP>
1483:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):411:break; |==> <NO-OP>
1484:ROR:>(int,int):!=(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c > 255 |==> c != 255
1485:ROR:>(int,int):>=(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c > 255 |==> c >= 255
1486:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c > 255 |==> false
1487:ROR:<(int,int):!=(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c < 31 |==> c != 31
1488:ROR:<(int,int):<=(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c < 31 |==> c <= 31
1489:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c < 31 |==> false
1490:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c > 255 || c < 31 |==> c > 255 != c < 31
1491:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c > 255 || c < 31 |==> c > 255
1492:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c > 255 || c < 31 |==> c < 31
1493:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):413:c > 255 || c < 31 |==> true
1494:AOR:-(int,int):%(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):415:val.length() - 4 |==> val.length() % 4
1495:AOR:-(int,int):*(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):415:val.length() - 4 |==> val.length() * 4
1496:AOR:-(int,int):+(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):415:val.length() - 4 |==> val.length() + 4
1497:AOR:-(int,int):/(int,int):org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):415:val.length() - 4 |==> val.length() / 4
1498:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):415:buffer.append("\\u" + val.substring(val.length() - 4, val.length())) |==> <NO-OP>
1499:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):417:buffer.append(c) |==> <NO-OP>
1500:STD:<BREAK>:<NO-OP>:org.marc4j.MarcJsonWriter@unicodeEscape(java.lang.String):420:break; |==> <NO-OP>
1501:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@setConverter(org.marc4j.converter.CharConverter):444:this.converter = converter |==> <NO-OP>
1502:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@setIndent(boolean):462:this.indent = indent |==> <NO-OP>
1503:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):472:useJsonFormat == MARC_IN_JSON |==> useJsonFormat <= MARC_IN_JSON
1504:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):472:useJsonFormat == MARC_IN_JSON |==> useJsonFormat >= MARC_IN_JSON
1505:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):472:useJsonFormat == MARC_IN_JSON |==> false
1506:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):473:recordAsJson = toMarcInJson(record) |==> <NO-OP>
1507:ROR:==(int,int):<=(int,int):org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):474:useJsonFormat == MARC_JSON |==> useJsonFormat <= MARC_JSON
1508:ROR:==(int,int):>=(int,int):org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):474:useJsonFormat == MARC_JSON |==> useJsonFormat >= MARC_JSON
1509:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):474:useJsonFormat == MARC_JSON |==> false
1510:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):475:recordAsJson = toMarcJson(record) |==> <NO-OP>
1511:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):479:os.write(recordAsJson.getBytes("UTF-8")) |==> <NO-OP>
1512:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):480:os.flush() |==> <NO-OP>
1513:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):483:e.printStackTrace() |==> <NO-OP>
1514:STD:<CALL>:<NO-OP>:org.marc4j.MarcJsonWriter@write(org.marc4j.marc.Record):486:e.printStackTrace() |==> <NO-OP>
1515:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@setEscapeSlash(boolean):505:this.escapeSlash = escapeSlash |==> <NO-OP>
1516:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@setQuoteLabels(boolean):523:this.quoteLabels = quoteLabels |==> <NO-OP>
1517:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@setQuoteLabels(boolean):524:ql = (quoteLabels) ? "\"" : "" |==> <NO-OP>
1518:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcJsonWriter@setUnicodeNormalization(boolean):542:this.normalize = b |==> <NO-OP>
1519:ROR:<(int,int):!=(int,int):org.marc4j.converter.CharConverter@convert(byte[]):52:i < dataElement.length |==> i != dataElement.length
1520:ROR:<(int,int):<=(int,int):org.marc4j.converter.CharConverter@convert(byte[]):52:i < dataElement.length |==> i <= dataElement.length
1521:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.CharConverter@convert(byte[]):52:i < dataElement.length |==> false
1522:ROR:>=(int,int):==(int,int):org.marc4j.converter.CharConverter@convert(byte[]):54:b >= 0 |==> b == 0
1523:ROR:>=(int,int):>(int,int):org.marc4j.converter.CharConverter@convert(byte[]):54:b >= 0 |==> b > 0
1524:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.CharConverter@convert(byte[]):54:b >= 0 |==> true
1525:AOR:+(int,int):%(int,int):org.marc4j.converter.CharConverter@convert(byte[]):54:256 + b |==> 256 % b
1526:AOR:+(int,int):*(int,int):org.marc4j.converter.CharConverter@convert(byte[]):54:256 + b |==> 256 * b
1527:AOR:+(int,int):-(int,int):org.marc4j.converter.CharConverter@convert(byte[]):54:256 + b |==> 256 - b
1528:AOR:+(int,int):/(int,int):org.marc4j.converter.CharConverter@convert(byte[]):54:256 + b |==> 256 / b
1529:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.CharConverter@convert(byte[]):54:cData[i] = (char)(b >= 0 ? b : 256 + b) |==> <NO-OP>
1530:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.CharConverter@convert(java.lang.String):69:data = dataElement.toCharArray() |==> <NO-OP>
1531:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcMultiplexReader@hasNext():34:curReader == null |==> false
1532:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcMultiplexReader@hasNext():34:curReader == null || !(hasNext = curReader.hasNext()) |==> curReader == null != !(hasNext = curReader.hasNext())
1533:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcMultiplexReader@hasNext():34:curReader == null || !(hasNext = curReader.hasNext()) |==> curReader == null
1534:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcMultiplexReader@hasNext():34:curReader == null || !(hasNext = curReader.hasNext()) |==> !(hasNext = curReader.hasNext())
1535:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcMultiplexReader@hasNext():34:curReader == null || !(hasNext = curReader.hasNext()) |==> true
1536:COR:readerIterator.hasNext():TRUE:org.marc4j.MarcMultiplexReader@hasNext():35:readerIterator.hasNext() |==> false
1537:COR:readerIterator.hasNext():FALSE:org.marc4j.MarcMultiplexReader@hasNext():35:readerIterator.hasNext() |==> true
1538:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcMultiplexReader@hasNext():39:curReader = readerIterator.next() |==> <NO-OP>
1539:STD:<INC>:<NO-OP>:org.marc4j.MarcMultiplexReader@hasNext():40:readerCnt++ |==> <NO-OP>
1540:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcMultiplexReader@hasNext():42:curReader = null |==> <NO-OP>
1541:STD:<RETURN>:<NO-OP>:org.marc4j.MarcMultiplexReader@hasNext():43:return false; |==> <NO-OP>
1542:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean):166:this.permissive = permissive |==> <NO-OP>
1543:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean):167:this.input = new DataInputStream(new BufferedInputStream(input)) |==> <NO-OP>
1544:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean):169:this.convertToUTF8 = convertToUTF8 |==> <NO-OP>
1545:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean):171:permissive |==> false
1546:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean):171:permissive |==> true
1547:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean):173:defaultEncoding = "BESTGUESS" |==> <NO-OP>
1548:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean):197:errors != null |==> true
1549:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean):198:permissive = true |==> <NO-OP>
1550:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean):199:defaultEncoding = "BESTGUESS" |==> <NO-OP>
1551:COR:input.markSupported():TRUE:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean):201:input.markSupported() |==> false
1552:COR:input.markSupported():FALSE:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean):201:input.markSupported() |==> true
1553:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean):201:this.input = new DataInputStream(input.markSupported() ? input : new BufferedInputStream(input)) |==> <NO-OP>
1554:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean):204:this.convertToUTF8 = convertToUTF8 |==> <NO-OP>
1555:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean,java.lang.String):229:this.permissive = permissive |==> <NO-OP>
1556:COR:input.markSupported():TRUE:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean,java.lang.String):230:input.markSupported() |==> false
1557:COR:input.markSupported():FALSE:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean,java.lang.String):230:input.markSupported() |==> true
1558:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean,java.lang.String):230:this.input = new DataInputStream(input.markSupported() ? input : new BufferedInputStream(input)) |==> <NO-OP>
1559:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean,java.lang.String):233:this.convertToUTF8 = convertToUTF8 |==> <NO-OP>
1560:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,boolean,boolean,java.lang.String):234:this.defaultEncoding = defaultEncoding |==> <NO-OP>
1561:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean,java.lang.String):267:this.permissive = true |==> <NO-OP>
1562:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean,java.lang.String):268:this.input = new DataInputStream(new BufferedInputStream(input)) |==> <NO-OP>
1563:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean,java.lang.String):270:this.convertToUTF8 = convertToUTF8 |==> <NO-OP>
1564:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@<init>(java.io.InputStream,org.marc4j.ErrorHandler,boolean,java.lang.String):271:this.defaultEncoding = defaultEncoding |==> <NO-OP>
1565:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@setTranslateLosslessUnicodeNumericCodeReferencesEnabled(boolean):290:this.translateLosslessUnicodeNumericCodeReferencesEnabled = translateLosslessUnicodeNumericCodeReferencesEnabled |==> <NO-OP>
1566:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():299:input.mark(10) |==> <NO-OP>
1567:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():301:byteread == -1 |==> byteread <= -1
1568:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():301:byteread == -1 |==> byteread >= -1
1569:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():301:byteread == -1 |==> false
1570:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():302:return false; |==> <NO-OP>
1571:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread < '0' |==> byteread != '0'
1572:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread < '0' |==> byteread <= '0'
1573:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread < '0' |==> false
1574:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread > '9' |==> byteread != '9'
1575:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread > '9' |==> byteread >= '9'
1576:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread > '9' |==> false
1577:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread < '0' || byteread > '9' |==> byteread < '0' != byteread > '9'
1578:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread < '0' || byteread > '9' |==> byteread < '0'
1579:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread < '0' || byteread > '9' |==> byteread > '9'
1580:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@hasNext():306:byteread < '0' || byteread > '9' |==> true
1581:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():307:byteread = input.read() |==> <NO-OP>
1582:STD:<INC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():308:numBadBytes++ |==> <NO-OP>
1583:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():309:byteread == -1 |==> byteread <= -1
1584:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():309:byteread == -1 |==> byteread >= -1
1585:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():309:byteread == -1 |==> false
1586:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():310:return false; |==> <NO-OP>
1587:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():313:input.reset() |==> <NO-OP>
1588:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():314:numBadBytes > 0 |==> numBadBytes != 0
1589:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():314:numBadBytes > 0 |==> numBadBytes >= 0
1590:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@hasNext():314:numBadBytes > 0 |==> false
1591:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():315:byteread = input.read() |==> <NO-OP>
1592:STD:<DEC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@hasNext():316:numBadBytes-- |==> <NO-OP>
1593:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():332:record = factory.newRecord() |==> <NO-OP>
1594:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@next():333:errors != null |==> true
1595:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():334:errors.reset() |==> <NO-OP>
1596:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():340:input.readFully(byteArray) |==> <NO-OP>
1597:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@next():342:recordLength - 24 |==> recordLength % 24
1598:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@next():342:recordLength - 24 |==> recordLength * 24
1599:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@next():342:recordLength - 24 |==> recordLength + 24
1600:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@next():342:recordLength - 24 |==> recordLength / 24
1601:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@next():343:permissive |==> false
1602:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@next():343:permissive |==> true
1603:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():344:input.mark(marc_file_lookahead_buffer) |==> <NO-OP>
1604:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():345:input.readFully(recordBuf) |==> <NO-OP>
1605:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@next():346:recordBuf.length - 1 |==> recordBuf.length % 1
1606:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@next():346:recordBuf.length - 1 |==> recordBuf.length * 1
1607:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@next():346:recordBuf.length - 1 |==> recordBuf.length + 1
1608:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@next():346:recordBuf.length - 1 |==> recordBuf.length / 1
1609:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@next():346:recordBuf[recordBuf.length - 1] != Constants.RT |==> recordBuf[recordBuf.length - 1] < Constants.RT
1610:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@next():346:recordBuf[recordBuf.length - 1] != Constants.RT |==> recordBuf[recordBuf.length - 1] > Constants.RT
1611:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@next():346:recordBuf[recordBuf.length - 1] != Constants.RT |==> true
1612:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():347:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Record terminator character not found at end of record length") |==> <NO-OP>
1613:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():349:recordBuf = rereadPermissively(record, input, recordBuf, recordLength) |==> <NO-OP>
1614:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@next():350:recordBuf.length + 24 |==> recordBuf.length % 24
1615:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@next():350:recordBuf.length + 24 |==> recordBuf.length * 24
1616:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@next():350:recordBuf.length + 24 |==> recordBuf.length - 24
1617:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@next():350:recordBuf.length + 24 |==> recordBuf.length / 24
1618:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():350:recordLength = recordBuf.length + 24 |==> <NO-OP>
1619:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():353:input.readFully(recordBuf) |==> <NO-OP>
1620:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():356:parseRecord(record, byteArray, recordBuf, recordLength) |==> <NO-OP>
1621:COR:this.convertToUTF8:TRUE:org.marc4j.MarcPermissiveStreamReader@next():358:this.convertToUTF8 |==> false
1622:COR:this.convertToUTF8:FALSE:org.marc4j.MarcPermissiveStreamReader@next():358:this.convertToUTF8 |==> true
1623:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():360:l.setCharCodingScheme('a') |==> <NO-OP>
1624:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():361:record.setLeader(l) |==> <NO-OP>
1625:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@next():363:errors != null |==> true
1626:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@next():363:errors != null && record.hasErrors() |==> errors != null == record.hasErrors()
1627:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@next():363:errors != null && record.hasErrors() |==> false
1628:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@next():363:errors != null && record.hasErrors() |==> errors != null
1629:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@next():363:errors != null && record.hasErrors() |==> record.hasErrors()
1630:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@next():364:errors.addErrors(record.getControlNumber(), record.getErrors()) |==> <NO-OP>
1631:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):377:loc != -1 |==> loc < -1
1632:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):377:loc != -1 |==> loc > -1
1633:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):377:loc != -1 |==> true
1634:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):379:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Record terminator appears before stated record length, using shorter record") |==> <NO-OP>
1635:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):381:loc + 24 |==> loc % 24
1636:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):381:loc + 24 |==> loc * 24
1637:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):381:loc + 24 |==> loc - 24
1638:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):381:loc + 24 |==> loc / 24
1639:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):381:recordLength = loc + 24 |==> <NO-OP>
1640:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):382:input.reset() |==> <NO-OP>
1641:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):383:recordLength - 24 |==> recordLength % 24
1642:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):383:recordLength - 24 |==> recordLength * 24
1643:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):383:recordLength - 24 |==> recordLength + 24
1644:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):383:recordLength - 24 |==> recordLength / 24
1645:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):383:recordBuf = new byte[recordLength - 24] |==> <NO-OP>
1646:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):384:input.readFully(recordBuf) |==> <NO-OP>
1647:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):387:recordLength - 24 |==> recordLength % 24
1648:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):387:recordLength - 24 |==> recordLength * 24
1649:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):387:recordLength - 24 |==> recordLength + 24
1650:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):387:recordLength - 24 |==> recordLength / 24
1651:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):387:loc = recordLength - 24 |==> <NO-OP>
1652:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):394:c = input.read() |==> <NO-OP>
1653:STD:<INC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):395:loc++ |==> <NO-OP>
1654:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:marc_file_lookahead_buffer - 24 |==> marc_file_lookahead_buffer % 24
1655:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:marc_file_lookahead_buffer - 24 |==> marc_file_lookahead_buffer * 24
1656:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:marc_file_lookahead_buffer - 24 |==> marc_file_lookahead_buffer + 24
1657:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:marc_file_lookahead_buffer - 24 |==> marc_file_lookahead_buffer / 24
1658:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 |==> loc != marc_file_lookahead_buffer - 24
1659:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 |==> loc <= marc_file_lookahead_buffer - 24
1660:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 |==> false
1661:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:c != Constants.RT |==> c < Constants.RT
1662:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:c != Constants.RT |==> c > Constants.RT
1663:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:c != Constants.RT |==> true
1664:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT |==> loc < marc_file_lookahead_buffer - 24 == (c != Constants.RT)
1665:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT |==> false
1666:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT |==> loc < marc_file_lookahead_buffer - 24
1667:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT |==> c != Constants.RT
1668:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:c != -1 |==> c < -1
1669:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:c != -1 |==> c > -1
1670:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:c != -1 |==> true
1671:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT && c != -1 |==> (loc < marc_file_lookahead_buffer - 24 && c != Constants.RT) == (c != -1)
1672:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT && c != -1 |==> false
1673:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT && c != -1 |==> loc < marc_file_lookahead_buffer - 24 && c != Constants.RT
1674:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):396:loc < marc_file_lookahead_buffer - 24 && c != Constants.RT && c != -1 |==> c != -1
1675:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):398:c == Constants.RT |==> c <= Constants.RT
1676:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):398:c == Constants.RT |==> c >= Constants.RT
1677:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):398:c == Constants.RT |==> false
1678:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):399:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Record terminator appears after stated record length, reading extra bytes") |==> <NO-OP>
1679:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):401:loc + 24 |==> loc % 24
1680:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):401:loc + 24 |==> loc * 24
1681:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):401:loc + 24 |==> loc - 24
1682:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):401:loc + 24 |==> loc / 24
1683:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):401:recordLength = loc + 24 |==> <NO-OP>
1684:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):402:input.reset() |==> <NO-OP>
1685:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):403:recordLength - 24 |==> recordLength % 24
1686:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):403:recordLength - 24 |==> recordLength * 24
1687:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):403:recordLength - 24 |==> recordLength + 24
1688:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):403:recordLength - 24 |==> recordLength / 24
1689:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):403:recordBuf = new byte[recordLength - 24] |==> <NO-OP>
1690:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):404:input.readFully(recordBuf) |==> <NO-OP>
1691:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):405:done = true |==> <NO-OP>
1692:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):406:c == -1 |==> c <= -1
1693:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):406:c == -1 |==> c >= -1
1694:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):406:c == -1 |==> false
1695:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):407:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "No Record terminator found, end of file reached, Terminator appended") |==> <NO-OP>
1696:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):409:loc + 24 |==> loc % 24
1697:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):409:loc + 24 |==> loc * 24
1698:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):409:loc + 24 |==> loc - 24
1699:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):409:loc + 24 |==> loc / 24
1700:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):409:recordLength = loc + 24 |==> <NO-OP>
1701:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):410:input.reset() |==> <NO-OP>
1702:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 |==> recordLength % 24
1703:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 |==> recordLength * 24
1704:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 |==> recordLength + 24
1705:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 |==> recordLength / 24
1706:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 + 1 |==> (recordLength - 24) % 1
1707:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 + 1 |==> (recordLength - 24) * 1
1708:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 + 1 |==> recordLength - 24 - 1
1709:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordLength - 24 + 1 |==> (recordLength - 24) / 1
1710:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):411:recordBuf = new byte[recordLength - 24 + 1] |==> <NO-OP>
1711:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):412:input.readFully(recordBuf) |==> <NO-OP>
1712:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):413:recordBuf.length - 1 |==> recordBuf.length % 1
1713:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):413:recordBuf.length - 1 |==> recordBuf.length * 1
1714:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):413:recordBuf.length - 1 |==> recordBuf.length + 1
1715:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):413:recordBuf.length - 1 |==> recordBuf.length / 1
1716:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):413:recordBuf[recordBuf.length - 1] = Constants.RT |==> <NO-OP>
1717:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):414:done = true |==> <NO-OP>
1718:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):416:record.addError("n/a", "n/a", MarcError.FATAL, "No Record terminator found within " + marc_file_lookahead_buffer + " bytes of start of record, getting desperate.") |==> <NO-OP>
1719:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):418:input.reset() |==> <NO-OP>
1720:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):419:marc_file_lookahead_buffer *= 2 |==> <NO-OP>
1721:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):420:input.mark(marc_file_lookahead_buffer) |==> <NO-OP>
1722:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@rereadPermissively(org.marc4j.marc.Record,java.io.DataInputStream,byte[],int):421:loc = 0 |==> <NO-OP>
1723:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):436:ldr.setRecordLength(recordLength) |==> <NO-OP>
1724:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):442:conversionCheck1 = "" |==> <NO-OP>
1725:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):443:conversionCheck2 = "" |==> <NO-OP>
1726:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):444:conversionCheck3 = "" |==> <NO-OP>
1727:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):447:parseLeader(ldr, byteArray) |==> <NO-OP>
1728:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:24 + 1 |==> 24 % 1
1729:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:24 + 1 |==> 24 * 1
1730:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:24 + 1 |==> 24 - 1
1731:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:24 + 1 |==> 24 / 1
1732:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() % (24 + 1)
1733:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() * (24 + 1)
1734:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() + (24 + 1)
1735:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() / (24 + 1)
1736:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):448:directoryLength = ldr.getBaseAddressOfData() - (24 + 1) |==> <NO-OP>
1737:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):452:permissive |==> false
1738:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):452:permissive |==> true
1739:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 1 |==> recordBuf.length % 1
1740:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 1 |==> recordBuf.length * 1
1741:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 1 |==> recordBuf.length + 1
1742:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 1 |==> recordBuf.length / 1
1743:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 1] == Constants.RT |==> recordBuf[recordBuf.length - 1] <= Constants.RT
1744:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 1] == Constants.RT |==> recordBuf[recordBuf.length - 1] >= Constants.RT
1745:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 1] == Constants.RT |==> false
1746:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 2 |==> recordBuf.length % 2
1747:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 2 |==> recordBuf.length * 2
1748:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 2 |==> recordBuf.length + 2
1749:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf.length - 2 |==> recordBuf.length / 2
1750:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 2] == Constants.FT |==> recordBuf[recordBuf.length - 2] <= Constants.FT
1751:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 2] == Constants.FT |==> recordBuf[recordBuf.length - 2] >= Constants.FT
1752:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 2] == Constants.FT |==> false
1753:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 1] == Constants.RT && recordBuf[recordBuf.length - 2] == Constants.FT |==> recordBuf[recordBuf.length - 1] == Constants.RT == (recordBuf[recordBuf.length - 2] == Constants.FT)
1754:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 1] == Constants.RT && recordBuf[recordBuf.length - 2] == Constants.FT |==> false
1755:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 1] == Constants.RT && recordBuf[recordBuf.length - 2] == Constants.FT |==> recordBuf[recordBuf.length - 1] == Constants.RT
1756:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):453:recordBuf[recordBuf.length - 1] == Constants.RT && recordBuf[recordBuf.length - 2] == Constants.FT |==> recordBuf[recordBuf.length - 2] == Constants.FT
1757:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):454:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Error parsing leader, trying to re-read leader either shorter or longer") |==> <NO-OP>
1758:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):459:offset < recordBuf.length |==> offset != recordBuf.length
1759:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):459:offset < recordBuf.length |==> offset <= recordBuf.length
1760:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):459:offset < recordBuf.length |==> false
1761:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):460:recordBuf[offset] == Constants.FT |==> recordBuf[offset] <= Constants.FT
1762:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):460:recordBuf[offset] == Constants.FT |==> recordBuf[offset] >= Constants.FT
1763:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):460:recordBuf[offset] == Constants.FT |==> false
1764:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):461:break; |==> <NO-OP>
1765:STD:<INC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):464:offset++ |==> <NO-OP>
1766:AOR:%(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):467:offset % 12 |==> offset * 12
1767:AOR:%(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):467:offset % 12 |==> offset + 12
1768:AOR:%(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):467:offset % 12 |==> offset - 12
1769:AOR:%(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):467:offset % 12 |==> offset / 12
1770:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):467:offset % 12 == 1 |==> offset % 12 <= 1
1771:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):467:offset % 12 == 1 |==> offset % 12 >= 1
1772:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):467:offset % 12 == 1 |==> false
1773:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):470:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Leader appears to be too short, moving one byte from record body to leader, and trying again") |==> <NO-OP>
1774:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):473:oldBody.length - 1 |==> oldBody.length % 1
1775:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):473:oldBody.length - 1 |==> oldBody.length * 1
1776:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):473:oldBody.length - 1 |==> oldBody.length + 1
1777:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):473:oldBody.length - 1 |==> oldBody.length / 1
1778:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):473:recordBuf = new byte[oldBody.length - 1] |==> <NO-OP>
1779:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):474:oldBody.length - 1 |==> oldBody.length % 1
1780:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):474:oldBody.length - 1 |==> oldBody.length * 1
1781:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):474:oldBody.length - 1 |==> oldBody.length + 1
1782:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):474:oldBody.length - 1 |==> oldBody.length / 1
1783:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):474:System.arraycopy(oldBody, 1, recordBuf, 0, oldBody.length - 1) |==> <NO-OP>
1784:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):475:offset - 1 |==> offset % 1
1785:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):475:offset - 1 |==> offset * 1
1786:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):475:offset - 1 |==> offset + 1
1787:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):475:offset - 1 |==> offset / 1
1788:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):475:directoryLength = offset - 1 |==> <NO-OP>
1789:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):476:ldr.setIndicatorCount(2) |==> <NO-OP>
1790:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):477:ldr.setSubfieldCodeLength(2) |==> <NO-OP>
1791:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):478:ldr.setImplDefined1(("" + (char)byteArray[7] + " ").toCharArray()) |==> <NO-OP>
1792:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):479:ldr.setImplDefined2(("" + (char)byteArray[18] + (char)byteArray[19] + (char)byteArray[20]).toCharArray()) |==> <NO-OP>
1793:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):481:ldr.setEntryMap("4500".toCharArray()) |==> <NO-OP>
1794:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)' ' |==> byteArray[10] <= (byte)' '
1795:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)' ' |==> byteArray[10] >= (byte)' '
1796:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)' ' |==> false
1797:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)'a' |==> byteArray[10] <= (byte)'a'
1798:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)'a' |==> byteArray[10] >= (byte)'a'
1799:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)'a' |==> false
1800:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> byteArray[10] == (byte)' ' != (byteArray[10] == (byte)'a')
1801:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> byteArray[10] == (byte)' '
1802:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> byteArray[10] == (byte)'a'
1803:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):484:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> true
1804:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):485:ldr.setCharCodingScheme((char)byteArray[10]) |==> <NO-OP>
1805:AOR:%(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):487:offset % 12 |==> offset * 12
1806:AOR:%(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):487:offset % 12 |==> offset + 12
1807:AOR:%(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):487:offset % 12 |==> offset - 12
1808:AOR:%(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):487:offset % 12 |==> offset / 12
1809:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):487:offset % 12 == 11 |==> offset % 12 <= 11
1810:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):487:offset % 12 == 11 |==> offset % 12 >= 11
1811:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):487:offset % 12 == 11 |==> false
1812:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):488:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Leader appears to be too long, moving one byte from leader to record body, and trying again") |==> <NO-OP>
1813:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):491:oldBody.length + 1 |==> oldBody.length % 1
1814:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):491:oldBody.length + 1 |==> oldBody.length * 1
1815:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):491:oldBody.length + 1 |==> oldBody.length - 1
1816:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):491:oldBody.length + 1 |==> oldBody.length / 1
1817:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):491:recordBuf = new byte[oldBody.length + 1] |==> <NO-OP>
1818:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):492:System.arraycopy(oldBody, 0, recordBuf, 1, oldBody.length) |==> <NO-OP>
1819:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):493:recordBuf[0] = (byte)'0' |==> <NO-OP>
1820:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):494:offset + 1 |==> offset % 1
1821:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):494:offset + 1 |==> offset * 1
1822:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):494:offset + 1 |==> offset - 1
1823:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):494:offset + 1 |==> offset / 1
1824:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):494:directoryLength = offset + 1 |==> <NO-OP>
1825:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):495:ldr.setIndicatorCount(2) |==> <NO-OP>
1826:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):496:ldr.setSubfieldCodeLength(2) |==> <NO-OP>
1827:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):497:ldr.setImplDefined1(("" + (char)byteArray[7] + " ").toCharArray()) |==> <NO-OP>
1828:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):498:ldr.setImplDefined2(("" + (char)byteArray[16] + (char)byteArray[17] + (char)byteArray[18]).toCharArray()) |==> <NO-OP>
1829:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):500:ldr.setEntryMap("4500".toCharArray()) |==> <NO-OP>
1830:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)' ' |==> byteArray[8] <= (byte)' '
1831:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)' ' |==> byteArray[8] >= (byte)' '
1832:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)' ' |==> false
1833:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)'a' |==> byteArray[8] <= (byte)'a'
1834:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)'a' |==> byteArray[8] >= (byte)'a'
1835:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)'a' |==> false
1836:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)' ' || byteArray[8] == (byte)'a' |==> byteArray[8] == (byte)' ' != (byteArray[8] == (byte)'a')
1837:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)' ' || byteArray[8] == (byte)'a' |==> byteArray[8] == (byte)' '
1838:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)' ' || byteArray[8] == (byte)'a' |==> byteArray[8] == (byte)'a'
1839:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):503:byteArray[8] == (byte)' ' || byteArray[8] == (byte)'a' |==> true
1840:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):504:ldr.setCharCodingScheme((char)byteArray[10]) |==> <NO-OP>
1841:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)' ' |==> byteArray[10] <= (byte)' '
1842:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)' ' |==> byteArray[10] >= (byte)' '
1843:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)' ' |==> false
1844:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)'a' |==> byteArray[10] <= (byte)'a'
1845:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)'a' |==> byteArray[10] >= (byte)'a'
1846:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)'a' |==> false
1847:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> byteArray[10] == (byte)' ' != (byteArray[10] == (byte)'a')
1848:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> byteArray[10] == (byte)' '
1849:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> byteArray[10] == (byte)'a'
1850:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):508:byteArray[10] == (byte)' ' || byteArray[10] == (byte)'a' |==> true
1851:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):509:ldr.setCharCodingScheme((char)byteArray[10]) |==> <NO-OP>
1852:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):512:record.addError("n/a", "n/a", MarcError.FATAL, "error parsing leader with data: " + new String(byteArray)) |==> <NO-OP>
1853:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):524:permissive && !("" + tmp[0] + tmp[1] + tmp[2] + tmp[3]).equals("4500") |==> permissive == !("" + tmp[0] + tmp[1] + tmp[2] + tmp[3]).equals("4500")
1854:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):524:permissive && !("" + tmp[0] + tmp[1] + tmp[2] + tmp[3]).equals("4500") |==> false
1855:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):524:permissive && !("" + tmp[0] + tmp[1] + tmp[2] + tmp[3]).equals("4500") |==> permissive
1856:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):524:permissive && !("" + tmp[0] + tmp[1] + tmp[2] + tmp[3]).equals("4500") |==> !("" + tmp[0] + tmp[1] + tmp[2] + tmp[3]).equals("4500")
1857:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' |==> tmp[0] == '0'
1858:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' |==> tmp[0] > '0'
1859:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' |==> true
1860:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] <= '9' |==> tmp[0] < '9'
1861:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] <= '9' |==> tmp[0] == '9'
1862:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] <= '9' |==> true
1863:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' |==> tmp[0] >= '0' == tmp[0] <= '9'
1864:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' |==> false
1865:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' |==> tmp[0] >= '0'
1866:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' |==> tmp[0] <= '9'
1867:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[1] >= '0' |==> tmp[1] == '0'
1868:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[1] >= '0' |==> tmp[1] > '0'
1869:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[1] >= '0' |==> true
1870:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' |==> (tmp[0] >= '0' && tmp[0] <= '9') == tmp[1] >= '0'
1871:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' |==> false
1872:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' |==> tmp[0] >= '0' && tmp[0] <= '9'
1873:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' |==> tmp[1] >= '0'
1874:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[1] <= '9' |==> tmp[1] < '9'
1875:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[1] <= '9' |==> tmp[1] == '9'
1876:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[1] <= '9' |==> true
1877:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' |==> (tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0') == tmp[1] <= '9'
1878:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' |==> false
1879:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' |==> tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0'
1880:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' |==> tmp[1] <= '9'
1881:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[2] >= '0' |==> tmp[2] == '0'
1882:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[2] >= '0' |==> tmp[2] > '0'
1883:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[2] >= '0' |==> true
1884:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' |==> (tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9') == tmp[2] >= '0'
1885:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' |==> false
1886:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' |==> tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9'
1887:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' |==> tmp[2] >= '0'
1888:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[2] <= '9' |==> tmp[2] < '9'
1889:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[2] <= '9' |==> tmp[2] == '9'
1890:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[2] <= '9' |==> true
1891:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' |==> (tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0') == tmp[2] <= '9'
1892:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' |==> false
1893:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' |==> tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0'
1894:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' |==> tmp[2] <= '9'
1895:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[3] >= '0' |==> tmp[3] == '0'
1896:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[3] >= '0' |==> tmp[3] > '0'
1897:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[3] >= '0' |==> true
1898:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' |==> (tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9') == tmp[3] >= '0'
1899:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' |==> false
1900:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' |==> tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9'
1901:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' |==> tmp[3] >= '0'
1902:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[3] <= '9' |==> tmp[3] < '9'
1903:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[3] <= '9' |==> tmp[3] == '9'
1904:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[3] <= '9' |==> true
1905:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' && tmp[3] <= '9' |==> (tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0') == tmp[3] <= '9'
1906:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' && tmp[3] <= '9' |==> false
1907:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' && tmp[3] <= '9' |==> tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0'
1908:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):525:tmp[0] >= '0' && tmp[0] <= '9' && tmp[1] >= '0' && tmp[1] <= '9' && tmp[2] >= '0' && tmp[2] <= '9' && tmp[3] >= '0' && tmp[3] <= '9' |==> tmp[3] <= '9'
1909:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):526:record.addError("n/a", "n/a", MarcError.ERROR_TYPO, "Unusual character found at end of leader [ " + tmp[0] + tmp[1] + tmp[2] + tmp[3] + " ]") |==> <NO-OP>
1910:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):529:record.addError("n/a", "n/a", MarcError.ERROR_TYPO, "Erroneous character found at end of leader [ " + tmp[0] + tmp[1] + tmp[2] + tmp[3] + " ]; changing them to the standard \"4500\"") |==> <NO-OP>
1911:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):531:ldr.setEntryMap("4500".toCharArray()) |==> <NO-OP>
1912:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):538:encoding = "UTF8" |==> <NO-OP>
1913:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):539:break; |==> <NO-OP>
1914:COR:convertToUTF8:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):541:convertToUTF8 |==> false
1915:COR:convertToUTF8:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):541:convertToUTF8 |==> true
1916:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):542:encoding = defaultEncoding |==> <NO-OP>
1917:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):544:encoding = "ISO8859_1" |==> <NO-OP>
1918:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):546:break; |==> <NO-OP>
1919:COR:convertToUTF8:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):548:convertToUTF8 |==> false
1920:COR:convertToUTF8:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):548:convertToUTF8 |==> true
1921:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):549:permissive |==> false
1922:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):549:permissive |==> true
1923:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):550:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Record character encoding should be \'a\' or \' \' in this record it is \'" + ldr.getCharCodingScheme() + "\'. Attempting to guess the correct encoding.") |==> <NO-OP>
1924:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):553:encoding = "BESTGUESS" |==> <NO-OP>
1925:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):555:encoding = defaultEncoding |==> <NO-OP>
1926:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):558:encoding = "ISO8859_1" |==> <NO-OP>
1927:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):560:break; |==> <NO-OP>
1928:COR:encoding.equalsIgnoreCase("BESTGUESS"):TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):564:encoding.equalsIgnoreCase("BESTGUESS") |==> false
1929:COR:encoding.equalsIgnoreCase("BESTGUESS"):FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):564:encoding.equalsIgnoreCase("BESTGUESS") |==> true
1930:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):569:marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length > 1 |==> marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length != 1
1931:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):569:marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length > 1 |==> marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length >= 1
1932:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):569:marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length > 1 |==> false
1933:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):570:encoding = "MARC8" |==> <NO-OP>
1934:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):573:i < recordBuf.length |==> i != recordBuf.length
1935:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):573:i < recordBuf.length |==> i <= recordBuf.length
1936:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):573:i < recordBuf.length |==> false
1937:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):574:recordBuf[i] < 0 |==> recordBuf[i] != 0
1938:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):574:recordBuf[i] < 0 |==> recordBuf[i] <= 0
1939:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):574:recordBuf[i] < 0 |==> false
1940:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):576:hasHighBitChars = true |==> <NO-OP>
1941:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):577:break; |==> <NO-OP>
1942:COR:hasHighBitChars:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):580:hasHighBitChars |==> false
1943:COR:hasHighBitChars:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):580:hasHighBitChars |==> true
1944:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):581:encoding = "ISO8859_1" |==> <NO-OP>
1945:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):587:encoding = "UTF8" |==> <NO-OP>
1946:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):589:recordBuf.length == byteCheck.length |==> recordBuf.length <= byteCheck.length
1947:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):589:recordBuf.length == byteCheck.length |==> recordBuf.length >= byteCheck.length
1948:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):589:recordBuf.length == byteCheck.length |==> false
1949:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):590:i < recordBuf.length |==> i != recordBuf.length
1950:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):590:i < recordBuf.length |==> i <= recordBuf.length
1951:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):590:i < recordBuf.length |==> false
1952:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):591:byteCheck[i] != recordBuf[i] |==> byteCheck[i] < recordBuf[i]
1953:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):591:byteCheck[i] != recordBuf[i] |==> byteCheck[i] > recordBuf[i]
1954:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):591:byteCheck[i] != recordBuf[i] |==> true
1955:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):592:encoding = "MARC8-Maybe" |==> <NO-OP>
1956:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):593:break; |==> <NO-OP>
1957:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):597:encoding = "MARC8-Maybe" |==> <NO-OP>
1958:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):603:e.printStackTrace() |==> <NO-OP>
1959:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):605:permissive && encoding.equals("UTF8") |==> permissive == encoding.equals("UTF8")
1960:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):605:permissive && encoding.equals("UTF8") |==> false
1961:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):605:permissive && encoding.equals("UTF8") |==> permissive
1962:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):605:permissive && encoding.equals("UTF8") |==> encoding.equals("UTF8")
1963:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):610:recordBuf.length != byteCheck.length |==> recordBuf.length < byteCheck.length
1964:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):610:recordBuf.length != byteCheck.length |==> recordBuf.length > byteCheck.length
1965:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):610:recordBuf.length != byteCheck.length |==> true
1966:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):613:i < recordBuf.length |==> i != recordBuf.length
1967:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):613:i < recordBuf.length |==> i <= recordBuf.length
1968:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):613:i < recordBuf.length |==> false
1969:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):614:recordBuf[i] == 27 |==> recordBuf[i] <= 27
1970:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):614:recordBuf[i] == 27 |==> recordBuf[i] >= 27
1971:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):614:recordBuf[i] == 27 |==> false
1972:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):615:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Record claims to be UTF-8, but its not. Its probably MARC8.") |==> <NO-OP>
1973:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):617:encoding = "MARC8-Maybe" |==> <NO-OP>
1974:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):618:foundESC = true |==> <NO-OP>
1975:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):619:break; |==> <NO-OP>
1976:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):622:byteCheck[i] != recordBuf[i] |==> byteCheck[i] < recordBuf[i]
1977:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):622:byteCheck[i] != recordBuf[i] |==> byteCheck[i] > recordBuf[i]
1978:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):622:byteCheck[i] != recordBuf[i] |==> true
1979:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):622:!foundESC && byteCheck[i] != recordBuf[i] |==> !foundESC == (byteCheck[i] != recordBuf[i])
1980:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):622:!foundESC && byteCheck[i] != recordBuf[i] |==> false
1981:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):622:!foundESC && byteCheck[i] != recordBuf[i] |==> !foundESC
1982:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):622:!foundESC && byteCheck[i] != recordBuf[i] |==> byteCheck[i] != recordBuf[i]
1983:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):623:encoding = "MARC8-Maybe" |==> <NO-OP>
1984:COR:foundESC:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):628:foundESC |==> false
1985:COR:foundESC:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):628:foundESC |==> true
1986:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):629:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Record claims to be UTF-8, but its not. It may be MARC8, or maybe UNIMARC, or maybe raw ISO-8859-1 ") |==> <NO-OP>
1987:COR:utfCheck.contains("a$1!"):TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):634:utfCheck.contains("a$1!") |==> false
1988:COR:utfCheck.contains("a$1!"):FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):634:utfCheck.contains("a$1!") |==> true
1989:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):635:encoding = "MARC8-Broken" |==> <NO-OP>
1990:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):636:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Record claims to be UTF-8, but its not. It seems to be MARC8-encoded but with missing escape codes.") |==> <NO-OP>
1991:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):641:e.printStackTrace() |==> <NO-OP>
1992:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") |==> permissive == !encoding.equals("UTF8")
1993:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") |==> false
1994:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") |==> permissive
1995:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") |==> !encoding.equals("UTF8")
1996:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") && convertToUTF8 |==> (permissive && !encoding.equals("UTF8")) == convertToUTF8
1997:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") && convertToUTF8 |==> false
1998:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") && convertToUTF8 |==> permissive && !encoding.equals("UTF8")
1999:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):643:permissive && !encoding.equals("UTF8") && convertToUTF8 |==> convertToUTF8
2000:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):646:marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length > 1 |==> marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length != 1
2001:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):646:marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length > 1 |==> marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length >= 1
2002:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):646:marc8EscSeqCheck.split("\\e[-(,)$bsp]", 2).length > 1 |==> false
2003:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):650:recordBuf.length == byteCheck.length |==> recordBuf.length <= byteCheck.length
2004:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):650:recordBuf.length == byteCheck.length |==> recordBuf.length >= byteCheck.length
2005:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):650:recordBuf.length == byteCheck.length |==> false
2006:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):651:i < recordBuf.length |==> i != recordBuf.length
2007:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):651:i < recordBuf.length |==> i <= recordBuf.length
2008:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):651:i < recordBuf.length |==> false
2009:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:recordBuf[i] < 0 |==> recordBuf[i] != 0
2010:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:recordBuf[i] < 0 |==> recordBuf[i] <= 0
2011:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:recordBuf[i] < 0 |==> false
2012:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:byteCheck[i] != recordBuf[i] |==> byteCheck[i] < recordBuf[i]
2013:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:byteCheck[i] != recordBuf[i] |==> byteCheck[i] > recordBuf[i]
2014:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:byteCheck[i] != recordBuf[i] |==> true
2015:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:recordBuf[i] < 0 || byteCheck[i] != recordBuf[i] |==> recordBuf[i] < 0 != (byteCheck[i] != recordBuf[i])
2016:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:recordBuf[i] < 0 || byteCheck[i] != recordBuf[i] |==> recordBuf[i] < 0
2017:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:recordBuf[i] < 0 || byteCheck[i] != recordBuf[i] |==> byteCheck[i] != recordBuf[i]
2018:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):654:recordBuf[i] < 0 || byteCheck[i] != recordBuf[i] |==> true
2019:COR:hasMarc8EscSeq:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):657:hasMarc8EscSeq |==> false
2020:COR:hasMarc8EscSeq:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):657:hasMarc8EscSeq |==> true
2021:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):658:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Record has MARC8 escape sequences, but also seem to have UTF8-encoded characters.") |==> <NO-OP>
2022:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):660:encoding = "MARC8-Maybe" |==> <NO-OP>
2023:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):662:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Record claims not to be UTF-8, but it seems to be.") |==> <NO-OP>
2024:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):664:encoding = "UTF8-Maybe" |==> <NO-OP>
2025:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):666:break; |==> <NO-OP>
2026:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):672:e.printStackTrace() |==> <NO-OP>
2027:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):676:record.setLeader(ldr) |==> <NO-OP>
2028:AOR:/(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):678:directoryLength / 12 |==> directoryLength % 12
2029:AOR:/(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):678:directoryLength / 12 |==> directoryLength * 12
2030:AOR:/(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):678:directoryLength / 12 |==> directoryLength + 12
2031:AOR:/(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):678:directoryLength / 12 |==> directoryLength - 12
2032:AOR:%(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 |==> directoryLength * 12
2033:AOR:%(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 |==> directoryLength + 12
2034:AOR:%(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 |==> directoryLength - 12
2035:AOR:%(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 |==> directoryLength / 12
2036:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 == 0 |==> directoryLength % 12 <= 0
2037:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 == 0 |==> directoryLength % 12 >= 0
2038:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 == 0 |==> false
2039:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:recordBuf[directoryLength] == Constants.FT |==> recordBuf[directoryLength] <= Constants.FT
2040:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:recordBuf[directoryLength] == Constants.FT |==> recordBuf[directoryLength] >= Constants.FT
2041:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:recordBuf[directoryLength] == Constants.FT |==> false
2042:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 == 0 && recordBuf[directoryLength] == Constants.FT |==> directoryLength % 12 == 0 == (recordBuf[directoryLength] == Constants.FT)
2043:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 == 0 && recordBuf[directoryLength] == Constants.FT |==> false
2044:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 == 0 && recordBuf[directoryLength] == Constants.FT |==> directoryLength % 12 == 0
2045:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):687:directoryLength % 12 == 0 && recordBuf[directoryLength] == Constants.FT |==> recordBuf[directoryLength] == Constants.FT
2046:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):697:offset = Integer.parseInt(dirEntry.substring(7, 12)) |==> <NO-OP>
2047:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):698:tags.add(tag) |==> <NO-OP>
2048:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):699:lengths.add(length) |==> <NO-OP>
2049:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):700:offset >= 99999 |==> offset == 99999
2050:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):700:offset >= 99999 |==> offset > 99999
2051:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):700:offset >= 99999 |==> true
2052:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):701:prevOffset + length |==> prevOffset % length
2053:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):701:prevOffset + length |==> prevOffset * length
2054:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):701:prevOffset + length |==> prevOffset - length
2055:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):701:prevOffset + length |==> prevOffset / length
2056:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):701:offset = prevOffset + length |==> <NO-OP>
2057:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):703:offsets.add(offset) |==> <NO-OP>
2058:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):704:offsetToFT += increment |==> <NO-OP>
2059:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):705:recordBuf[offsetToFT] == Constants.FT |==> recordBuf[offsetToFT] <= Constants.FT
2060:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):705:recordBuf[offsetToFT] == Constants.FT |==> recordBuf[offsetToFT] >= Constants.FT
2061:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):705:recordBuf[offsetToFT] == Constants.FT |==> false
2062:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):706:doneWithDirectory = true |==> <NO-OP>
2063:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):708:offsetsMap.put(offset, i) |==> <NO-OP>
2064:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:offset != totalOffset |==> offset < totalOffset
2065:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:offset != totalOffset |==> offset > totalOffset
2066:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:offset != totalOffset |==> true
2067:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:totalOffset < 99999 |==> totalOffset != 99999
2068:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:totalOffset < 99999 |==> totalOffset <= 99999
2069:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:totalOffset < 99999 |==> false
2070:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:offset != totalOffset && totalOffset < 99999 |==> offset != totalOffset == totalOffset < 99999
2071:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:offset != totalOffset && totalOffset < 99999 |==> false
2072:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:offset != totalOffset && totalOffset < 99999 |==> offset != totalOffset
2073:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):709:offset != totalOffset && totalOffset < 99999 |==> totalOffset < 99999
2074:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):710:unsortedOffsets = true |==> <NO-OP>
2075:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):712:totalOffset += length |==> <NO-OP>
2076:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):714:size = tags.size() |==> <NO-OP>
2077:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex > 0 |==> ftIndex != 0
2078:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex > 0 |==> ftIndex >= 0
2079:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex > 0 |==> false
2080:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex < 12 |==> ftIndex != 12
2081:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex < 12 |==> ftIndex <= 12
2082:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex < 12 |==> false
2083:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex > 0 && ftIndex < 12 |==> ftIndex > 0 == ftIndex < 12
2084:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex > 0 && ftIndex < 12 |==> false
2085:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex > 0 && ftIndex < 12 |==> ftIndex > 0
2086:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):725:ftIndex > 0 && ftIndex < 12 |==> ftIndex < 12
2087:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):726:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Field terminator in the middle of a directory entry. Discarding entry and trying to continue.") |==> <NO-OP>
2088:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):728:offsetToFT += dirEntry.indexOf(Constants.FT) |==> <NO-OP>
2089:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):729:break; |==> <NO-OP>
2090:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:directoryLength - offsetToFT |==> directoryLength % offsetToFT
2091:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:directoryLength - offsetToFT |==> directoryLength * offsetToFT
2092:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:directoryLength - offsetToFT |==> directoryLength + offsetToFT
2093:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:directoryLength - offsetToFT |==> directoryLength / offsetToFT
2094:AOR:%(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 |==> (directoryLength - offsetToFT) * 12
2095:AOR:%(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 |==> (directoryLength - offsetToFT) + 12
2096:AOR:%(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 |==> (directoryLength - offsetToFT) - 12
2097:AOR:%(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 |==> (directoryLength - offsetToFT) / 12
2098:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 == 11 |==> (directoryLength - offsetToFT) % 12 <= 11
2099:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 == 11 |==> (directoryLength - offsetToFT) % 12 >= 11
2100:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 == 11 |==> false
2101:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:tag.charAt(1) != '0' |==> tag.charAt(1) < '0'
2102:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:tag.charAt(1) != '0' |==> tag.charAt(1) > '0'
2103:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:tag.charAt(1) != '0' |==> true
2104:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 == 11 && tag.charAt(1) != '0' |==> (directoryLength - offsetToFT) % 12 == 11 == (tag.charAt(1) != '0')
2105:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 == 11 && tag.charAt(1) != '0' |==> false
2106:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 == 11 && tag.charAt(1) != '0' |==> (directoryLength - offsetToFT) % 12 == 11
2107:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):737:(directoryLength - offsetToFT) % 12 == 11 && tag.charAt(1) != '0' |==> tag.charAt(1) != '0'
2108:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength] == Constants.FT |==> recordBuf[directoryLength] <= Constants.FT
2109:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength] == Constants.FT |==> recordBuf[directoryLength] >= Constants.FT
2110:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength] == Constants.FT |==> false
2111:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:directoryLength + lengthA |==> directoryLength % lengthA
2112:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:directoryLength + lengthA |==> directoryLength * lengthA
2113:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:directoryLength + lengthA |==> directoryLength - lengthA
2114:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:directoryLength + lengthA |==> directoryLength / lengthA
2115:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength + lengthA] == Constants.FT |==> recordBuf[directoryLength + lengthA] <= Constants.FT
2116:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength + lengthA] == Constants.FT |==> recordBuf[directoryLength + lengthA] >= Constants.FT
2117:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength + lengthA] == Constants.FT |==> false
2118:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength] == Constants.FT && recordBuf[directoryLength + lengthA] == Constants.FT |==> recordBuf[directoryLength] == Constants.FT == (recordBuf[directoryLength + lengthA] == Constants.FT)
2119:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength] == Constants.FT && recordBuf[directoryLength + lengthA] == Constants.FT |==> false
2120:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength] == Constants.FT && recordBuf[directoryLength + lengthA] == Constants.FT |==> recordBuf[directoryLength] == Constants.FT
2121:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):741:recordBuf[directoryLength] == Constants.FT && recordBuf[directoryLength + lengthA] == Constants.FT |==> recordBuf[directoryLength + lengthA] == Constants.FT
2122:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):742:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Directory length is not a multiple of 12 bytes long.  Prepending a zero and trying to continue.") |==> <NO-OP>
2123:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):745:tag = tagA |==> <NO-OP>
2124:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):746:length = lengthA |==> <NO-OP>
2125:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):747:offset = offsetA |==> <NO-OP>
2126:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):748:increment = 11 |==> <NO-OP>
2127:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset |==> totalOffset < offset
2128:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset |==> totalOffset > offset
2129:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset |==> true
2130:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset > 99999 |==> totalOffset != 99999
2131:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset > 99999 |==> totalOffset >= 99999
2132:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset > 99999 |==> false
2133:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 |==> totalOffset != offset == totalOffset > 99999
2134:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 |==> false
2135:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 |==> totalOffset != offset
2136:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 |==> totalOffset > 99999
2137:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:offset != 99999 |==> offset < 99999
2138:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:offset != 99999 |==> offset > 99999
2139:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:offset != 99999 |==> true
2140:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 && offset != 99999 |==> (totalOffset != offset && totalOffset > 99999) == (offset != 99999)
2141:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 && offset != 99999 |==> false
2142:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 && offset != 99999 |==> totalOffset != offset && totalOffset > 99999
2143:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):752:totalOffset != offset && totalOffset > 99999 && offset != 99999 |==> offset != 99999
2144:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):758:offset1 == totalOffset |==> offset1 <= totalOffset
2145:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):758:offset1 == totalOffset |==> offset1 >= totalOffset
2146:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):758:offset1 == totalOffset |==> false
2147:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):759:offset = offset1 |==> <NO-OP>
2148:COR:flaggedError1:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):760:flaggedError1 |==> false
2149:COR:flaggedError1:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):760:flaggedError1 |==> true
2150:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):761:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Offset as stored in directory entry has more than 5 digits. Trying to continue.") |==> <NO-OP>
2151:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):763:flaggedError1 = true |==> <NO-OP>
2152:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):765:increment = 13 |==> <NO-OP>
2153:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:offset2 == totalOffset |==> offset2 <= totalOffset
2154:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:offset2 == totalOffset |==> offset2 >= totalOffset
2155:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:offset2 == totalOffset |==> false
2156:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:totalOffset > 0 |==> totalOffset != 0
2157:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:totalOffset > 0 |==> totalOffset >= 0
2158:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:totalOffset > 0 |==> false
2159:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:offset2 == totalOffset && totalOffset > 0 |==> offset2 == totalOffset == totalOffset > 0
2160:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:offset2 == totalOffset && totalOffset > 0 |==> false
2161:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:offset2 == totalOffset && totalOffset > 0 |==> offset2 == totalOffset
2162:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):766:offset2 == totalOffset && totalOffset > 0 |==> totalOffset > 0
2163:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):767:offset = offset2 |==> <NO-OP>
2164:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):768:length = length2 |==> <NO-OP>
2165:COR:flaggedError2:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):769:flaggedError2 |==> false
2166:COR:flaggedError2:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):769:flaggedError2 |==> true
2167:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):770:record.addError("n/a", "n/a", MarcError.MAJOR_ERROR, "Field is longer than 9999 bytes.  Writing this record out will result in a bad record.") |==> <NO-OP>
2168:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):772:flaggedError2 = true |==> <NO-OP>
2169:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):774:increment = 13 |==> <NO-OP>
2170:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):779:tags.add(tag) |==> <NO-OP>
2171:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):780:lengths.add(length) |==> <NO-OP>
2172:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):781:offsets.add(totalOffset) |==> <NO-OP>
2173:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):782:offsetToFT += increment |==> <NO-OP>
2174:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):783:recordBuf[offsetToFT] == Constants.FT |==> recordBuf[offsetToFT] <= Constants.FT
2175:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):783:recordBuf[offsetToFT] == Constants.FT |==> recordBuf[offsetToFT] >= Constants.FT
2176:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):783:recordBuf[offsetToFT] == Constants.FT |==> false
2177:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):784:doneWithDirectory = true |==> <NO-OP>
2178:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):786:offsetsMap.put(offset, i) |==> <NO-OP>
2179:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:totalOffset < 99999 |==> totalOffset != 99999
2180:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:totalOffset < 99999 |==> totalOffset <= 99999
2181:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:totalOffset < 99999 |==> false
2182:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:offset != totalOffset |==> offset < totalOffset
2183:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:offset != totalOffset |==> offset > totalOffset
2184:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:offset != totalOffset |==> true
2185:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:totalOffset < 99999 && offset != totalOffset |==> totalOffset < 99999 == (offset != totalOffset)
2186:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:totalOffset < 99999 && offset != totalOffset |==> false
2187:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:totalOffset < 99999 && offset != totalOffset |==> totalOffset < 99999
2188:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):787:totalOffset < 99999 && offset != totalOffset |==> offset != totalOffset
2189:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):788:record.addError("n/a", "n/a", MarcError.FATAL, "Offsets to fields are out of order AND the directory is messed up. Unable to continue.") |==> <NO-OP>
2190:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):793:totalOffset += length |==> <NO-OP>
2191:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):795:size = tags.size() |==> <NO-OP>
2192:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):797:directoryLength != offsetToFT |==> directoryLength < offsetToFT
2193:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):797:directoryLength != offsetToFT |==> directoryLength > offsetToFT
2194:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):797:directoryLength != offsetToFT |==> true
2195:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):798:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Specified directory length not equal to actual directory length.") |==> <NO-OP>
2196:COR:unsortedOffsets:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):802:unsortedOffsets |==> false
2197:COR:unsortedOffsets:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):802:unsortedOffsets |==> true
2198:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):803:Collections.sort(offsets) |==> <NO-OP>
2199:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):809:offsetToFT + 1 |==> offsetToFT % 1
2200:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):809:offsetToFT + 1 |==> offsetToFT * 1
2201:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):809:offsetToFT + 1 |==> offsetToFT - 1
2202:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):809:offsetToFT + 1 |==> offsetToFT / 1
2203:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):809:inputrec.skip(offsetToFT + 1) |==> <NO-OP>
2204:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):815:s < size |==> s != size
2205:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):815:s < size |==> s <= size
2206:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):815:s < size |==> false
2207:COR:unsortedOffsets:TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):816:unsortedOffsets |==> false
2208:COR:unsortedOffsets:FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):816:unsortedOffsets |==> true
2209:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):816:i = unsortedOffsets ? offsetsMap.get(offsets.get(s)).intValue() : s |==> <NO-OP>
2210:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 |==> fieldLength % 1
2211:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 |==> fieldLength * 1
2212:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 |==> fieldLength - 1
2213:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 |==> fieldLength / 1
2214:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 != lengths.get(i) |==> fieldLength + 1 < lengths.get(i)
2215:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 != lengths.get(i) |==> fieldLength + 1 > lengths.get(i)
2216:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 != lengths.get(i) |==> true
2217:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 != lengths.get(i) && permissive |==> fieldLength + 1 != lengths.get(i) == permissive
2218:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 != lengths.get(i) && permissive |==> false
2219:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 != lengths.get(i) && permissive |==> fieldLength + 1 != lengths.get(i)
2220:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):818:fieldLength + 1 != lengths.get(i) && permissive |==> permissive
2221:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:numBadLengths < 5 |==> numBadLengths != 5
2222:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:numBadLengths < 5 |==> numBadLengths <= 5
2223:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:numBadLengths < 5 |==> false
2224:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:totalLength + fieldLength |==> totalLength % fieldLength
2225:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:totalLength + fieldLength |==> totalLength * fieldLength
2226:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:totalLength + fieldLength |==> totalLength - fieldLength
2227:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:totalLength + fieldLength |==> totalLength / fieldLength
2228:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:recordLength + 26 |==> recordLength % 26
2229:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:recordLength + 26 |==> recordLength * 26
2230:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:recordLength + 26 |==> recordLength - 26
2231:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:recordLength + 26 |==> recordLength / 26
2232:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:totalLength + fieldLength < recordLength + 26 |==> totalLength + fieldLength != recordLength + 26
2233:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:totalLength + fieldLength < recordLength + 26 |==> totalLength + fieldLength <= recordLength + 26
2234:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:totalLength + fieldLength < recordLength + 26 |==> false
2235:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:numBadLengths < 5 && totalLength + fieldLength < recordLength + 26 |==> numBadLengths < 5 == totalLength + fieldLength < recordLength + 26
2236:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:numBadLengths < 5 && totalLength + fieldLength < recordLength + 26 |==> false
2237:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:numBadLengths < 5 && totalLength + fieldLength < recordLength + 26 |==> numBadLengths < 5
2238:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):819:numBadLengths < 5 && totalLength + fieldLength < recordLength + 26 |==> totalLength + fieldLength < recordLength + 26
2239:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):820:inputrec.mark(9999) |==> <NO-OP>
2240:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):821:byteArray = new byte[lengths.get(i)] |==> <NO-OP>
2241:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):822:inputrec.readFully(byteArray) |==> <NO-OP>
2242:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):823:inputrec.reset() |==> <NO-OP>
2243:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 |==> fieldLength % 1
2244:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 |==> fieldLength * 1
2245:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 |==> fieldLength - 1
2246:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 |==> fieldLength / 1
2247:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 < lengths.get(i) |==> fieldLength + 1 != lengths.get(i)
2248:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 < lengths.get(i) |==> fieldLength + 1 <= lengths.get(i)
2249:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 < lengths.get(i) |==> false
2250:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:lengths.get(i) - 1 |==> lengths.get(i) % 1
2251:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:lengths.get(i) - 1 |==> lengths.get(i) * 1
2252:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:lengths.get(i) - 1 |==> lengths.get(i) + 1
2253:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:lengths.get(i) - 1 |==> lengths.get(i) / 1
2254:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:byteArray[lengths.get(i) - 1] == Constants.FT |==> byteArray[lengths.get(i) - 1] <= Constants.FT
2255:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:byteArray[lengths.get(i) - 1] == Constants.FT |==> byteArray[lengths.get(i) - 1] >= Constants.FT
2256:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:byteArray[lengths.get(i) - 1] == Constants.FT |==> false
2257:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 < lengths.get(i) && byteArray[lengths.get(i) - 1] == Constants.FT |==> fieldLength + 1 < lengths.get(i) == (byteArray[lengths.get(i) - 1] == Constants.FT)
2258:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 < lengths.get(i) && byteArray[lengths.get(i) - 1] == Constants.FT |==> false
2259:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 < lengths.get(i) && byteArray[lengths.get(i) - 1] == Constants.FT |==> fieldLength + 1 < lengths.get(i)
2260:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):824:fieldLength + 1 < lengths.get(i) && byteArray[lengths.get(i) - 1] == Constants.FT |==> byteArray[lengths.get(i) - 1] == Constants.FT
2261:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):825:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Field Terminator character found in the middle of a field.") |==> <NO-OP>
2262:STD:<INC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):828:numBadLengths++ |==> <NO-OP>
2263:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):829:fieldLength + 1 |==> fieldLength % 1
2264:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):829:fieldLength + 1 |==> fieldLength * 1
2265:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):829:fieldLength + 1 |==> fieldLength - 1
2266:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):829:fieldLength + 1 |==> fieldLength / 1
2267:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):829:lengths.set(i, fieldLength + 1) |==> <NO-OP>
2268:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):830:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Field length found in record different from length stated in the directory.") |==> <NO-OP>
2269:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):832:fieldLength + 1 |==> fieldLength % 1
2270:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):832:fieldLength + 1 |==> fieldLength * 1
2271:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):832:fieldLength + 1 |==> fieldLength - 1
2272:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):832:fieldLength + 1 |==> fieldLength / 1
2273:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):832:fieldLength + 1 > 9999 |==> fieldLength + 1 != 9999
2274:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):832:fieldLength + 1 > 9999 |==> fieldLength + 1 >= 9999
2275:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):832:fieldLength + 1 > 9999 |==> false
2276:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):833:record.addError("n/a", "n/a", MarcError.FATAL, "Field length is greater than 9999, record cannot be represented as a binary Marc record.") |==> <NO-OP>
2277:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):841:totalLength += lengths.get(i) |==> <NO-OP>
2278:COR:isControlField(tags.get(i)):TRUE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):842:isControlField(tags.get(i)) |==> false
2279:COR:isControlField(tags.get(i)):FALSE:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):842:isControlField(tags.get(i)) |==> true
2280:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):843:lengths.get(i) - 1 |==> lengths.get(i) % 1
2281:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):843:lengths.get(i) - 1 |==> lengths.get(i) * 1
2282:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):843:lengths.get(i) - 1 |==> lengths.get(i) + 1
2283:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):843:lengths.get(i) - 1 |==> lengths.get(i) / 1
2284:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):843:byteArray = new byte[lengths.get(i) - 1] |==> <NO-OP>
2285:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):844:inputrec.readFully(byteArray) |==> <NO-OP>
2286:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):846:inputrec.read() != Constants.FT |==> inputrec.read() < Constants.FT
2287:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):846:inputrec.read() != Constants.FT |==> inputrec.read() > Constants.FT
2288:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):846:inputrec.read() != Constants.FT |==> true
2289:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):847:record.addError("n/a", "n/a", MarcError.FATAL, "Expected field terminator at end of field. Unable to continue.") |==> <NO-OP>
2290:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):853:field.setTag(tags.get(i)) |==> <NO-OP>
2291:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):854:field.setData(getDataAsString(byteArray)) |==> <NO-OP>
2292:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):855:record.addVariableField(field) |==> <NO-OP>
2293:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):858:byteArray = new byte[lengths.get(i)] |==> <NO-OP>
2294:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):859:inputrec.readFully(byteArray) |==> <NO-OP>
2295:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):861:record.addVariableField(parseDataField(record, tags.get(i), byteArray)) |==> <NO-OP>
2296:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:conversionCheck1.length() > 1 |==> conversionCheck1.length() != 1
2297:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:conversionCheck1.length() > 1 |==> conversionCheck1.length() >= 1
2298:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:conversionCheck1.length() > 1 |==> false
2299:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 |==> permissive == conversionCheck1.length() > 1
2300:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 |==> false
2301:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 |==> permissive
2302:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 |==> conversionCheck1.length() > 1
2303:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:conversionCheck2.length() > 1 |==> conversionCheck2.length() != 1
2304:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:conversionCheck2.length() > 1 |==> conversionCheck2.length() >= 1
2305:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:conversionCheck2.length() > 1 |==> false
2306:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 |==> (permissive && conversionCheck1.length() > 1) == conversionCheck2.length() > 1
2307:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 |==> false
2308:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 |==> permissive && conversionCheck1.length() > 1
2309:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 |==> conversionCheck2.length() > 1
2310:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:conversionCheck3.length() > 1 |==> conversionCheck3.length() != 1
2311:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:conversionCheck3.length() > 1 |==> conversionCheck3.length() >= 1
2312:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:conversionCheck3.length() > 1 |==> false
2313:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 && conversionCheck3.length() > 1 |==> (permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1) == conversionCheck3.length() > 1
2314:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 && conversionCheck3.length() > 1 |==> false
2315:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):874:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 && conversionCheck3.length() > 1 |==> permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1
2316:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):875:permissive && conversionCheck1.length() > 1 && conversionCheck2.length() > 1 && conversionCheck3.length() > 1 |==> conversionCheck3.length() > 1
2317:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):876:guessAndSelectCorrectNonUTF8Encoding() |==> <NO-OP>
2318:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):878:inputrec.read() != Constants.RT |==> inputrec.read() < Constants.RT
2319:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):878:inputrec.read() != Constants.RT |==> inputrec.read() > Constants.RT
2320:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):878:inputrec.read() != Constants.RT |==> true
2321:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):879:record.addError("n/a", "n/a", MarcError.FATAL, "Expected record terminator at end of record. Unable to continue.") |==> <NO-OP>
2322:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):884:record.addError("n/a", "n/a", MarcError.FATAL, "Error reading from data file. Unable to continue.") |==> <NO-OP>
2323:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@addError(int,java.lang.String):902:record.addError(currentField, currentSubfield, severity, message) |==> <NO-OP>
2324:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@isControlField(java.lang.String):908:isControl = Verifier.isControlField(tag) |==> <NO-OP>
2325:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@isControlField(java.lang.String):910:permissive |==> false
2326:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@isControlField(java.lang.String):910:permissive |==> true
2327:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@isControlField(java.lang.String):911:record.addError(tag, "n/a", MarcError.ERROR_TYPO, "Field tag contains non-numeric characters (" + tag + ").") |==> <NO-OP>
2328:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@isControlField(java.lang.String):913:isControl = false |==> <NO-OP>
2329:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():922:record.getVariableField("245") == null |==> false
2330:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():923:defaultPart = 1 |==> <NO-OP>
2331:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 |==> l1 != l3
2332:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 |==> l1 <= l3
2333:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 |==> false
2334:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l2 == l3 |==> l2 <= l3
2335:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l2 == l3 |==> l2 >= l3
2336:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l2 == l3 |==> false
2337:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 |==> l1 < l3 == (l2 == l3)
2338:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 |==> false
2339:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 |==> l1 < l3
2340:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 |==> l2 == l3
2341:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:defaultPart == 0 |==> defaultPart <= 0
2342:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:defaultPart == 0 |==> defaultPart >= 0
2343:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:defaultPart == 0 |==> false
2344:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 && defaultPart == 0 |==> (l1 < l3 && l2 == l3) == (defaultPart == 0)
2345:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 && defaultPart == 0 |==> false
2346:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 && defaultPart == 0 |==> l1 < l3 && l2 == l3
2347:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():932:l1 < l3 && l2 == l3 && defaultPart == 0 |==> defaultPart == 0
2348:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():933:addError(MarcError.INFO, "MARC8 translation shorter than ISO-8859-1, choosing MARC8.") |==> <NO-OP>
2349:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():934:partToUse = 0 |==> <NO-OP>
2350:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l1 - 2 |==> l1 % 2
2351:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l1 - 2 |==> l1 * 2
2352:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l1 - 2 |==> l1 + 2
2353:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l1 - 2 |==> l1 / 2
2354:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l1 - 2 |==> l2 != l1 - 2
2355:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l1 - 2 |==> l2 <= l1 - 2
2356:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l1 - 2 |==> false
2357:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l3 - 2 |==> l3 % 2
2358:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l3 - 2 |==> l3 * 2
2359:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l3 - 2 |==> l3 + 2
2360:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l3 - 2 |==> l3 / 2
2361:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l3 - 2 |==> l2 != l3 - 2
2362:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l3 - 2 |==> l2 <= l3 - 2
2363:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l3 - 2 |==> false
2364:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l1 - 2 && l2 < l3 - 2 |==> l2 < l1 - 2 == l2 < l3 - 2
2365:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l1 - 2 && l2 < l3 - 2 |==> false
2366:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l1 - 2 && l2 < l3 - 2 |==> l2 < l1 - 2
2367:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():935:l2 < l1 - 2 && l2 < l3 - 2 |==> l2 < l3 - 2
2368:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():936:addError(MarcError.INFO, "Unimarc translation shortest, choosing it.") |==> <NO-OP>
2369:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():937:partToUse = 1 |==> <NO-OP>
2370:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():938:(tst = onlyOneStartsWithUpperCase(conversionCheck1, conversionCheck2, conversionCheck3)) != -1 |==> (tst = onlyOneStartsWithUpperCase(conversionCheck1, conversionCheck2, conversionCheck3)) < -1
2371:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():938:(tst = onlyOneStartsWithUpperCase(conversionCheck1, conversionCheck2, conversionCheck3)) != -1 |==> (tst = onlyOneStartsWithUpperCase(conversionCheck1, conversionCheck2, conversionCheck3)) > -1
2372:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():940:partToUse = tst |==> <NO-OP>
2373:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l1 |==> l2 != l1
2374:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l1 |==> l2 <= l1
2375:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l1 |==> false
2376:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l3 |==> l2 != l3
2377:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l3 |==> l2 <= l3
2378:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l3 |==> false
2379:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l1 && l2 < l3 |==> l2 < l1 == l2 < l3
2380:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l1 && l2 < l3 |==> false
2381:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l1 && l2 < l3 |==> l2 < l1
2382:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():941:l2 < l1 && l2 < l3 |==> l2 < l3
2383:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():942:addError(MarcError.INFO, "Unimarc translation shortest, choosing it.") |==> <NO-OP>
2384:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():943:partToUse = 1 |==> <NO-OP>
2385:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():944:conversionCheck2.equals(conversionCheck3) && !conversionCheck1.trim().contains(" ") |==> conversionCheck2.equals(conversionCheck3) == !conversionCheck1.trim().contains(" ")
2386:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():944:conversionCheck2.equals(conversionCheck3) && !conversionCheck1.trim().contains(" ") |==> false
2387:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():944:conversionCheck2.equals(conversionCheck3) && !conversionCheck1.trim().contains(" ") |==> conversionCheck2.equals(conversionCheck3)
2388:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():944:conversionCheck2.equals(conversionCheck3) && !conversionCheck1.trim().contains(" ") |==> !conversionCheck1.trim().contains(" ")
2389:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():946:addError(MarcError.INFO, "Unimarc and ISO-8859-1 translations identical, choosing ISO-8859-1.") |==> <NO-OP>
2390:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():948:partToUse = 2 |==> <NO-OP>
2391:COR:specialCharIsBetweenLetters(conversionCheck1):TRUE:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():949:specialCharIsBetweenLetters(conversionCheck1) |==> false
2392:COR:specialCharIsBetweenLetters(conversionCheck1):FALSE:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():949:specialCharIsBetweenLetters(conversionCheck1) |==> true
2393:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():951:defaultPart == 0 |==> defaultPart <= 0
2394:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():951:defaultPart == 0 |==> defaultPart >= 0
2395:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():951:defaultPart == 0 |==> false
2396:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():950:addError(MarcError.INFO, "To few letters in translations, choosing " + (defaultPart == 0 ? "MARC8" : "Unimarc")) |==> <NO-OP>
2397:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():952:partToUse = defaultPart |==> <NO-OP>
2398:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:l2 == l3 |==> l2 <= l3
2399:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:l2 == l3 |==> l2 >= l3
2400:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:l2 == l3 |==> false
2401:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:defaultPart == 1 |==> defaultPart <= 1
2402:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:defaultPart == 1 |==> defaultPart >= 1
2403:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:defaultPart == 1 |==> false
2404:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:l2 == l3 && defaultPart == 1 |==> l2 == l3 == (defaultPart == 1)
2405:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:l2 == l3 && defaultPart == 1 |==> false
2406:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:l2 == l3 && defaultPart == 1 |==> l2 == l3
2407:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():953:l2 == l3 && defaultPart == 1 |==> defaultPart == 1
2408:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():954:addError(MarcError.INFO, "Unimarc and ISO-8859-1 translations equal length, choosing ISO-8859-1.") |==> <NO-OP>
2409:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():956:partToUse = 2 |==> <NO-OP>
2410:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():959:defaultPart == 0 |==> defaultPart <= 0
2411:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():959:defaultPart == 0 |==> defaultPart >= 0
2412:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():959:defaultPart == 0 |==> false
2413:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():958:addError(MarcError.INFO, "No Determination made, defaulting to " + (defaultPart == 0 ? "MARC8" : "Unimarc")) |==> <NO-OP>
2414:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():960:partToUse = defaultPart |==> <NO-OP>
2415:COR:sf.getData().contains("%%@%%"):TRUE:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():972:sf.getData().contains("%%@%%") |==> false
2416:COR:sf.getData().contains("%%@%%"):FALSE:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():972:sf.getData().contains("%%@%%") |==> true
2417:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@guessAndSelectCorrectNonUTF8Encoding():974:sf.setData(parts[partToUse]) |==> <NO-OP>
2418:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 |==> conversionCheck1.length() <= 0
2419:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 |==> conversionCheck1.length() >= 0
2420:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 |==> false
2421:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck2.length() == 0 |==> conversionCheck2.length() <= 0
2422:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck2.length() == 0 |==> conversionCheck2.length() >= 0
2423:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck2.length() == 0 |==> false
2424:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 |==> conversionCheck1.length() == 0 != (conversionCheck2.length() == 0)
2425:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 |==> conversionCheck1.length() == 0
2426:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 |==> conversionCheck2.length() == 0
2427:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 |==> true
2428:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck3.length() == 0 |==> conversionCheck3.length() <= 0
2429:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck3.length() == 0 |==> conversionCheck3.length() >= 0
2430:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):984:conversionCheck3.length() == 0 |==> false
2431:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 || conversionCheck3.length() == 0 |==> (conversionCheck1.length() == 0 || conversionCheck2.length() == 0) != (conversionCheck3.length() == 0)
2432:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 || conversionCheck3.length() == 0 |==> conversionCheck1.length() == 0 || conversionCheck2.length() == 0
2433:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 || conversionCheck3.length() == 0 |==> conversionCheck3.length() == 0
2434:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):983:conversionCheck1.length() == 0 || conversionCheck2.length() == 0 || conversionCheck3.length() == 0 |==> true
2435:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):985:return -1; |==> <NO-OP>
2436:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length |==> i != check1Parts.length
2437:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length |==> i <= check1Parts.length
2438:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length |==> false
2439:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check2Parts.length |==> i != check2Parts.length
2440:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check2Parts.length |==> i <= check2Parts.length
2441:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check2Parts.length |==> false
2442:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length |==> i < check1Parts.length == i < check2Parts.length
2443:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length |==> false
2444:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length |==> i < check1Parts.length
2445:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length |==> i < check2Parts.length
2446:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check3Parts.length |==> i != check3Parts.length
2447:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check3Parts.length |==> i <= check3Parts.length
2448:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check3Parts.length |==> false
2449:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length && i < check3Parts.length |==> (i < check1Parts.length && i < check2Parts.length) == i < check3Parts.length
2450:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length && i < check3Parts.length |==> false
2451:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length && i < check3Parts.length |==> i < check1Parts.length && i < check2Parts.length
2452:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):990:i < check1Parts.length && i < check2Parts.length && i < check3Parts.length |==> i < check3Parts.length
2453:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 |==> tst1 == !tst2
2454:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 |==> false
2455:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 |==> tst1
2456:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 |==> !tst2
2457:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 && !tst3 |==> (tst1 && !tst2) == !tst3
2458:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 && !tst3 |==> false
2459:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 && !tst3 |==> tst1 && !tst2
2460:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):994:tst1 && !tst2 && !tst3 |==> !tst3
2461:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):995:return 0; |==> <NO-OP>
2462:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 |==> !tst1 == tst2
2463:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 |==> false
2464:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 |==> !tst1
2465:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 |==> tst2
2466:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 && !tst3 |==> (!tst1 && tst2) == !tst3
2467:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 && !tst3 |==> false
2468:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 && !tst3 |==> !tst1 && tst2
2469:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):997:!tst1 && tst2 && !tst3 |==> !tst3
2470:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):998:return -1; |==> <NO-OP>
2471:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 |==> !tst1 == !tst2
2472:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 |==> false
2473:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 |==> !tst1
2474:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 |==> !tst2
2475:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 && tst3 |==> (!tst1 && !tst2) == tst3
2476:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 && tst3 |==> false
2477:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 && tst3 |==> !tst1 && !tst2
2478:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1000:!tst1 && !tst2 && tst3 |==> tst3
2479:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@onlyOneStartsWithUpperCase(java.lang.String,java.lang.String,java.lang.String):1001:return 2; |==> <NO-OP>
2480:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1010:i < conversionCheck.length() |==> i != conversionCheck.length()
2481:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1010:i < conversionCheck.length() |==> i <= conversionCheck.length()
2482:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1010:i < conversionCheck.length() |==> false
2483:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1013:charCode > 127 |==> charCode != 127
2484:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1013:charCode > 127 |==> charCode >= 127
2485:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1013:charCode > 127 |==> false
2486:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1014:bewteenLetters = false |==> <NO-OP>
2487:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 |==> i != 0
2488:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 |==> i >= 0
2489:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 |==> false
2490:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i - 1 |==> i % 1
2491:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i - 1 |==> i * 1
2492:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i - 1 |==> i + 1
2493:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i - 1 |==> i / 1
2494:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) |==> i > 0 == Character.isLetter((int)conversionCheck.charAt(i - 1))
2495:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) |==> false
2496:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) |==> i > 0
2497:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) |==> Character.isLetter((int)conversionCheck.charAt(i - 1))
2498:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:conversionCheck.length() - 1 |==> conversionCheck.length() % 1
2499:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:conversionCheck.length() - 1 |==> conversionCheck.length() * 1
2500:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:conversionCheck.length() - 1 |==> conversionCheck.length() + 1
2501:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:conversionCheck.length() - 1 |==> conversionCheck.length() / 1
2502:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i < conversionCheck.length() - 1 |==> i != conversionCheck.length() - 1
2503:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i < conversionCheck.length() - 1 |==> i <= conversionCheck.length() - 1
2504:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i < conversionCheck.length() - 1 |==> false
2505:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1016:i + 1 |==> i % 1
2506:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1016:i + 1 |==> i * 1
2507:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1016:i + 1 |==> i - 1
2508:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1016:i + 1 |==> i / 1
2509:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> i < conversionCheck.length() - 1 == Character.isLetter((int)conversionCheck.charAt(i + 1))
2510:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1016:i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> false
2511:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> i < conversionCheck.length() - 1
2512:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1016:i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> Character.isLetter((int)conversionCheck.charAt(i + 1))
2513:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) || i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> (i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1))) != (i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)))
2514:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) || i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1))
2515:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) || i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1))
2516:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1015:i > 0 && Character.isLetter((int)conversionCheck.charAt(i - 1)) || i < conversionCheck.length() - 1 && Character.isLetter((int)conversionCheck.charAt(i + 1)) |==> true
2517:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1017:bewteenLetters = true |==> <NO-OP>
2518:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@specialCharIsBetweenLetters(java.lang.String):1018:break; |==> <NO-OP>
2519:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@arrayContainsAt(byte[],int):1027:i < byteArray.length |==> i != byteArray.length
2520:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@arrayContainsAt(byte[],int):1027:i < byteArray.length |==> i <= byteArray.length
2521:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@arrayContainsAt(byte[],int):1027:i < byteArray.length |==> false
2522:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@arrayContainsAt(byte[],int):1028:byteArray[i] == (byte)ft |==> byteArray[i] <= (byte)ft
2523:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@arrayContainsAt(byte[],int):1028:byteArray[i] == (byte)ft |==> byteArray[i] >= (byte)ft
2524:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@arrayContainsAt(byte[],int):1028:byteArray[i] == (byte)ft |==> false
2525:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@arrayContainsAt(byte[],int):1029:return i; |==> <NO-OP>
2526:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1038:permissive |==> false
2527:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1038:permissive |==> true
2528:COR:tag.equals("880"):TRUE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1039:tag.equals("880") |==> false
2529:COR:tag.equals("880"):FALSE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1039:tag.equals("880") |==> true
2530:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1041:fieldTag = fieldTag.replaceFirst("^.*\\x1F6", "").replaceFirst("([-0-9]*).*", "$1") |==> <NO-OP>
2531:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1042:currentField = tag + "(" + fieldTag + ")" |==> <NO-OP>
2532:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1044:currentField = tag |==> <NO-OP>
2533:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1046:currentSubfield = "n/a" |==> <NO-OP>
2534:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1047:cleanupBadFieldSeperators(field, record) |==> <NO-OP>
2535:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1054:dataField.setTag(tag) |==> <NO-OP>
2536:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1055:dataField.setIndicator1(ind1) |==> <NO-OP>
2537:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1056:dataField.setIndicator2(ind2) |==> <NO-OP>
2538:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1067:readByte < 0 |==> readByte != 0
2539:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1067:readByte < 0 |==> readByte <= 0
2540:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1067:readByte < 0 |==> false
2541:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1068:break; |==> <NO-OP>
2542:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1075:code < 0 |==> code != 0
2543:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1075:code < 0 |==> code <= 0
2544:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1075:code < 0 |==> false
2545:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1079:code == Constants.FT |==> code <= Constants.FT
2546:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1079:code == Constants.FT |==> code >= Constants.FT
2547:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1079:code == Constants.FT |==> false
2548:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1080:break; |==> <NO-OP>
2549:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1085:size == 0 |==> size <= 0
2550:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1085:size == 0 |==> size >= 0
2551:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1085:size == 0 |==> false
2552:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1086:permissive |==> false
2553:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1086:permissive |==> true
2554:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1087:addError(MarcError.MINOR_ERROR, "Subfield of zero length encountered, ignoring it.") |==> <NO-OP>
2555:STD:<CONT>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1089:continue; |==> <NO-OP>
2556:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1096:bais.read(data) |==> <NO-OP>
2557:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1099:permissive |==> false
2558:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1099:permissive |==> true
2559:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1100:currentSubfield = "" + (char)code |==> <NO-OP>
2560:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1105:code == Constants.US |==> code <= Constants.US
2561:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1105:code == Constants.US |==> code >= Constants.US
2562:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1105:code == Constants.US |==> false
2563:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1105:permissive && code == Constants.US |==> permissive == (code == Constants.US)
2564:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1105:permissive && code == Constants.US |==> false
2565:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1105:permissive && code == Constants.US |==> permissive
2566:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1105:permissive && code == Constants.US |==> code == Constants.US
2567:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1106:code = data[0] |==> <NO-OP>
2568:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1107:dataAsString = dataAsString.substring(1) |==> <NO-OP>
2569:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1108:addError(MarcError.MAJOR_ERROR, "Subfield tag is a subfield separator, using first character of field as subfield tag.") |==> <NO-OP>
2570:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1110:validSubfieldCodes.indexOf(code) == -1 |==> validSubfieldCodes.indexOf(code) <= -1
2571:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1110:validSubfieldCodes.indexOf(code) == -1 |==> validSubfieldCodes.indexOf(code) >= -1
2572:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1110:validSubfieldCodes.indexOf(code) == -1 |==> false
2573:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1110:permissive && validSubfieldCodes.indexOf(code) == -1 |==> permissive == (validSubfieldCodes.indexOf(code) == -1)
2574:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1110:permissive && validSubfieldCodes.indexOf(code) == -1 |==> false
2575:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1110:permissive && validSubfieldCodes.indexOf(code) == -1 |==> permissive
2576:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1110:permissive && validSubfieldCodes.indexOf(code) == -1 |==> validSubfieldCodes.indexOf(code) == -1
2577:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code >= 'A' |==> code == 'A'
2578:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code >= 'A' |==> code > 'A'
2579:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code >= 'A' |==> true
2580:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code <= 'Z' |==> code < 'Z'
2581:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code <= 'Z' |==> code == 'Z'
2582:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code <= 'Z' |==> true
2583:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code >= 'A' && code <= 'Z' |==> code >= 'A' == code <= 'Z'
2584:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code >= 'A' && code <= 'Z' |==> false
2585:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code >= 'A' && code <= 'Z' |==> code >= 'A'
2586:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1111:code >= 'A' && code <= 'Z' |==> code <= 'Z'
2587:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1113:Boolean.parseBoolean(System.getProperty(upperCaseSubfieldsProperty, "false")) == false |==> false
2588:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1112:Boolean.parseBoolean(System.getProperty(upperCaseSubfieldsProperty, "false")) == false |==> Boolean.parseBoolean(System.getProperty(upperCaseSubfieldsProperty, "false"))
2589:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1113:Boolean.parseBoolean(System.getProperty(upperCaseSubfieldsProperty, "false")) == false |==> false
2590:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1114:code = Character.toLowerCase(code) |==> <NO-OP>
2591:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1115:addError(MarcError.MINOR_ERROR, "Subfield tag is an invalid uppercase character, changing it to lower case.") |==> <NO-OP>
2592:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1124:code > 127 |==> code != 127
2593:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1124:code > 127 |==> code >= 127
2594:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1124:code > 127 |==> false
2595:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1125:code = data[0] |==> <NO-OP>
2596:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1126:dataAsString = dataAsString.substring(1) |==> <NO-OP>
2597:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1127:addError(MarcError.MAJOR_ERROR, "Subfield tag is an invalid character greater than 0x7f, using first character of field as subfield tag.") |==> <NO-OP>
2598:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1130:code == '[' |==> code <= '['
2599:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1130:code == '[' |==> code >= '['
2600:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1130:code == '[' |==> false
2601:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1130:code == '[' && tag.equals("245") |==> code == '[' == tag.equals("245")
2602:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1130:code == '[' && tag.equals("245") |==> false
2603:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1130:code == '[' && tag.equals("245") |==> code == '['
2604:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1130:code == '[' && tag.equals("245") |==> tag.equals("245")
2605:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1131:code = 'h' |==> <NO-OP>
2606:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1132:dataAsString = '[' + dataAsString |==> <NO-OP>
2607:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1133:addError(MarcError.MAJOR_ERROR, "Subfield tag is an open bracket, generating a code \'h\' and pushing the bracket to the data.") |==> <NO-OP>
2608:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1135:code == ' ' |==> code <= ' '
2609:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1135:code == ' ' |==> code >= ' '
2610:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1135:code == ' ' |==> false
2611:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1136:addError(MarcError.MAJOR_ERROR, "Subfield tag is a space which is an invalid character") |==> <NO-OP>
2612:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1139:addError(MarcError.MAJOR_ERROR, "Subfield tag is an invalid character, [ " + (char)code + " ]") |==> <NO-OP>
2613:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1143:subfield.setCode((char)code) |==> <NO-OP>
2614:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1144:subfield.setData(dataAsString) |==> <NO-OP>
2615:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1145:dataField.addSubfield(subfield) |==> <NO-OP>
2616:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseDataField(org.marc4j.marc.Record,java.lang.String,byte[]):1148:break; |==> <NO-OP>
2617:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1157:conv == null |==> false
2618:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1158:conv = new AnselToUnicode(true) |==> <NO-OP>
2619:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1168:field.length - 1 |==> field.length % 1
2620:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1168:field.length - 1 |==> field.length * 1
2621:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1168:field.length - 1 |==> field.length + 1
2622:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1168:field.length - 1 |==> field.length / 1
2623:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1168:i < field.length - 1 |==> i != field.length - 1
2624:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1168:i < field.length - 1 |==> i <= field.length - 1
2625:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1168:i < field.length - 1 |==> false
2626:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1169:field[i] == 27 |==> field[i] <= 27
2627:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1169:field[i] == 27 |==> field[i] >= 27
2628:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1169:field[i] == 27 |==> false
2629:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1170:hasEsc = true |==> <NO-OP>
2630:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1172:i + 1 |==> i % 1
2631:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1172:i + 1 |==> i * 1
2632:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1172:i + 1 |==> i - 1
2633:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1172:i + 1 |==> i / 1
2634:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1172:"(,)-\'".indexOf((char)field[i + 1]) != -1 |==> "(,)-\'".indexOf((char)field[i + 1]) < -1
2635:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1172:"(,)-\'".indexOf((char)field[i + 1]) != -1 |==> "(,)-\'".indexOf((char)field[i + 1]) > -1
2636:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1172:"(,)-\'".indexOf((char)field[i + 1]) != -1 |==> true
2637:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1173:inMultiByte = false |==> <NO-OP>
2638:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i % 2
2639:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i * 2
2640:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i - 2
2641:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i / 2
2642:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 < field.length |==> i + 2 != field.length
2643:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 < field.length |==> i + 2 <= field.length
2644:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 < field.length |==> false
2645:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i % 2
2646:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i * 2
2647:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i - 2
2648:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 |==> i / 2
2649:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:(char)field[i + 2] == 'N' |==> (char)field[i + 2] <= 'N'
2650:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:(char)field[i + 2] == 'N' |==> (char)field[i + 2] >= 'N'
2651:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:(char)field[i + 2] == 'N' |==> false
2652:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 < field.length && (char)field[i + 2] == 'N' |==> i + 2 < field.length == ((char)field[i + 2] == 'N')
2653:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 < field.length && (char)field[i + 2] == 'N' |==> false
2654:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 < field.length && (char)field[i + 2] == 'N' |==> i + 2 < field.length
2655:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1175:i + 2 < field.length && (char)field[i + 2] == 'N' |==> (char)field[i + 2] == 'N'
2656:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1176:inCyrillic = true |==> <NO-OP>
2657:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1178:inCyrillic = false |==> <NO-OP>
2658:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i % 2
2659:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i * 2
2660:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i - 2
2661:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i / 2
2662:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length |==> i + 2 != field.length
2663:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length |==> i + 2 <= field.length
2664:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length |==> false
2665:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 1 |==> i % 1
2666:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 1 |==> i * 1
2667:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 1 |==> i - 1
2668:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 1 |==> i / 1
2669:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:field[i + 1] == '$' |==> field[i + 1] <= '$'
2670:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:field[i + 1] == '$' |==> field[i + 1] >= '$'
2671:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:field[i + 1] == '$' |==> false
2672:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' |==> i + 2 < field.length == (field[i + 1] == '$')
2673:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' |==> false
2674:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' |==> i + 2 < field.length
2675:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' |==> field[i + 1] == '$'
2676:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i % 2
2677:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i * 2
2678:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i - 2
2679:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 |==> i / 2
2680:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:field[i + 2] == '1' |==> field[i + 2] <= '1'
2681:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:field[i + 2] == '1' |==> field[i + 2] >= '1'
2682:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:field[i + 2] == '1' |==> false
2683:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' && field[i + 2] == '1' |==> (i + 2 < field.length && field[i + 1] == '$') == (field[i + 2] == '1')
2684:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' && field[i + 2] == '1' |==> false
2685:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' && field[i + 2] == '1' |==> i + 2 < field.length && field[i + 1] == '$'
2686:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1180:i + 2 < field.length && field[i + 1] == '$' && field[i + 2] == '1' |==> field[i + 2] == '1'
2687:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1181:inMultiByte = true |==> <NO-OP>
2688:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1182:mbOffset = 3 |==> <NO-OP>
2689:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i % 3
2690:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i * 3
2691:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i - 3
2692:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i / 3
2693:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length |==> i + 3 != field.length
2694:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length |==> i + 3 <= field.length
2695:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length |==> false
2696:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 1 |==> i % 1
2697:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 1 |==> i * 1
2698:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 1 |==> i - 1
2699:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 1 |==> i / 1
2700:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 1] == '$' |==> field[i + 1] <= '$'
2701:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 1] == '$' |==> field[i + 1] >= '$'
2702:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 1] == '$' |==> false
2703:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i % 2
2704:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i * 2
2705:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i - 2
2706:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i / 2
2707:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '$' |==> field[i + 2] <= '$'
2708:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '$' |==> field[i + 2] >= '$'
2709:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '$' |==> false
2710:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 1] == '$' || field[i + 2] == '$' |==> field[i + 1] == '$' != (field[i + 2] == '$')
2711:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 1] == '$' || field[i + 2] == '$' |==> field[i + 1] == '$'
2712:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 1] == '$' || field[i + 2] == '$' |==> field[i + 2] == '$'
2713:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 1] == '$' || field[i + 2] == '$' |==> true
2714:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') |==> i + 3 < field.length == (field[i + 1] == '$' || field[i + 2] == '$')
2715:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') |==> false
2716:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') |==> i + 3 < field.length
2717:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') |==> (field[i + 1] == '$' || field[i + 2] == '$')
2718:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i % 2
2719:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i * 2
2720:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i - 2
2721:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 2 |==> i / 2
2722:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '1' |==> field[i + 2] <= '1'
2723:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '1' |==> field[i + 2] >= '1'
2724:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '1' |==> false
2725:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i % 3
2726:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i * 3
2727:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i - 3
2728:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 |==> i / 3
2729:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 3] == '1' |==> field[i + 3] <= '1'
2730:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 3] == '1' |==> field[i + 3] >= '1'
2731:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 3] == '1' |==> false
2732:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '1' || field[i + 3] == '1' |==> field[i + 2] == '1' != (field[i + 3] == '1')
2733:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '1' || field[i + 3] == '1' |==> field[i + 2] == '1'
2734:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '1' || field[i + 3] == '1' |==> field[i + 3] == '1'
2735:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:field[i + 2] == '1' || field[i + 3] == '1' |==> true
2736:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') && (field[i + 2] == '1' || field[i + 3] == '1') |==> (i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$')) == (field[i + 2] == '1' || field[i + 3] == '1')
2737:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') && (field[i + 2] == '1' || field[i + 3] == '1') |==> false
2738:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') && (field[i + 2] == '1' || field[i + 3] == '1') |==> i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$')
2739:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1183:i + 3 < field.length && (field[i + 1] == '$' || field[i + 2] == '$') && (field[i + 2] == '1' || field[i + 3] == '1') |==> (field[i + 2] == '1' || field[i + 3] == '1')
2740:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1184:inMultiByte = true |==> <NO-OP>
2741:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1185:mbOffset = 4 |==> <NO-OP>
2742:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:field[i] != 32 |==> field[i] < 32
2743:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:field[i] != 32 |==> field[i] > 32
2744:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:field[i] != 32 |==> true
2745:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 |==> inMultiByte == (field[i] != 32)
2746:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 |==> false
2747:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 |==> inMultiByte
2748:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 |==> field[i] != 32
2749:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:field[i] >= 0 |==> field[i] == 0
2750:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:field[i] >= 0 |==> field[i] > 0
2751:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:field[i] >= 0 |==> true
2752:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 && field[i] >= 0 |==> (inMultiByte && field[i] != 32) == field[i] >= 0
2753:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 && field[i] >= 0 |==> false
2754:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 && field[i] >= 0 |==> inMultiByte && field[i] != 32
2755:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1188:inMultiByte && field[i] != 32 && field[i] >= 0 |==> field[i] >= 0
2756:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset == 0 |==> mbOffset <= 0
2757:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset == 0 |==> mbOffset >= 0
2758:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset == 0 |==> false
2759:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset - 1 |==> mbOffset % 1
2760:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset - 1 |==> mbOffset * 1
2761:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset - 1 |==> mbOffset + 1
2762:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset - 1 |==> mbOffset / 1
2763:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1189:mbOffset = mbOffset == 0 ? 2 : mbOffset - 1 |==> <NO-OP>
2764:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:mbOffset == 0 |==> mbOffset <= 0
2765:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:mbOffset == 0 |==> mbOffset >= 0
2766:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:mbOffset == 0 |==> false
2767:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 |==> inMultiByte == (mbOffset == 0)
2768:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 |==> false
2769:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 |==> inMultiByte
2770:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 |==> mbOffset == 0
2771:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:i + 2 |==> i % 2
2772:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:i + 2 |==> i * 2
2773:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:i + 2 |==> i - 2
2774:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:i + 2 |==> i / 2
2775:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:i + 2 < field.length |==> i + 2 != field.length
2776:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:i + 2 < field.length |==> i + 2 <= field.length
2777:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:i + 2 < field.length |==> false
2778:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length |==> (inMultiByte && mbOffset == 0) == i + 2 < field.length
2779:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length |==> false
2780:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length |==> inMultiByte && mbOffset == 0
2781:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length |==> i + 2 < field.length
2782:ROR:>(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:field[i] > 0 |==> field[i] != 0
2783:ROR:>(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:field[i] > 0 |==> field[i] >= 0
2784:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:field[i] > 0 |==> false
2785:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length && field[i] > 0 |==> (inMultiByte && mbOffset == 0 && i + 2 < field.length) == field[i] > 0
2786:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length && field[i] > 0 |==> false
2787:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length && field[i] > 0 |==> inMultiByte && mbOffset == 0 && i + 2 < field.length
2788:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1191:inMultiByte && mbOffset == 0 && i + 2 < field.length && field[i] > 0 |==> field[i] > 0
2789:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i % 1
2790:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i * 1
2791:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i - 1
2792:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i / 1
2793:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:field[i + 1] == 32 |==> field[i + 1] <= 32
2794:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:field[i + 1] == 32 |==> field[i + 1] >= 32
2795:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:field[i + 1] == 32 |==> false
2796:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 2 |==> i % 2
2797:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 2 |==> i * 2
2798:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 2 |==> i - 2
2799:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 2 |==> i / 2
2800:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i % 1
2801:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i * 1
2802:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i - 1
2803:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1194:i + 1 |==> i / 1
2804:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 1 |==> i % 1
2805:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 1 |==> i * 1
2806:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 1 |==> i - 1
2807:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 1 |==> i / 1
2808:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 1] == 32 |==> field[i + 1] <= 32
2809:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 1] == 32 |==> field[i + 1] >= 32
2810:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 1] == 32 |==> false
2811:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 2 |==> i % 2
2812:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 2 |==> i * 2
2813:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 2 |==> i - 2
2814:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 2 |==> i / 2
2815:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 2] == 32 |==> field[i + 2] <= 32
2816:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 2] == 32 |==> field[i + 2] >= 32
2817:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 2] == 32 |==> false
2818:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 1] == 32 || field[i + 2] == 32 |==> field[i + 1] == 32 != (field[i + 2] == 32)
2819:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 1] == 32 || field[i + 2] == 32 |==> field[i + 1] == 32
2820:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 1] == 32 || field[i + 2] == 32 |==> field[i + 2] == 32
2821:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:field[i + 1] == 32 || field[i + 2] == 32 |==> true
2822:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 3 |==> i % 3
2823:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 3 |==> i * 3
2824:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 3 |==> i - 3
2825:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1195:i + 3 |==> i / 3
2826:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1196:i + 2 |==> i % 2
2827:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1196:i + 2 |==> i * 2
2828:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1196:i + 2 |==> i - 2
2829:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1196:i + 2 |==> i / 2
2830:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1197:f1 == Constants.US |==> f1 <= Constants.US
2831:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1197:f1 == Constants.US |==> f1 >= Constants.US
2832:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1197:f1 == Constants.US |==> false
2833:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1198:f2 == Constants.US |==> f2 <= Constants.US
2834:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1198:f2 == Constants.US |==> f2 >= Constants.US
2835:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1198:f2 == Constants.US |==> false
2836:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1198:f3 == Constants.US |==> f3 <= Constants.US
2837:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1198:f3 == Constants.US |==> f3 >= Constants.US
2838:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1198:f3 == Constants.US |==> false
2839:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1200:c == 0 |==> c <= 0
2840:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1200:c == 0 |==> c >= 0
2841:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1200:c == 0 |==> false
2842:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1200:c == 0 && !justCleaned |==> c == 0 == !justCleaned
2843:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1200:c == 0 && !justCleaned |==> false
2844:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1200:c == 0 && !justCleaned |==> c == 0
2845:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1200:c == 0 && !justCleaned |==> !justCleaned
2846:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1201:addError(MarcError.MAJOR_ERROR, "Bad Multibyte character found, reinterpreting data as non-multibyte data") |==> <NO-OP>
2847:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1203:inMultiByte = false |==> <NO-OP>
2848:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1204:c == 0 |==> c <= 0
2849:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1204:c == 0 |==> c >= 0
2850:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1204:c == 0 |==> false
2851:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1204:c == 0 && justCleaned |==> c == 0 == justCleaned
2852:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1204:c == 0 && justCleaned |==> false
2853:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1204:c == 0 && justCleaned |==> c == 0
2854:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1204:c == 0 && justCleaned |==> justCleaned
2855:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1205:f2 == Constants.US |==> f2 <= Constants.US
2856:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1205:f2 == Constants.US |==> f2 >= Constants.US
2857:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1205:f2 == Constants.US |==> false
2858:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1206:f3 == Constants.US |==> f3 <= Constants.US
2859:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1206:f3 == Constants.US |==> f3 >= Constants.US
2860:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1206:f3 == Constants.US |==> false
2861:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1205:c = conv.getMBChar(conv.makeMultibyte('!', (char)(f2 == Constants.US ? 124 : f2), (char)(f3 == Constants.US ? 124 : f3))) |==> <NO-OP>
2862:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1207:c == 0 |==> c <= 0
2863:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1207:c == 0 |==> c >= 0
2864:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1207:c == 0 |==> false
2865:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1208:addError(MarcError.MAJOR_ERROR, "Bad Multibyte character found, reinterpreting data as non-multibyte data") |==> <NO-OP>
2866:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1210:inMultiByte = false |==> <NO-OP>
2867:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1212:addError(MarcError.MAJOR_ERROR, "Character after restored vertical bar character makes bad multibyte character, changing it to \"!\"") |==> <NO-OP>
2868:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1215:field[i] = '!' |==> <NO-OP>
2869:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1219:justCleaned = false |==> <NO-OP>
2870:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1220:field[i] == Constants.US |==> field[i] <= Constants.US
2871:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1220:field[i] == Constants.US |==> field[i] >= Constants.US
2872:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1220:field[i] == Constants.US |==> false
2873:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1221:mbOffset != 0 |==> mbOffset < 0
2874:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1221:mbOffset != 0 |==> mbOffset > 0
2875:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1221:mbOffset != 0 |==> true
2876:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1221:inMultiByte && mbOffset != 0 |==> inMultiByte == (mbOffset != 0)
2877:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1221:inMultiByte && mbOffset != 0 |==> false
2878:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1221:inMultiByte && mbOffset != 0 |==> inMultiByte
2879:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1221:inMultiByte && mbOffset != 0 |==> mbOffset != 0
2880:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1222:field[i] = 124 |==> <NO-OP>
2881:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1223:addError(MarcError.MAJOR_ERROR, "Subfield separator found in middle of a multibyte character, changing it to a vertical bar, and continuing") |==> <NO-OP>
2882:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1226:i + 1 |==> i % 1
2883:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1226:i + 1 |==> i * 1
2884:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1226:i + 1 |==> i - 1
2885:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1226:i + 1 |==> i / 1
2886:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1226:field[i + 1] == '0' |==> field[i + 1] <= '0'
2887:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1226:field[i + 1] == '0' |==> field[i + 1] >= '0'
2888:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1226:field[i + 1] == '0' |==> false
2889:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 2 |==> i % 2
2890:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 2 |==> i * 2
2891:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 2 |==> i - 2
2892:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 2 |==> i / 2
2893:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 2] == '(' |==> field[i + 2] <= '('
2894:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 2] == '(' |==> field[i + 2] >= '('
2895:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 2] == '(' |==> false
2896:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 3 |==> i % 3
2897:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 3 |==> i * 3
2898:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 3 |==> i - 3
2899:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:i + 3 |==> i / 3
2900:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 3] == 'B' |==> field[i + 3] <= 'B'
2901:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 3] == 'B' |==> field[i + 3] >= 'B'
2902:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 3] == 'B' |==> false
2903:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 2] == '(' && field[i + 3] == 'B' |==> field[i + 2] == '(' == (field[i + 3] == 'B')
2904:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 2] == '(' && field[i + 3] == 'B' |==> false
2905:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 2] == '(' && field[i + 3] == 'B' |==> field[i + 2] == '('
2906:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1227:field[i + 2] == '(' && field[i + 3] == 'B' |==> field[i + 3] == 'B'
2907:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1228:i + 1 |==> i % 1
2908:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1228:i + 1 |==> i * 1
2909:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1228:i + 1 |==> i - 1
2910:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1228:i + 1 |==> i / 1
2911:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1228:field[i + 1] = 27 |==> <NO-OP>
2912:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1229:addError(MarcError.MAJOR_ERROR, "Character after restored vertical bar character makes bad multibyte character, changing it to ESC") |==> <NO-OP>
2913:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1232:i + 1 |==> i % 1
2914:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1232:i + 1 |==> i * 1
2915:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1232:i + 1 |==> i - 1
2916:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1232:i + 1 |==> i / 1
2917:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1232:field[i + 1] = 33 |==> <NO-OP>
2918:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1233:addError(MarcError.MAJOR_ERROR, "Character after restored vertical bar character makes bad multibyte character, changing it to \"!\"") |==> <NO-OP>
2919:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1238:justCleaned = true |==> <NO-OP>
2920:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1239:hasEsc && inCyrillic |==> hasEsc == inCyrillic
2921:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1239:hasEsc && inCyrillic |==> false
2922:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1239:hasEsc && inCyrillic |==> hasEsc
2923:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1239:hasEsc && inCyrillic |==> inCyrillic
2924:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen % 1
2925:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen * 1
2926:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen + 1
2927:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen / 1
2928:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:i - (flen - 1) |==> i % (flen - 1)
2929:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:i - (flen - 1) |==> i * (flen - 1)
2930:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:i - (flen - 1) |==> i + (flen - 1)
2931:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:i - (flen - 1) |==> i / (flen - 1)
2932:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen % 1
2933:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen * 1
2934:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen + 1
2935:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1240:flen - 1 |==> flen / 1
2936:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i % 1
2937:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i * 1
2938:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i - 1
2939:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i / 1
2940:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] >= 'a' |==> field[i + 1] == 'a'
2941:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] >= 'a' |==> field[i + 1] > 'a'
2942:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] >= 'a' |==> true
2943:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i % 1
2944:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i * 1
2945:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i - 1
2946:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:i + 1 |==> i / 1
2947:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] <= 'z' |==> field[i + 1] < 'z'
2948:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] <= 'z' |==> field[i + 1] == 'z'
2949:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] <= 'z' |==> true
2950:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> field[i + 1] >= 'a' == field[i + 1] <= 'z'
2951:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> false
2952:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> field[i + 1] >= 'a'
2953:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> field[i + 1] <= 'z'
2954:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:!(field[i + 1] >= 'a' && field[i + 1] <= 'z') || prev.equals("\u001b(N") |==> !(field[i + 1] >= 'a' && field[i + 1] <= 'z') != prev.equals("\u001b(N")
2955:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:!(field[i + 1] >= 'a' && field[i + 1] <= 'z') || prev.equals("\u001b(N") |==> !(field[i + 1] >= 'a' && field[i + 1] <= 'z')
2956:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:!(field[i + 1] >= 'a' && field[i + 1] <= 'z') || prev.equals("\u001b(N") |==> prev.equals("\u001b(N")
2957:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1242:!(field[i + 1] >= 'a' && field[i + 1] <= 'z') || prev.equals("\u001b(N") |==> true
2958:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1243:addError(MarcError.MINOR_ERROR, "Subfield separator found in Cyrillic string, changing separator to a vertical bar, and continuing") |==> <NO-OP>
2959:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1245:field[i] = 124 |==> <NO-OP>
2960:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1246:justCleaned = true |==> <NO-OP>
2961:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i % 1
2962:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i * 1
2963:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i - 1
2964:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i / 1
2965:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' |==> field[i + 1] == 'a'
2966:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' |==> field[i + 1] > 'a'
2967:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' |==> true
2968:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i % 1
2969:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i * 1
2970:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i - 1
2971:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i / 1
2972:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] <= 'z' |==> field[i + 1] < 'z'
2973:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] <= 'z' |==> field[i + 1] == 'z'
2974:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] <= 'z' |==> true
2975:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> field[i + 1] >= 'a' == field[i + 1] <= 'z'
2976:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> false
2977:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> field[i + 1] >= 'a'
2978:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' |==> field[i + 1] <= 'z'
2979:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i % 1
2980:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i * 1
2981:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i - 1
2982:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i / 1
2983:ROR:>=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= '0' |==> field[i + 1] == '0'
2984:ROR:>=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= '0' |==> field[i + 1] > '0'
2985:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= '0' |==> true
2986:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i % 1
2987:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i * 1
2988:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i - 1
2989:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:i + 1 |==> i / 1
2990:ROR:<=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] <= '9' |==> field[i + 1] < '9'
2991:ROR:<=(int,int):==(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] <= '9' |==> field[i + 1] == '9'
2992:ROR:<=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] <= '9' |==> true
2993:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= '0' && field[i + 1] <= '9' |==> field[i + 1] >= '0' == field[i + 1] <= '9'
2994:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= '0' && field[i + 1] <= '9' |==> false
2995:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= '0' && field[i + 1] <= '9' |==> field[i + 1] >= '0'
2996:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= '0' && field[i + 1] <= '9' |==> field[i + 1] <= '9'
2997:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9' |==> (field[i + 1] >= 'a' && field[i + 1] <= 'z') != (field[i + 1] >= '0' && field[i + 1] <= '9')
2998:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9' |==> field[i + 1] >= 'a' && field[i + 1] <= 'z'
2999:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9' |==> field[i + 1] >= '0' && field[i + 1] <= '9'
3000:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9' |==> true
3001:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:hasEsc && !(field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9') |==> hasEsc == !(field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9')
3002:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:hasEsc && !(field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9') |==> false
3003:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:hasEsc && !(field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9') |==> hasEsc
3004:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1248:hasEsc && !(field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9') |==> !(field[i + 1] >= 'a' && field[i + 1] <= 'z' || field[i + 1] >= '0' && field[i + 1] <= '9')
3005:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1249:addError(MarcError.MAJOR_ERROR, "Subfield separator followed by invalid subfield tag, changing separator to a vertical bar, and continuing") |==> <NO-OP>
3006:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1252:field[i] = 124 |==> <NO-OP>
3007:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1253:justCleaned = true |==> <NO-OP>
3008:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field.length - 3 |==> field.length % 3
3009:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field.length - 3 |==> field.length * 3
3010:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field.length - 3 |==> field.length + 3
3011:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field.length - 3 |==> field.length / 3
3012:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i < field.length - 3 |==> i != field.length - 3
3013:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i < field.length - 3 |==> i <= field.length - 3
3014:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i < field.length - 3 |==> false
3015:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 |==> hasEsc == i < field.length - 3
3016:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 |==> false
3017:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 |==> hasEsc
3018:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 |==> i < field.length - 3
3019:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 1 |==> i % 1
3020:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 1 |==> i * 1
3021:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 1 |==> i - 1
3022:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 1 |==> i / 1
3023:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 1] == '0' |==> field[i + 1] <= '0'
3024:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 1] == '0' |==> field[i + 1] >= '0'
3025:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 1] == '0' |==> false
3026:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' |==> (hasEsc && i < field.length - 3) == (field[i + 1] == '0')
3027:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' |==> false
3028:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' |==> hasEsc && i < field.length - 3
3029:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' |==> field[i + 1] == '0'
3030:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 2 |==> i % 2
3031:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 2 |==> i * 2
3032:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 2 |==> i - 2
3033:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 2 |==> i / 2
3034:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 2] == '(' |==> field[i + 2] <= '('
3035:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 2] == '(' |==> field[i + 2] >= '('
3036:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 2] == '(' |==> false
3037:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' |==> (hasEsc && i < field.length - 3 && field[i + 1] == '0') == (field[i + 2] == '(')
3038:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' |==> false
3039:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' |==> hasEsc && i < field.length - 3 && field[i + 1] == '0'
3040:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' |==> field[i + 2] == '('
3041:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 3 |==> i % 3
3042:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 3 |==> i * 3
3043:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 3 |==> i - 3
3044:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:i + 3 |==> i / 3
3045:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 3] == 'B' |==> field[i + 3] <= 'B'
3046:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 3] == 'B' |==> field[i + 3] >= 'B'
3047:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:field[i + 3] == 'B' |==> false
3048:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' && field[i + 3] == 'B' |==> (hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(') == (field[i + 3] == 'B')
3049:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' && field[i + 3] == 'B' |==> false
3050:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' && field[i + 3] == 'B' |==> hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '('
3051:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1254:hasEsc && i < field.length - 3 && field[i + 1] == '0' && field[i + 2] == '(' && field[i + 3] == 'B' |==> field[i + 3] == 'B'
3052:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1255:addError(MarcError.MAJOR_ERROR, "Subfield separator followed by invalid subfield tag, changing separator to a vertical bar, and continuing") |==> <NO-OP>
3053:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1258:field[i] = 124 |==> <NO-OP>
3054:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1259:i + 1 |==> i % 1
3055:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1259:i + 1 |==> i * 1
3056:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1259:i + 1 |==> i - 1
3057:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1259:i + 1 |==> i / 1
3058:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1259:field[i + 1] = 27 |==> <NO-OP>
3059:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1260:justCleaned = true |==> <NO-OP>
3060:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:i + 1 |==> i % 1
3061:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:i + 1 |==> i * 1
3062:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:i + 1 |==> i - 1
3063:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:i + 1 |==> i / 1
3064:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:field[i + 1] == '0' |==> field[i + 1] <= '0'
3065:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:field[i + 1] == '0' |==> field[i + 1] >= '0'
3066:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:field[i + 1] == '0' |==> false
3067:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:hasEsc && field[i + 1] == '0' |==> hasEsc == (field[i + 1] == '0')
3068:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:hasEsc && field[i + 1] == '0' |==> false
3069:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:hasEsc && field[i + 1] == '0' |==> hasEsc
3070:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1261:hasEsc && field[i + 1] == '0' |==> field[i + 1] == '0'
3071:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1262:addError(MarcError.MAJOR_ERROR, "Subfield separator followed by invalid subfield tag, changing separator to a vertical bar, and continuing") |==> <NO-OP>
3072:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1265:field[i] = 124 |==> <NO-OP>
3073:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1266:i + 1 |==> i % 1
3074:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1266:i + 1 |==> i * 1
3075:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1266:i + 1 |==> i - 1
3076:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1266:i + 1 |==> i / 1
3077:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1266:field[i + 1] = 33 |==> <NO-OP>
3078:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1267:justCleaned = true |==> <NO-OP>
3079:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 1 |==> i % 1
3080:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 1 |==> i * 1
3081:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 1 |==> i - 1
3082:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 1 |==> i / 1
3083:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 1] == Constants.US |==> field[i + 1] <= Constants.US
3084:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 1] == Constants.US |==> field[i + 1] >= Constants.US
3085:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 1] == Constants.US |==> false
3086:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 2 |==> i % 2
3087:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 2 |==> i * 2
3088:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 2 |==> i - 2
3089:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:i + 2 |==> i / 2
3090:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 2] == Constants.US |==> field[i + 2] <= Constants.US
3091:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 2] == Constants.US |==> field[i + 2] >= Constants.US
3092:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 2] == Constants.US |==> false
3093:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 1] == Constants.US && field[i + 2] == Constants.US |==> field[i + 1] == Constants.US == (field[i + 2] == Constants.US)
3094:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 1] == Constants.US && field[i + 2] == Constants.US |==> false
3095:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 1] == Constants.US && field[i + 2] == Constants.US |==> field[i + 1] == Constants.US
3096:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1268:field[i + 1] == Constants.US && field[i + 2] == Constants.US |==> field[i + 2] == Constants.US
3097:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1269:addError(MarcError.MAJOR_ERROR, "Three consecutive subfield separators, changing first two to vertical bars.") |==> <NO-OP>
3098:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1271:field[i] = 124 |==> <NO-OP>
3099:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1272:i + 1 |==> i % 1
3100:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1272:i + 1 |==> i * 1
3101:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1272:i + 1 |==> i - 1
3102:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1272:i + 1 |==> i / 1
3103:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1272:field[i + 1] = 124 |==> <NO-OP>
3104:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1273:justCleaned = true |==> <NO-OP>
3105:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1277:field[i] == Constants.US |==> field[i] <= Constants.US
3106:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1277:field[i] == Constants.US |==> field[i] >= Constants.US
3107:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1277:field[i] == Constants.US |==> false
3108:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1278:flen = 0 |==> <NO-OP>
3109:STD:<INC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@cleanupBadFieldSeperators(byte[],org.marc4j.marc.Record):1280:flen++ |==> <NO-OP>
3110:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1286:bais.mark(9999) |==> <NO-OP>
3111:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1291:bais.reset() |==> <NO-OP>
3112:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1292:return bytesRead; |==> <NO-OP>
3113:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1294:bais.reset() |==> <NO-OP>
3114:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1295:permissive |==> false
3115:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1295:permissive |==> true
3116:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1296:addError(MarcError.MINOR_ERROR, "Field not terminated trying to continue") |==> <NO-OP>
3117:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1297:return bytesRead; |==> <NO-OP>
3118:STD:<INC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getFieldLength(java.io.DataInputStream):1303:bytesRead++ |==> <NO-OP>
3119:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1309:bais.mark(9999) |==> <NO-OP>
3120:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1316:bais.reset() |==> <NO-OP>
3121:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1317:return bytesRead; |==> <NO-OP>
3122:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1319:bais.reset() |==> <NO-OP>
3123:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1320:return bytesRead; |==> <NO-OP>
3124:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1322:bais.reset() |==> <NO-OP>
3125:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1323:permissive |==> false
3126:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1323:permissive |==> true
3127:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1324:addError(MarcError.MINOR_ERROR, "Subfield not terminated trying to continue") |==> <NO-OP>
3128:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1326:return bytesRead; |==> <NO-OP>
3129:STD:<INC>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):1331:bytesRead++ |==> <NO-OP>
3130:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecordLength(byte[]):1340:isr.read(tmp) |==> <NO-OP>
3131:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecordLength(byte[]):1343:length = Integer.parseInt(new String(tmp)) |==> <NO-OP>
3132:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseRecordLength(byte[]):1345:addError(MarcError.FATAL, "Unable to parse record length, Unable to Continue") |==> <NO-OP>
3133:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1357:isr.read(tmp) |==> <NO-OP>
3134:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1360:ldr.setRecordStatus((char)isr.read()) |==> <NO-OP>
3135:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1361:ldr.setTypeOfRecord((char)isr.read()) |==> <NO-OP>
3136:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1362:tmp = new char[2] |==> <NO-OP>
3137:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1363:isr.read(tmp) |==> <NO-OP>
3138:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1364:ldr.setImplDefined1(tmp) |==> <NO-OP>
3139:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1365:ldr.setCharCodingScheme((char)isr.read()) |==> <NO-OP>
3140:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1371:isr.read(baseAddr) |==> <NO-OP>
3141:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1372:tmp = new char[3] |==> <NO-OP>
3142:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1373:isr.read(tmp) |==> <NO-OP>
3143:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1374:ldr.setImplDefined2(tmp) |==> <NO-OP>
3144:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1375:tmp = new char[4] |==> <NO-OP>
3145:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1376:isr.read(tmp) |==> <NO-OP>
3146:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1377:ldr.setEntryMap(tmp) |==> <NO-OP>
3147:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1378:isr.close() |==> <NO-OP>
3148:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1381:ldr.setIndicatorCount(Integer.parseInt(String.valueOf(indicatorCount))) |==> <NO-OP>
3149:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1383:permissive |==> false
3150:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1383:permissive |==> true
3151:LOR:&(int,int):^(int,int):org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1386:indicatorCount & 255 |==> indicatorCount ^ 255
3152:LOR:&(int,int):|(int,int):org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1386:indicatorCount & 255 |==> indicatorCount | 255
3153:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1385:addError(MarcError.ERROR_TYPO, "bogus indicator count - byte value =  " + Integer.toHexString(indicatorCount & 255)) |==> <NO-OP>
3154:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1387:ldr.setIndicatorCount(2) |==> <NO-OP>
3155:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1393:ldr.setSubfieldCodeLength(Integer.parseInt(String.valueOf(subfieldCodeLength))) |==> <NO-OP>
3156:COR:permissive:TRUE:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1395:permissive |==> false
3157:COR:permissive:FALSE:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1395:permissive |==> true
3158:LOR:&(int,int):^(int,int):org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1398:subfieldCodeLength & 255 |==> subfieldCodeLength ^ 255
3159:LOR:&(int,int):|(int,int):org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1398:subfieldCodeLength & 255 |==> subfieldCodeLength | 255
3160:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1397:addError(MarcError.ERROR_TYPO, "bogus subfield count - byte value =  " + Integer.toHexString(subfieldCodeLength & 255)) |==> <NO-OP>
3161:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1399:ldr.setSubfieldCodeLength(2) |==> <NO-OP>
3162:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):1406:ldr.setBaseAddressOfData(Integer.parseInt(new String(baseAddr))) |==> <NO-OP>
3163:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1416:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> encoding.equals("UTF-8") != encoding.equals("UTF8")
3164:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1416:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> encoding.equals("UTF-8")
3165:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1416:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> encoding.equals("UTF8")
3166:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1416:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> true
3167:COR:encoding.equals("UTF8-Maybe"):TRUE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1422:encoding.equals("UTF8-Maybe") |==> false
3168:COR:encoding.equals("UTF8-Maybe"):FALSE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1422:encoding.equals("UTF8-Maybe") |==> true
3169:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1428:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> encoding.equals("MARC-8") != encoding.equals("MARC8")
3170:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1428:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> encoding.equals("MARC-8")
3171:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1428:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> encoding.equals("MARC8")
3172:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1428:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> true
3173:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1429:dataElement = getMarc8Conversion(bytes) |==> <NO-OP>
3174:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1430:encoding.equalsIgnoreCase("Unimarc") || encoding.equals("IS05426") |==> encoding.equalsIgnoreCase("Unimarc") != encoding.equals("IS05426")
3175:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1430:encoding.equalsIgnoreCase("Unimarc") || encoding.equals("IS05426") |==> encoding.equalsIgnoreCase("Unimarc")
3176:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1430:encoding.equalsIgnoreCase("Unimarc") || encoding.equals("IS05426") |==> encoding.equals("IS05426")
3177:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1430:encoding.equalsIgnoreCase("Unimarc") || encoding.equals("IS05426") |==> true
3178:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1431:dataElement = getUnimarcConversion(bytes) |==> <NO-OP>
3179:COR:encoding.equals("MARC8-Maybe"):TRUE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1432:encoding.equals("MARC8-Maybe") |==> false
3180:COR:encoding.equals("MARC8-Maybe"):FALSE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1432:encoding.equals("MARC8-Maybe") |==> true
3181:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1442:e.printStackTrace() |==> <NO-OP>
3182:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1444:dataElement1.equals(dataElement2) && dataElement1.equals(dataElement3) |==> dataElement1.equals(dataElement2) == dataElement1.equals(dataElement3)
3183:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1444:dataElement1.equals(dataElement2) && dataElement1.equals(dataElement3) |==> false
3184:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1444:dataElement1.equals(dataElement2) && dataElement1.equals(dataElement3) |==> dataElement1.equals(dataElement2)
3185:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1444:dataElement1.equals(dataElement2) && dataElement1.equals(dataElement3) |==> dataElement1.equals(dataElement3)
3186:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1445:dataElement = dataElement1 |==> <NO-OP>
3187:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1447:conversionCheck1 = conversionCheck1 + "|>" + Normalizer.normalize(dataElement1, Normalizer.Form.NFC) |==> <NO-OP>
3188:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1449:conversionCheck2 = conversionCheck2 + "|>" + dataElement2 |==> <NO-OP>
3189:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1450:conversionCheck3 = conversionCheck3 + "|>" + dataElement3 |==> <NO-OP>
3190:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1451:dataElement = dataElement1 + "%%@%%" + dataElement2 + "%%@%%" + dataElement3 |==> <NO-OP>
3191:COR:encoding.equals("MARC8-Broken"):TRUE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1453:encoding.equals("MARC8-Broken") |==> false
3192:COR:encoding.equals("MARC8-Broken"):FALSE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1453:encoding.equals("MARC8-Broken") |==> true
3193:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1458:e.printStackTrace() |==> <NO-OP>
3194:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1463:newdataElement = newdataElement.replaceAll("&gt;", ">") |==> <NO-OP>
3195:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1464:newdataElement = newdataElement.replaceAll("&amp;", "&") |==> <NO-OP>
3196:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1465:newdataElement = newdataElement.replaceAll("&apos;", "\'") |==> <NO-OP>
3197:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1466:newdataElement = newdataElement.replaceAll("&quot;", "\"") |==> <NO-OP>
3198:COR:newdataElement.equals(dataElement):TRUE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1468:newdataElement.equals(dataElement) |==> false
3199:COR:newdataElement.equals(dataElement):FALSE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1468:newdataElement.equals(dataElement) |==> true
3200:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1469:dataElement = newdataElement |==> <NO-OP>
3201:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1470:addError(MarcError.ERROR_TYPO, "Subfield contains escaped html character entities, un-escaping them. ") |==> <NO-OP>
3202:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1477:newdataElement = dataElement.replaceAll("\\$1(.)", rep1) |==> <NO-OP>
3203:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1478:newdataElement = newdataElement.replaceAll("\\(B", rep2) |==> <NO-OP>
3204:COR:newdataElement.equals(dataElement):TRUE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1480:newdataElement.equals(dataElement) |==> false
3205:COR:newdataElement.equals(dataElement):FALSE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1480:newdataElement.equals(dataElement) |==> true
3206:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1481:dataElement = newdataElement |==> <NO-OP>
3207:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1482:addError(MarcError.MAJOR_ERROR, "Subfield seems to be missing MARC8 escape sequences, trying to restore them.") |==> <NO-OP>
3208:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1490:e.printStackTrace() |==> <NO-OP>
3209:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1492:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> encoding.equals("ISO-8859-1") != encoding.equals("ISO8859_1")
3210:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1492:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> encoding.equals("ISO-8859-1")
3211:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1492:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> encoding.equals("ISO8859_1")
3212:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1492:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> true
3213:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1507:record != null |==> true
3214:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1507:record != null && dataElement.matches("[^&]*&[a-z]*;.*") |==> record != null == dataElement.matches("[^&]*&[a-z]*;.*")
3215:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1507:record != null && dataElement.matches("[^&]*&[a-z]*;.*") |==> false
3216:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1507:record != null && dataElement.matches("[^&]*&[a-z]*;.*") |==> record != null
3217:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1507:record != null && dataElement.matches("[^&]*&[a-z]*;.*") |==> dataElement.matches("[^&]*&[a-z]*;.*")
3218:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1510:newdataElement = newdataElement.replaceAll("&gt;", ">") |==> <NO-OP>
3219:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1511:newdataElement = newdataElement.replaceAll("&amp;", "&") |==> <NO-OP>
3220:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1512:newdataElement = newdataElement.replaceAll("&apos;", "\'") |==> <NO-OP>
3221:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1513:newdataElement = newdataElement.replaceAll("&quot;", "\"") |==> <NO-OP>
3222:COR:newdataElement.equals(dataElement):TRUE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1515:newdataElement.equals(dataElement) |==> false
3223:COR:newdataElement.equals(dataElement):FALSE:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1515:newdataElement.equals(dataElement) |==> true
3224:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1516:dataElement = newdataElement |==> <NO-OP>
3225:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getDataAsString(byte[]):1517:addError(MarcError.ERROR_TYPO, "Subfield contains escaped html character entities, un-escaping them. ") |==> <NO-OP>
3226:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1525:bytes.length - seq.length |==> bytes.length % seq.length
3227:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1525:bytes.length - seq.length |==> bytes.length * seq.length
3228:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1525:bytes.length - seq.length |==> bytes.length + seq.length
3229:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1525:bytes.length - seq.length |==> bytes.length / seq.length
3230:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1525:i < bytes.length - seq.length |==> i != bytes.length - seq.length
3231:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1525:i < bytes.length - seq.length |==> i <= bytes.length - seq.length
3232:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1525:i < bytes.length - seq.length |==> false
3233:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1526:bytes[i] == seq[0] |==> bytes[i] <= seq[0]
3234:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1526:bytes[i] == seq[0] |==> bytes[i] >= seq[0]
3235:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1526:bytes[i] == seq[0] |==> false
3236:ROR:<(int,int):!=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1527:j < seq.length |==> j != seq.length
3237:ROR:<(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1527:j < seq.length |==> j <= seq.length
3238:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1527:j < seq.length |==> false
3239:AOR:+(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1528:i + j |==> i % j
3240:AOR:+(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1528:i + j |==> i * j
3241:AOR:+(int,int):-(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1528:i + j |==> i - j
3242:AOR:+(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1528:i + j |==> i / j
3243:ROR:!=(int,int):<(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1528:bytes[i + j] != seq[j] |==> bytes[i + j] < seq[j]
3244:ROR:!=(int,int):>(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1528:bytes[i + j] != seq[j] |==> bytes[i + j] > seq[j]
3245:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1528:bytes[i + j] != seq[j] |==> true
3246:STD:<BREAK>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1529:break; |==> <NO-OP>
3247:AOR:-(int,int):%(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1532:seq.length - 1 |==> seq.length % 1
3248:AOR:-(int,int):*(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1532:seq.length - 1 |==> seq.length * 1
3249:AOR:-(int,int):+(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1532:seq.length - 1 |==> seq.length + 1
3250:AOR:-(int,int):/(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1532:seq.length - 1 |==> seq.length / 1
3251:ROR:==(int,int):<=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1532:j == seq.length - 1 |==> j <= seq.length - 1
3252:ROR:==(int,int):>=(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1532:j == seq.length - 1 |==> j >= seq.length - 1
3253:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1532:j == seq.length - 1 |==> false
3254:STD:<RETURN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@byteArrayContains(byte[],byte[]):1533:return true; |==> <NO-OP>
3255:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar) |==> byteArrayContains(bytes, badEsc) != byteArrayContains(bytes, overbar)
3256:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar) |==> byteArrayContains(bytes, badEsc)
3257:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar) |==> byteArrayContains(bytes, overbar)
3258:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar) |==> true
3259:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:permissive && (byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar)) |==> permissive == (byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar))
3260:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:permissive && (byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar)) |==> false
3261:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:permissive && (byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar)) |==> permissive
3262:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1560:permissive && (byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar)) |==> (byteArrayContains(bytes, badEsc) || byteArrayContains(bytes, overbar))
3263:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1565:newDataElement = dataElement.replaceAll("(\\e)b-\\es([psb$()])", "$1$2") |==> <NO-OP>
3264:COR:newDataElement.equals(dataElement):TRUE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1567:newDataElement.equals(dataElement) |==> false
3265:COR:newDataElement.equals(dataElement):FALSE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1567:newDataElement.equals(dataElement) |==> true
3266:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1568:dataElement = newDataElement |==> <NO-OP>
3267:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1569:addError(MarcError.MINOR_ERROR, "Subfield contains odd pattern of subscript or superscript escapes. ") |==> <NO-OP>
3268:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1573:newDataElement = dataElement.replace((char)175, (char)229) |==> <NO-OP>
3269:COR:newDataElement.equals(dataElement):TRUE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1575:newDataElement.equals(dataElement) |==> false
3270:COR:newDataElement.equals(dataElement):FALSE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1575:newDataElement.equals(dataElement) |==> true
3271:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1576:dataElement = newDataElement |==> <NO-OP>
3272:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1577:addError(MarcError.ERROR_TYPO, "Subfield contains 0xaf overbar character, changing it to proper MARC8 representation ") |==> <NO-OP>
3273:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1581:dataElement = conv.convert(dataElement) |==> <NO-OP>
3274:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1584:e.printStackTrace() |==> <NO-OP>
3275:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1587:dataElement = conv.convert(bytes) |==> <NO-OP>
3276:COR:doNCR:TRUE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1590:doNCR |==> false
3277:COR:doNCR:FALSE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1590:doNCR |==> true
3278:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1594:permissive && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][^;].*") |==> permissive == dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][^;].*")
3279:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1594:permissive && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][^;].*") |==> false
3280:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1594:permissive && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][^;].*") |==> permissive
3281:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1594:permissive && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][^;].*") |==> dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][^;].*")
3282:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1604:newElement.append(dataElement.substring(prevEnd, matcher.start())) |==> <NO-OP>
3283:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1605:newElement.append(getChar(matcher.group(1))) |==> <NO-OP>
3284:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1607:matcher.group(1).contains("%x") || !matcher.group(1).endsWith(";") |==> matcher.group(1).contains("%x") != !matcher.group(1).endsWith(";")
3285:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1607:matcher.group(1).contains("%x") || !matcher.group(1).endsWith(";") |==> matcher.group(1).contains("%x")
3286:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1607:matcher.group(1).contains("%x") || !matcher.group(1).endsWith(";") |==> !matcher.group(1).endsWith(";")
3287:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1607:matcher.group(1).contains("%x") || !matcher.group(1).endsWith(";") |==> true
3288:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1608:addError(MarcError.MINOR_ERROR, "Subfield contains malformed Unicode Numeric Character Reference : " + matcher.group(0)) |==> <NO-OP>
3289:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1613:prevEnd = matcher.end() |==> <NO-OP>
3290:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1616:newElement.append(dataElement.substring(prevEnd)) |==> <NO-OP>
3291:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[],org.marc4j.converter.impl.AnselToUnicode,boolean,org.marc4j.marc.Record,boolean):1617:dataElement = newElement.toString() |==> <NO-OP>
3292:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[]):1626:converterAnsel == null |==> false
3293:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[]):1627:converterAnsel = new AnselToUnicode(this) |==> <NO-OP>
3294:COR:isTranslateLosslessUnicodeNumericCodeReferencesEnabled():TRUE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[]):1629:isTranslateLosslessUnicodeNumericCodeReferencesEnabled() |==> false
3295:COR:isTranslateLosslessUnicodeNumericCodeReferencesEnabled():FALSE:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[]):1629:isTranslateLosslessUnicodeNumericCodeReferencesEnabled() |==> true
3296:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[]):1631:anselConverter.setTranslateNCR(isTranslateLosslessUnicodeNumericCodeReferencesEnabled()) |==> <NO-OP>
3297:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getMarc8Conversion(byte[]):1634:dataElement = getMarc8Conversion(bytes, converterAnsel, permissive, record, translateLosslessUnicodeNumericCodeReferencesEnabled) |==> <NO-OP>
3298:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1640:converterUnimarc == null |==> false
3299:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1641:converterUnimarc = new Iso5426ToUnicode() |==> <NO-OP>
3300:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1646:dataElement = dataElement.replaceAll("\u0088", "") |==> <NO-OP>
3301:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1647:dataElement = dataElement.replaceAll("\u0089", "") |==> <NO-OP>
3302:COR:dataElement.matches("[^<]*<U[+][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]>.*"):TRUE:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1649:dataElement.matches("[^<]*<U[+][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]>.*") |==> false
3303:COR:dataElement.matches("[^<]*<U[+][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]>.*"):FALSE:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1649:dataElement.matches("[^<]*<U[+][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]>.*") |==> true
3304:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1658:newElement.append(dataElement.substring(prevEnd, matcher.start())) |==> <NO-OP>
3305:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1659:newElement.append(getChar(matcher.group(1))) |==> <NO-OP>
3306:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1660:prevEnd = matcher.end() |==> <NO-OP>
3307:STD:<CALL>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1663:newElement.append(dataElement.substring(prevEnd)) |==> <NO-OP>
3308:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcPermissiveStreamReader@getUnimarcConversion(byte[]):1664:dataElement = newElement.toString() |==> <NO-OP>
3309:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode$Queue@put(java.lang.Character):61:addElement(item) |==> <NO-OP>
3310:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode$Queue@get():72:removeElementAt(0) |==> <NO-OP>
3311:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode$Queue@empty():88:size() == 0 |==> size() <= 0
3312:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode$Queue@empty():88:size() == 0 |==> size() >= 0
3313:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode$Queue@empty():88:size() == 0 |==> false
3314:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@setTranslateNCR(boolean):135:this.translateNCR = translateNCR |==> <NO-OP>
3315:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>():155:ct = loadGeneratedTable(false) |==> <NO-OP>
3316:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>(boolean):164:ct = loadGeneratedTable(loadMultibyte) |==> <NO-OP>
3317:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>(org.marc4j.MarcPermissiveStreamReader):174:ct = loadGeneratedTable(false) |==> <NO-OP>
3318:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>(org.marc4j.MarcPermissiveStreamReader):175:this.curReader = curReader |==> <NO-OP>
3319:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@loadGeneratedTable(boolean):185:loadedMultibyte = true |==> <NO-OP>
3320:COR:loadMultibyte:TRUE:org.marc4j.converter.impl.AnselToUnicode@loadGeneratedTable(boolean):190:loadMultibyte |==> false
3321:COR:loadMultibyte:FALSE:org.marc4j.converter.impl.AnselToUnicode@loadGeneratedTable(boolean):190:loadMultibyte |==> true
3322:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@loadGeneratedTable(boolean):198:loadedMultibyte = loadMultibyte |==> <NO-OP>
3323:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>(java.lang.String):213:ct = new CodeTable(pathname) |==> <NO-OP>
3324:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>(java.lang.String):214:loadedMultibyte = true |==> <NO-OP>
3325:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>(java.io.InputStream):227:ct = new CodeTable(in) |==> <NO-OP>
3326:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@<init>(java.io.InputStream):228:loadedMultibyte = true |==> <NO-OP>
3327:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@loadMultibyte():235:ct = new CodeTable(getClass().getResourceAsStream("resources/codetables.xml")) |==> <NO-OP>
3328:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra |==> cdt.offset % extra
3329:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra |==> cdt.offset * extra
3330:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra |==> cdt.offset - extra
3331:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra |==> cdt.offset / extra
3332:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 |==> (cdt.offset + extra) % extra2
3333:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 |==> (cdt.offset + extra) * extra2
3334:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 |==> cdt.offset + extra - extra2
3335:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 |==> (cdt.offset + extra) / extra2
3336:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 < data.length |==> cdt.offset + extra + extra2 != data.length
3337:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 < data.length |==> cdt.offset + extra + extra2 <= data.length
3338:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 < data.length |==> false
3339:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 < data.length && isEscape(data[cdt.offset]) |==> cdt.offset + extra + extra2 < data.length == isEscape(data[cdt.offset])
3340:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 < data.length && isEscape(data[cdt.offset]) |==> false
3341:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 < data.length && isEscape(data[cdt.offset]) |==> cdt.offset + extra + extra2 < data.length
3342:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):242:cdt.offset + extra + extra2 < data.length && isEscape(data[cdt.offset]) |==> isEscape(data[cdt.offset])
3343:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra |==> cdt.offset % extra
3344:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra |==> cdt.offset * extra
3345:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra |==> cdt.offset - extra
3346:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra |==> cdt.offset / extra
3347:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 |==> (cdt.offset + extra) % extra2
3348:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 |==> (cdt.offset + extra) * extra2
3349:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 |==> cdt.offset + extra - extra2
3350:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 |==> (cdt.offset + extra) / extra2
3351:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 + 1 |==> (cdt.offset + extra + extra2) % 1
3352:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 + 1 |==> (cdt.offset + extra + extra2) * 1
3353:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 + 1 |==> cdt.offset + extra + extra2 - 1
3354:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 + 1 |==> (cdt.offset + extra + extra2) / 1
3355:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 + 1 == data.length |==> cdt.offset + extra + extra2 + 1 <= data.length
3356:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 + 1 == data.length |==> cdt.offset + extra + extra2 + 1 >= data.length
3357:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):243:cdt.offset + extra + extra2 + 1 == data.length |==> false
3358:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):244:cdt.offset += 1 |==> <NO-OP>
3359:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):245:curReader != null |==> true
3360:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):246:curReader.addError(MarcError.MINOR_ERROR, "Escape character found at end of field, discarding it.") |==> <NO-OP>
3361:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):252:break; |==> <NO-OP>
3362:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 |==> cdt.offset % 1
3363:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 |==> cdt.offset * 1
3364:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 |==> cdt.offset - 1
3365:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 |==> cdt.offset / 1
3366:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 + extra |==> (cdt.offset + 1) % extra
3367:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 + extra |==> (cdt.offset + 1) * extra
3368:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 + extra |==> cdt.offset + 1 - extra
3369:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):255:cdt.offset + 1 + extra |==> (cdt.offset + 1) / extra
3370:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):258:2 + extra |==> 2 % extra
3371:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):258:2 + extra |==> 2 * extra
3372:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):258:2 + extra |==> 2 - extra
3373:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):258:2 + extra |==> 2 / extra
3374:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):258:set_cdt(cdt, 0, data, 2 + extra, false) |==> <NO-OP>
3375:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):259:break; |==> <NO-OP>
3376:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):262:2 + extra |==> 2 % extra
3377:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):262:2 + extra |==> 2 * extra
3378:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):262:2 + extra |==> 2 - extra
3379:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):262:2 + extra |==> 2 / extra
3380:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):262:set_cdt(cdt, 1, data, 2 + extra, false) |==> <NO-OP>
3381:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):263:break; |==> <NO-OP>
3382:COR:loadedMultibyte:TRUE:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):265:loadedMultibyte |==> false
3383:COR:loadedMultibyte:FALSE:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):265:loadedMultibyte |==> true
3384:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):266:loadMultibyte() |==> <NO-OP>
3385:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):267:loadedMultibyte = true |==> <NO-OP>
3386:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 |==> cdt.offset % 2
3387:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 |==> cdt.offset * 2
3388:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 |==> cdt.offset - 2
3389:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 |==> cdt.offset / 2
3390:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra |==> (cdt.offset + 2) % extra
3391:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra |==> (cdt.offset + 2) * extra
3392:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra |==> cdt.offset + 2 - extra
3393:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra |==> (cdt.offset + 2) / extra
3394:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra + extra2 |==> (cdt.offset + 2 + extra) % extra2
3395:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra + extra2 |==> (cdt.offset + 2 + extra) * extra2
3396:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra + extra2 |==> cdt.offset + 2 + extra - extra2
3397:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):270:cdt.offset + 2 + extra + extra2 |==> (cdt.offset + 2 + extra) / extra2
3398:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):271:switchOffset >= data.length |==> switchOffset == data.length
3399:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):271:switchOffset >= data.length |==> switchOffset > data.length
3400:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):271:switchOffset >= data.length |==> true
3401:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):272:cdt.offset += 1 |==> <NO-OP>
3402:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):273:curReader != null |==> true
3403:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):274:curReader.addError(MarcError.MINOR_ERROR, "Incomplete character set code found following escape character. Discarding escape character.") |==> <NO-OP>
3404:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):278:break; |==> <NO-OP>
3405:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra |==> 3 % extra
3406:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra |==> 3 * extra
3407:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra |==> 3 - extra
3408:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra |==> 3 / extra
3409:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra + extra2 |==> (3 + extra) % extra2
3410:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra + extra2 |==> (3 + extra) * extra2
3411:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra + extra2 |==> 3 + extra - extra2
3412:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):283:3 + extra + extra2 |==> (3 + extra) / extra2
3413:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):284:cdt.offset + offset2d |==> cdt.offset % offset2d
3414:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):284:cdt.offset + offset2d |==> cdt.offset * offset2d
3415:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):284:cdt.offset + offset2d |==> cdt.offset - offset2d
3416:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):284:cdt.offset + offset2d |==> cdt.offset / offset2d
3417:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):284:cdt.offset + offset2d >= data.length |==> cdt.offset + offset2d == data.length
3418:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):284:cdt.offset + offset2d >= data.length |==> cdt.offset + offset2d > data.length
3419:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):284:cdt.offset + offset2d >= data.length |==> true
3420:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):285:cdt.offset += 1 |==> <NO-OP>
3421:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):286:curReader != null |==> true
3422:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):287:curReader.addError(MarcError.MINOR_ERROR, "Incomplete character set code found following escape character. Discarding escape character.") |==> <NO-OP>
3423:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):291:break; |==> <NO-OP>
3424:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):293:set_cdt(cdt, 1, data, offset2d, true) |==> <NO-OP>
3425:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra |==> 3 % extra
3426:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra |==> 3 * extra
3427:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra |==> 3 - extra
3428:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra |==> 3 / extra
3429:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra + extra2 |==> (3 + extra) % extra2
3430:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra + extra2 |==> (3 + extra) * extra2
3431:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra + extra2 |==> 3 + extra - extra2
3432:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):296:3 + extra + extra2 |==> (3 + extra) / extra2
3433:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):297:cdt.offset + offset2c |==> cdt.offset % offset2c
3434:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):297:cdt.offset + offset2c |==> cdt.offset * offset2c
3435:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):297:cdt.offset + offset2c |==> cdt.offset - offset2c
3436:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):297:cdt.offset + offset2c |==> cdt.offset / offset2c
3437:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):297:cdt.offset + offset2c >= data.length |==> cdt.offset + offset2c == data.length
3438:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):297:cdt.offset + offset2c >= data.length |==> cdt.offset + offset2c > data.length
3439:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):297:cdt.offset + offset2c >= data.length |==> true
3440:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):298:cdt.offset += 1 |==> <NO-OP>
3441:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):299:curReader != null |==> true
3442:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):300:curReader.addError(MarcError.MINOR_ERROR, "Incomplete character set code found following escape character. Discarding escape character.") |==> <NO-OP>
3443:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):304:break; |==> <NO-OP>
3444:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):306:set_cdt(cdt, 0, data, offset2c, true) |==> <NO-OP>
3445:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 |==> cdt.offset % 2
3446:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 |==> cdt.offset * 2
3447:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 |==> cdt.offset - 2
3448:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 |==> cdt.offset / 2
3449:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra |==> (cdt.offset + 2) % extra
3450:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra |==> (cdt.offset + 2) * extra
3451:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra |==> cdt.offset + 2 - extra
3452:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra |==> (cdt.offset + 2) / extra
3453:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra + extra2 |==> (cdt.offset + 2 + extra) % extra2
3454:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra + extra2 |==> (cdt.offset + 2 + extra) * extra2
3455:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra + extra2 |==> cdt.offset + 2 + extra - extra2
3456:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.offset + 2 + extra + extra2 |==> (cdt.offset + 2 + extra) / extra2
3457:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):309:cdt.g0 = data[cdt.offset + 2 + extra + extra2] |==> <NO-OP>
3458:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra |==> 3 % extra
3459:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra |==> 3 * extra
3460:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra |==> 3 - extra
3461:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra |==> 3 / extra
3462:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra + extra2 |==> (3 + extra) % extra2
3463:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra + extra2 |==> (3 + extra) * extra2
3464:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra + extra2 |==> 3 + extra - extra2
3465:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:3 + extra + extra2 |==> (3 + extra) / extra2
3466:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):310:cdt.offset += 3 + extra + extra2 |==> <NO-OP>
3467:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):311:cdt.multibyte = true |==> <NO-OP>
3468:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):312:break; |==> <NO-OP>
3469:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):316:extra2++ |==> <NO-OP>
3470:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):317:break; |==> <NO-OP>
3471:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):321:cdt.offset += 1 |==> <NO-OP>
3472:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):323:curReader != null |==> true
3473:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):324:curReader.addError(MarcError.MINOR_ERROR, "Unknown character set code found following escape character. Discarding escape character.") |==> <NO-OP>
3474:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):331:break; |==> <NO-OP>
3475:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 |==> cdt.offset % 1
3476:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 |==> cdt.offset * 1
3477:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 |==> cdt.offset - 1
3478:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 |==> cdt.offset / 1
3479:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 + extra |==> (cdt.offset + 1) % extra
3480:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 + extra |==> (cdt.offset + 1) * extra
3481:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 + extra |==> cdt.offset + 1 - extra
3482:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.offset + 1 + extra |==> (cdt.offset + 1) / extra
3483:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):338:cdt.g0 = data[cdt.offset + 1 + extra] |==> <NO-OP>
3484:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):339:2 + extra |==> 2 % extra
3485:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):339:2 + extra |==> 2 * extra
3486:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):339:2 + extra |==> 2 - extra
3487:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):339:2 + extra |==> 2 / extra
3488:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):339:cdt.offset += 2 + extra |==> <NO-OP>
3489:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):340:cdt.multibyte = false |==> <NO-OP>
3490:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):341:break; |==> <NO-OP>
3491:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):343:cdt.g0 = 66 |==> <NO-OP>
3492:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):344:2 + extra |==> 2 % extra
3493:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):344:2 + extra |==> 2 * extra
3494:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):344:2 + extra |==> 2 - extra
3495:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):344:2 + extra |==> 2 / extra
3496:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):344:cdt.offset += 2 + extra |==> <NO-OP>
3497:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):345:cdt.multibyte = false |==> <NO-OP>
3498:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):346:break; |==> <NO-OP>
3499:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):349:curReader == null |==> false
3500:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):353:extra++ |==> <NO-OP>
3501:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):354:break; |==> <NO-OP>
3502:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):358:cdt.offset += 1 |==> <NO-OP>
3503:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):360:curReader != null |==> true
3504:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):361:curReader.addError(MarcError.MINOR_ERROR, "Unknown character set code found following escape character. Discarding escape character.") |==> <NO-OP>
3505:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):368:break; |==> <NO-OP>
3506:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:curReader != null |==> true
3507:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra != 0 |==> extra < 0
3508:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra != 0 |==> extra > 0
3509:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra != 0 |==> true
3510:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra2 != 0 |==> extra2 < 0
3511:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra2 != 0 |==> extra2 > 0
3512:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra2 != 0 |==> true
3513:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra != 0 || extra2 != 0 |==> extra != 0 != (extra2 != 0)
3514:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra != 0 || extra2 != 0 |==> extra != 0
3515:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra != 0 || extra2 != 0 |==> extra2 != 0
3516:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:extra != 0 || extra2 != 0 |==> true
3517:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:curReader != null && (extra != 0 || extra2 != 0) |==> curReader != null == (extra != 0 || extra2 != 0)
3518:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:curReader != null && (extra != 0 || extra2 != 0) |==> false
3519:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:curReader != null && (extra != 0 || extra2 != 0) |==> curReader != null
3520:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):371:curReader != null && (extra != 0 || extra2 != 0) |==> (extra != 0 || extra2 != 0)
3521:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):373:extra + extra2 |==> extra % extra2
3522:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):373:extra + extra2 |==> extra * extra2
3523:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):373:extra + extra2 |==> extra - extra2
3524:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):373:extra + extra2 |==> extra / extra2
3525:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@checkMode(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):372:curReader.addError(MarcError.ERROR_TYPO, "" + (extra + extra2) + " extraneous space characters found within MARC8 character set escape sequence") |==> <NO-OP>
3526:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset % addnlOffset
3527:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset * addnlOffset
3528:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset - addnlOffset
3529:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset / addnlOffset
3530:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset] == '!' |==> data[cdt.offset + addnlOffset] <= '!'
3531:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset] == '!' |==> data[cdt.offset + addnlOffset] >= '!'
3532:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset] == '!' |==> false
3533:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset % addnlOffset
3534:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset * addnlOffset
3535:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset - addnlOffset
3536:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset |==> cdt.offset / addnlOffset
3537:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset + 1 |==> (cdt.offset + addnlOffset) % 1
3538:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset + 1 |==> (cdt.offset + addnlOffset) * 1
3539:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset + 1 |==> cdt.offset + addnlOffset - 1
3540:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:cdt.offset + addnlOffset + 1 |==> (cdt.offset + addnlOffset) / 1
3541:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset + 1] == 'E' |==> data[cdt.offset + addnlOffset + 1] <= 'E'
3542:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset + 1] == 'E' |==> data[cdt.offset + addnlOffset + 1] >= 'E'
3543:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset + 1] == 'E' |==> false
3544:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset] == '!' && data[cdt.offset + addnlOffset + 1] == 'E' |==> data[cdt.offset + addnlOffset] == '!' == (data[cdt.offset + addnlOffset + 1] == 'E')
3545:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset] == '!' && data[cdt.offset + addnlOffset + 1] == 'E' |==> false
3546:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset] == '!' && data[cdt.offset + addnlOffset + 1] == 'E' |==> data[cdt.offset + addnlOffset] == '!'
3547:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):381:data[cdt.offset + addnlOffset] == '!' && data[cdt.offset + addnlOffset + 1] == 'E' |==> data[cdt.offset + addnlOffset + 1] == 'E'
3548:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):382:addnlOffset++ |==> <NO-OP>
3549:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):383:cdt.offset + addnlOffset |==> cdt.offset % addnlOffset
3550:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):383:cdt.offset + addnlOffset |==> cdt.offset * addnlOffset
3551:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):383:cdt.offset + addnlOffset |==> cdt.offset - addnlOffset
3552:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):383:cdt.offset + addnlOffset |==> cdt.offset / addnlOffset
3553:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):383:data[cdt.offset + addnlOffset] == ' ' |==> data[cdt.offset + addnlOffset] <= ' '
3554:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):383:data[cdt.offset + addnlOffset] == ' ' |==> data[cdt.offset + addnlOffset] >= ' '
3555:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):383:data[cdt.offset + addnlOffset] == ' ' |==> false
3556:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):384:curReader != null |==> true
3557:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):385:curReader.addError(MarcError.ERROR_TYPO, "Extraneous space character found within MARC8 character set escape sequence. Skipping over space.") |==> <NO-OP>
3558:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):391:addnlOffset++ |==> <NO-OP>
3559:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):392:cdt.offset + addnlOffset |==> cdt.offset % addnlOffset
3560:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):392:cdt.offset + addnlOffset |==> cdt.offset * addnlOffset
3561:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):392:cdt.offset + addnlOffset |==> cdt.offset - addnlOffset
3562:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):392:cdt.offset + addnlOffset |==> cdt.offset / addnlOffset
3563:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):392:"(,)-$!".indexOf(data[cdt.offset + addnlOffset]) != -1 |==> "(,)-$!".indexOf(data[cdt.offset + addnlOffset]) < -1
3564:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):392:"(,)-$!".indexOf(data[cdt.offset + addnlOffset]) != -1 |==> "(,)-$!".indexOf(data[cdt.offset + addnlOffset]) > -1
3565:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):392:"(,)-$!".indexOf(data[cdt.offset + addnlOffset]) != -1 |==> true
3566:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):393:curReader != null |==> true
3567:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):394:curReader.addError(MarcError.MINOR_ERROR, "Extraneaous intermediate character found following escape character. Discarding intermediate character.") |==> <NO-OP>
3568:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):401:addnlOffset++ |==> <NO-OP>
3569:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):404:cdt.offset + addnlOffset |==> cdt.offset % addnlOffset
3570:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):404:cdt.offset + addnlOffset |==> cdt.offset * addnlOffset
3571:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):404:cdt.offset + addnlOffset |==> cdt.offset - addnlOffset
3572:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):404:cdt.offset + addnlOffset |==> cdt.offset / addnlOffset
3573:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):404:"34BE1NQS2".indexOf(data[cdt.offset + addnlOffset]) == -1 |==> "34BE1NQS2".indexOf(data[cdt.offset + addnlOffset]) <= -1
3574:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):404:"34BE1NQS2".indexOf(data[cdt.offset + addnlOffset]) == -1 |==> "34BE1NQS2".indexOf(data[cdt.offset + addnlOffset]) >= -1
3575:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):404:"34BE1NQS2".indexOf(data[cdt.offset + addnlOffset]) == -1 |==> false
3576:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):405:cdt.offset += 1 |==> <NO-OP>
3577:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):406:cdt.multibyte = false |==> <NO-OP>
3578:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):408:curReader != null |==> true
3579:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):409:curReader.addError(MarcError.MINOR_ERROR, "Unknown character set code found following escape character. Discarding escape character.") |==> <NO-OP>
3580:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):417:g0_or_g1 == 0 |==> g0_or_g1 <= 0
3581:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):417:g0_or_g1 == 0 |==> g0_or_g1 >= 0
3582:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):417:g0_or_g1 == 0 |==> false
3583:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):418:cdt.offset + addnlOffset |==> cdt.offset % addnlOffset
3584:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):418:cdt.offset + addnlOffset |==> cdt.offset * addnlOffset
3585:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):418:cdt.offset + addnlOffset |==> cdt.offset - addnlOffset
3586:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):418:cdt.offset + addnlOffset |==> cdt.offset / addnlOffset
3587:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):418:cdt.g0 = data[cdt.offset + addnlOffset] |==> <NO-OP>
3588:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):420:cdt.offset + addnlOffset |==> cdt.offset % addnlOffset
3589:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):420:cdt.offset + addnlOffset |==> cdt.offset * addnlOffset
3590:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):420:cdt.offset + addnlOffset |==> cdt.offset - addnlOffset
3591:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):420:cdt.offset + addnlOffset |==> cdt.offset / addnlOffset
3592:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):420:cdt.g1 = data[cdt.offset + addnlOffset] |==> <NO-OP>
3593:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):423:1 + addnlOffset |==> 1 % addnlOffset
3594:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):423:1 + addnlOffset |==> 1 * addnlOffset
3595:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):423:1 + addnlOffset |==> 1 - addnlOffset
3596:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):423:1 + addnlOffset |==> 1 / addnlOffset
3597:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):423:cdt.offset += 1 + addnlOffset |==> <NO-OP>
3598:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@set_cdt(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,int,char[],int,boolean):424:cdt.multibyte = multibyte |==> <NO-OP>
3599:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):442:cdt.g0 = 66 |==> <NO-OP>
3600:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):443:cdt.g1 = 69 |==> <NO-OP>
3601:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):444:cdt.multibyte = false |==> <NO-OP>
3602:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):445:cdt.offset = 0 |==> <NO-OP>
3603:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):447:checkMode(data, cdt) |==> <NO-OP>
3604:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):451:cdt.offset < data.length |==> cdt.offset != data.length
3605:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):451:cdt.offset < data.length |==> cdt.offset <= data.length
3606:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):451:cdt.offset < data.length |==> false
3607:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):452:ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) == hasNext(cdt.offset, len)
3608:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):452:ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> false
3609:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):452:ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1)
3610:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):452:ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> hasNext(cdt.offset, len)
3611:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len |==> cdt.offset != len
3612:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len |==> cdt.offset <= len
3613:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len |==> false
3614:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) |==> cdt.offset < len == ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1)
3615:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) |==> false
3616:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) |==> cdt.offset < len
3617:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) |==> ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1)
3618:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> (cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1)) == hasNext(cdt.offset, len)
3619:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> false
3620:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):453:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1)
3621:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):454:cdt.offset < len && ct.isCombining(data[cdt.offset], cdt.g0, cdt.g1) && hasNext(cdt.offset, len) |==> hasNext(cdt.offset, len)
3622:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):456:c != 0 |==> c < 0
3623:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):456:c != 0 |==> c > 0
3624:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):456:c != 0 |==> true
3625:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):457:diacritics.put(new Character(c)) |==> <NO-OP>
3626:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):459:checkMode(data, cdt) |==> <NO-OP>
3627:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):461:cdt.offset >= len |==> cdt.offset == len
3628:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):461:cdt.offset >= len |==> cdt.offset > len
3629:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):461:cdt.offset >= len |==> true
3630:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):462:curReader != null |==> true
3631:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):463:curReader.addError(MarcError.MINOR_ERROR, "Diacritic found at the end of field, without the character that it is supposed to decorate") |==> <NO-OP>
3632:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):465:break; |==> <NO-OP>
3633:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):471:checkMode(data, cdt) |==> <NO-OP>
3634:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):473:c2 != 0 |==> c2 < 0
3635:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):473:c2 != 0 |==> c2 > 0
3636:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):473:c2 != 0 |==> true
3637:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):474:sb.append(c2) |==> <NO-OP>
3638:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):479:sb.append(c1) |==> <NO-OP>
3639:COR:cdt.multibyte:TRUE:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):482:cdt.multibyte |==> false
3640:COR:cdt.multibyte:FALSE:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):482:cdt.multibyte |==> true
3641:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):484:sb.append(mbstr) |==> <NO-OP>
3642:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null |==> true
3643:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:cdt.g0 == 83 |==> cdt.g0 <= 83
3644:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:cdt.g0 == 83 |==> cdt.g0 >= 83
3645:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:cdt.g0 == 83 |==> false
3646:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 |==> curReader != null == (cdt.g0 == 83)
3647:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 |==> false
3648:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 |==> curReader != null
3649:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 |==> cdt.g0 == 83
3650:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:data[offset] > 32 |==> data[offset] != 32
3651:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:data[offset] > 32 |==> data[offset] >= 32
3652:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:data[offset] > 32 |==> false
3653:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 |==> (curReader != null && cdt.g0 == 83) == data[offset] > 32
3654:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 |==> false
3655:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 |==> curReader != null && cdt.g0 == 83
3656:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 |==> data[offset] > 32
3657:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:data[offset] < 64 |==> data[offset] != 64
3658:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:data[offset] < 64 |==> data[offset] <= 64
3659:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:data[offset] < 64 |==> false
3660:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 && data[offset] < 64 |==> (curReader != null && cdt.g0 == 83 && data[offset] > 32) == data[offset] < 64
3661:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 && data[offset] < 64 |==> false
3662:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 && data[offset] < 64 |==> curReader != null && cdt.g0 == 83 && data[offset] > 32
3663:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):492:curReader != null && cdt.g0 == 83 && data[offset] > 32 && data[offset] < 64 |==> data[offset] < 64
3664:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 |==> c <= 0
3665:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 |==> c >= 0
3666:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 |==> false
3667:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:data[offset] > 32 |==> data[offset] != 32
3668:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:data[offset] > 32 |==> data[offset] >= 32
3669:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:data[offset] > 32 |==> false
3670:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 |==> c == 0 == data[offset] > 32
3671:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 |==> false
3672:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 |==> c == 0
3673:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 |==> data[offset] > 32
3674:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:data[offset] < 64 |==> data[offset] != 64
3675:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:data[offset] < 64 |==> data[offset] <= 64
3676:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:data[offset] < 64 |==> false
3677:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 && data[offset] < 64 |==> (c == 0 && data[offset] > 32) == data[offset] < 64
3678:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 && data[offset] < 64 |==> false
3679:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 && data[offset] < 64 |==> c == 0 && data[offset] > 32
3680:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):493:c == 0 && data[offset] > 32 && data[offset] < 64 |==> data[offset] < 64
3681:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):494:curReader.addError(MarcError.MINOR_ERROR, "Unknown punctuation mark found in Greek character set, inserting change to default character set") |==> <NO-OP>
3682:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):496:cdt.g0 = 66 |==> <NO-OP>
3683:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):497:c = getChar(data[offset], cdt.g0, cdt.g1) |==> <NO-OP>
3684:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):499:c != 0 |==> c < 0
3685:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):499:c != 0 |==> c > 0
3686:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):499:c != 0 |==> true
3687:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):500:sb.append(c) |==> <NO-OP>
3688:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):501:greekErrorFixed = true |==> <NO-OP>
3689:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset % 1
3690:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset * 1
3691:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset - 1
3692:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset / 1
3693:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length |==> offset + 1 != data.length
3694:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length |==> offset + 1 <= data.length
3695:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length |==> false
3696:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset] >= '0' |==> data[offset] == '0'
3697:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset] >= '0' |==> data[offset] > '0'
3698:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset] >= '0' |==> true
3699:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' |==> offset + 1 < data.length == data[offset] >= '0'
3700:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' |==> false
3701:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' |==> offset + 1 < data.length
3702:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' |==> data[offset] >= '0'
3703:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset] <= '9' |==> data[offset] < '9'
3704:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset] <= '9' |==> data[offset] == '9'
3705:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset] <= '9' |==> true
3706:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' |==> (offset + 1 < data.length && data[offset] >= '0') == data[offset] <= '9'
3707:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' |==> false
3708:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' |==> offset + 1 < data.length && data[offset] >= '0'
3709:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' |==> data[offset] <= '9'
3710:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset % 1
3711:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset * 1
3712:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset - 1
3713:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset / 1
3714:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset + 1] >= '0' |==> data[offset + 1] == '0'
3715:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset + 1] >= '0' |==> data[offset + 1] > '0'
3716:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset + 1] >= '0' |==> true
3717:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' |==> (offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9') == data[offset + 1] >= '0'
3718:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' |==> false
3719:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' |==> offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9'
3720:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' |==> data[offset + 1] >= '0'
3721:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset % 1
3722:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset * 1
3723:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset - 1
3724:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 |==> offset / 1
3725:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset + 1] <= '9' |==> data[offset + 1] < '9'
3726:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset + 1] <= '9' |==> data[offset + 1] == '9'
3727:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:data[offset + 1] <= '9' |==> true
3728:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' && data[offset + 1] <= '9' |==> (offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0') == data[offset + 1] <= '9'
3729:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' && data[offset + 1] <= '9' |==> false
3730:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' && data[offset + 1] <= '9' |==> offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0'
3731:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):503:offset + 1 < data.length && data[offset] >= '0' && data[offset] <= '9' && data[offset + 1] >= '0' && data[offset + 1] <= '9' |==> data[offset + 1] <= '9'
3732:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):504:curReader.addError(MarcError.MINOR_ERROR, "Unlikely sequence of punctuation mark found in Greek character set, it likely a number, inserting change to default character set") |==> <NO-OP>
3733:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):507:cdt.g0 = 66 |==> <NO-OP>
3734:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):511:c1 != 0 |==> c1 < 0
3735:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):511:c1 != 0 |==> c1 > 0
3736:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):511:c1 != 0 |==> true
3737:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):512:sb.append(c1) |==> <NO-OP>
3738:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):513:greekErrorFixed = true |==> <NO-OP>
3739:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):518:c != 0 |==> c < 0
3740:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):518:c != 0 |==> c > 0
3741:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):518:c != 0 |==> true
3742:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):518:!greekErrorFixed && c != 0 |==> !greekErrorFixed == (c != 0)
3743:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):518:!greekErrorFixed && c != 0 |==> false
3744:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):518:!greekErrorFixed && c != 0 |==> !greekErrorFixed
3745:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):518:!greekErrorFixed && c != 0 |==> c != 0
3746:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):519:sb.append(c) |==> <NO-OP>
3747:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):520:c == 0 |==> c <= 0
3748:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):520:c == 0 |==> c >= 0
3749:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):520:c == 0 |==> false
3750:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):520:!greekErrorFixed && c == 0 |==> !greekErrorFixed == (c == 0)
3751:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):520:!greekErrorFixed && c == 0 |==> false
3752:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):520:!greekErrorFixed && c == 0 |==> !greekErrorFixed
3753:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):520:!greekErrorFixed && c == 0 |==> c == 0
3754:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):522:val.length() - 4 |==> val.length() % 4
3755:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):522:val.length() - 4 |==> val.length() * 4
3756:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):522:val.length() - 4 |==> val.length() + 4
3757:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):522:val.length() - 4 |==> val.length() / 4
3758:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):522:sb.append("<U+" + val.substring(val.length() - 4, val.length()) + ">") |==> <NO-OP>
3759:COR:hasNext(cdt.offset, len):TRUE:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):526:hasNext(cdt.offset, len) |==> false
3760:COR:hasNext(cdt.offset, len):FALSE:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):526:hasNext(cdt.offset, len) |==> true
3761:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):527:checkMode(data, cdt) |==> <NO-OP>
3762:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):533:translateNCR && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];.*") |==> translateNCR == dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];.*")
3763:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):533:translateNCR && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];.*") |==> false
3764:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):533:translateNCR && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];.*") |==> translateNCR
3765:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convert(char[]):533:translateNCR && dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];.*") |==> dataElement.matches("[^&]*&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];.*")
3766:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):543:newElement.append(dataElement.substring(prevEnd, matcher.start())) |==> <NO-OP>
3767:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):544:newElement.append(getCharFromCodePoint(matcher.group(1))) |==> <NO-OP>
3768:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):545:prevEnd = matcher.end() |==> <NO-OP>
3769:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):548:newElement.append(dataElement.substring(prevEnd)) |==> <NO-OP>
3770:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convert(char[]):549:dataElement = newElement.toString() |==> <NO-OP>
3771:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:offset < data.length |==> offset != data.length
3772:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:offset < data.length |==> offset <= data.length
3773:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:offset < data.length |==> false
3774:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:data[offset] != 27 |==> data[offset] < 27
3775:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:data[offset] != 27 |==> data[offset] > 27
3776:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:data[offset] != 27 |==> true
3777:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:offset < data.length && data[offset] != 27 |==> offset < data.length == (data[offset] != 27)
3778:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:offset < data.length && data[offset] != 27 |==> false
3779:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:offset < data.length && data[offset] != 27 |==> offset < data.length
3780:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):560:offset < data.length && data[offset] != 27 |==> data[offset] != 27
3781:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:length - spaces |==> length % spaces
3782:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:length - spaces |==> length * spaces
3783:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:length - spaces |==> length + spaces
3784:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:length - spaces |==> length / spaces
3785:AOR:%(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:(length - spaces) % 3 |==> (length - spaces) * 3
3786:AOR:%(int,int):+(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:(length - spaces) % 3 |==> (length - spaces) + 3
3787:AOR:%(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:(length - spaces) % 3 |==> (length - spaces) - 3
3788:AOR:%(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:(length - spaces) % 3 |==> (length - spaces) / 3
3789:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:(length - spaces) % 3 != 0 |==> (length - spaces) % 3 < 0
3790:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:(length - spaces) % 3 != 0 |==> (length - spaces) % 3 > 0
3791:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):566:(length - spaces) % 3 != 0 |==> true
3792:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):567:errorsPresent = true |==> <NO-OP>
3793:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):572:data[offset] == 32 |==> data[offset] <= 32
3794:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):572:data[offset] == 32 |==> data[offset] >= 32
3795:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):572:data[offset] == 32 |==> false
3796:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):573:sb.append(' ') |==> <NO-OP>
3797:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):574:offset++ |==> <NO-OP>
3798:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):575:data[offset] >= 128 |==> data[offset] == 128
3799:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):575:data[offset] >= 128 |==> data[offset] > 128
3800:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):575:data[offset] >= 128 |==> true
3801:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):577:sb.append(c2) |==> <NO-OP>
3802:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):578:offset += 1 |==> <NO-OP>
3803:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):579:curReader == null |==> false
3804:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):580:offset + 3 |==> offset % 3
3805:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):580:offset + 3 |==> offset * 3
3806:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):580:offset + 3 |==> offset - 3
3807:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):580:offset + 3 |==> offset / 3
3808:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):580:offset + 3 <= data.length |==> offset + 3 < data.length
3809:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):580:offset + 3 <= data.length |==> offset + 3 == data.length
3810:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):580:offset + 3 <= data.length |==> true
3811:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):581:offset + 1 |==> offset % 1
3812:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):581:offset + 1 |==> offset * 1
3813:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):581:offset + 1 |==> offset - 1
3814:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):581:offset + 1 |==> offset / 1
3815:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):582:offset + 2 |==> offset % 2
3816:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):582:offset + 2 |==> offset * 2
3817:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):582:offset + 2 |==> offset - 2
3818:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):582:offset + 2 |==> offset / 2
3819:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):583:c != 0 |==> c < 0
3820:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):583:c != 0 |==> c > 0
3821:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):583:c != 0 |==> true
3822:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):584:sb.append(c) |==> <NO-OP>
3823:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):585:offset += 3 |==> <NO-OP>
3824:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):587:sb.append(data[offset]) |==> <NO-OP>
3825:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):588:offset + 1 |==> offset % 1
3826:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):588:offset + 1 |==> offset * 1
3827:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):588:offset + 1 |==> offset - 1
3828:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):588:offset + 1 |==> offset / 1
3829:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):588:sb.append(data[offset + 1]) |==> <NO-OP>
3830:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):589:offset + 2 |==> offset % 2
3831:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):589:offset + 2 |==> offset * 2
3832:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):589:offset + 2 |==> offset - 2
3833:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):589:offset + 2 |==> offset / 2
3834:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):589:sb.append(data[offset + 2]) |==> <NO-OP>
3835:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):590:offset += 3 |==> <NO-OP>
3836:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):593:offset < data.length |==> offset != data.length
3837:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):593:offset < data.length |==> offset <= data.length
3838:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):593:offset < data.length |==> false
3839:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):594:sb.append(data[offset++]) |==> <NO-OP>
3840:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false |==> false
3841:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false |==> errorsPresent
3842:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false |==> false
3843:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 3 |==> offset % 3
3844:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 3 |==> offset * 3
3845:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 3 |==> offset - 3
3846:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 3 |==> offset / 3
3847:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 3 <= data.length |==> offset + 3 < data.length
3848:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 3 <= data.length |==> offset + 3 == data.length
3849:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 3 <= data.length |==> true
3850:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length |==> errorsPresent == false == offset + 3 <= data.length
3851:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length |==> false
3852:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length |==> errorsPresent == false
3853:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length |==> offset + 3 <= data.length
3854:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:curReader == null |==> false
3855:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 1 |==> offset % 1
3856:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 1 |==> offset * 1
3857:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 1 |==> offset - 1
3858:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 1 |==> offset / 1
3859:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 1] != 32 |==> data[offset + 1] < 32
3860:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 1] != 32 |==> data[offset + 1] > 32
3861:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 1] != 32 |==> true
3862:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 2 |==> offset % 2
3863:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 2 |==> offset * 2
3864:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 2 |==> offset - 2
3865:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:offset + 2 |==> offset / 2
3866:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 2] != 32 |==> data[offset + 2] < 32
3867:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 2] != 32 |==> data[offset + 2] > 32
3868:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 2] != 32 |==> true
3869:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 1] != 32 && data[offset + 2] != 32 |==> data[offset + 1] != 32 == (data[offset + 2] != 32)
3870:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 1] != 32 && data[offset + 2] != 32 |==> false
3871:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 1] != 32 && data[offset + 2] != 32 |==> data[offset + 1] != 32
3872:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:data[offset + 1] != 32 && data[offset + 2] != 32 |==> data[offset + 2] != 32
3873:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32 |==> curReader == null != (data[offset + 1] != 32 && data[offset + 2] != 32)
3874:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32 |==> curReader == null
3875:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32 |==> data[offset + 1] != 32 && data[offset + 2] != 32
3876:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32 |==> true
3877:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) |==> (errorsPresent == false && offset + 3 <= data.length) == (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32)
3878:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) |==> false
3879:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) |==> errorsPresent == false && offset + 3 <= data.length
3880:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) |==> (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32)
3881:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 1 |==> offset % 1
3882:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 1 |==> offset * 1
3883:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 1 |==> offset - 1
3884:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 1 |==> offset / 1
3885:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 2 |==> offset % 2
3886:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 2 |==> offset * 2
3887:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 2 |==> offset - 2
3888:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:offset + 2 |==> offset / 2
3889:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0 |==> getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) < 0
3890:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0 |==> getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) > 0
3891:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):598:getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0 |==> true
3892:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) && getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0 |==> (errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32)) == (getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0)
3893:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) && getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0 |==> false
3894:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) && getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0 |==> errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32)
3895:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):597:errorsPresent == false && offset + 3 <= data.length && (curReader == null || data[offset + 1] != 32 && data[offset + 2] != 32) && getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0 |==> getMBChar(makeMultibyte(data[offset], data[offset + 1], data[offset + 2])) != 0
3896:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):599:offset + 1 |==> offset % 1
3897:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):599:offset + 1 |==> offset * 1
3898:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):599:offset + 1 |==> offset - 1
3899:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):599:offset + 1 |==> offset / 1
3900:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):600:offset + 2 |==> offset % 2
3901:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):600:offset + 2 |==> offset * 2
3902:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):600:offset + 2 |==> offset - 2
3903:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):600:offset + 2 |==> offset / 2
3904:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:curReader == null |==> false
3905:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:c != 0 |==> c < 0
3906:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:c != 0 |==> c > 0
3907:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:c != 0 |==> true
3908:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:curReader == null || c != 0 |==> curReader == null != (c != 0)
3909:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:curReader == null || c != 0 |==> curReader == null
3910:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:curReader == null || c != 0 |==> c != 0
3911:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):602:curReader == null || c != 0 |==> true
3912:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):603:sb.append(c) |==> <NO-OP>
3913:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):604:offset += 3 |==> <NO-OP>
3914:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 |==> offset % 6
3915:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 |==> offset * 6
3916:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 |==> offset - 6
3917:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 |==> offset / 6
3918:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length |==> offset + 6 != data.length
3919:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length |==> offset + 6 <= data.length
3920:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length |==> false
3921:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 3 |==> offset % 3
3922:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 3 |==> offset * 3
3923:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 3 |==> offset - 3
3924:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 3 |==> offset / 3
3925:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> offset + 6 < data.length == noneEquals(data, offset, offset + 3, ' ')
3926:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> false
3927:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> offset + 6 < data.length
3928:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> noneEquals(data, offset, offset + 3, ' ')
3929:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 0 |==> offset % 0
3930:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 0 |==> offset * 0
3931:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 0 |==> offset - 0
3932:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 0 |==> offset / 0
3933:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 1 |==> offset % 1
3934:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 1 |==> offset * 1
3935:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 1 |==> offset - 1
3936:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 1 |==> offset / 1
3937:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 2 |==> offset % 2
3938:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 2 |==> offset * 2
3939:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 2 |==> offset - 2
3940:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 2 |==> offset / 2
3941:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) <= 0
3942:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) >= 0
3943:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 |==> false
3944:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 3 |==> offset % 3
3945:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 3 |==> offset * 3
3946:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 3 |==> offset - 3
3947:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 3 |==> offset / 3
3948:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 4 |==> offset % 4
3949:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 4 |==> offset * 4
3950:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 4 |==> offset - 4
3951:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 4 |==> offset / 4
3952:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 5 |==> offset % 5
3953:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 5 |==> offset * 5
3954:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 5 |==> offset - 5
3955:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 5 |==> offset / 5
3956:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) <= 0
3957:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) >= 0
3958:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> false
3959:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 != (getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
3960:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0
3961:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0
3962:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> true
3963:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> (offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ')) == (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
3964:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> false
3965:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ')
3966:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):607:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
3967:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 2 |==> offset % 2
3968:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 2 |==> offset * 2
3969:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 2 |==> offset - 2
3970:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 2 |==> offset / 2
3971:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 3 |==> offset % 3
3972:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 3 |==> offset * 3
3973:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 3 |==> offset - 3
3974:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 3 |==> offset / 3
3975:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 4 |==> offset % 4
3976:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 4 |==> offset * 4
3977:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 4 |==> offset - 4
3978:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 4 |==> offset / 4
3979:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 |==> getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) < 0
3980:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 |==> getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) > 0
3981:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 |==> true
3982:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 |==> (offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)) == (getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0)
3983:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):608:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 |==> false
3984:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 |==> offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
3985:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 |==> getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0
3986:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):610:offset + 5 |==> offset % 5
3987:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):610:offset + 5 |==> offset * 5
3988:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):610:offset + 5 |==> offset - 5
3989:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):610:offset + 5 |==> offset / 5
3990:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) |==> (offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0) == noneEquals(data, offset, offset + 5, 27)
3991:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):609:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) |==> false
3992:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) |==> offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0
3993:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):610:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) |==> noneEquals(data, offset, offset + 5, 27)
3994:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):611:offset + 5 |==> offset % 5
3995:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):611:offset + 5 |==> offset * 5
3996:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):611:offset + 5 |==> offset - 5
3997:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):611:offset + 5 |==> offset / 5
3998:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) |==> (offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27)) == noneInRange(data, offset, offset + 5, 128, 255)
3999:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):610:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) |==> false
4000:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) |==> offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27)
4001:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):611:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) |==> noneInRange(data, offset, offset + 5, 128, 255)
4002:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> (offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255)) == !nextEscIsMB(data, offset, data.length)
4003:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):611:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> false
4004:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):606:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255)
4005:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):612:offset + 6 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 2], data[offset + 3], data[offset + 4])) != 0 && noneEquals(data, offset, offset + 5, 27) && noneInRange(data, offset, offset + 5, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> !nextEscIsMB(data, offset, data.length)
4006:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):614:offset + 1 |==> offset % 1
4007:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):614:offset + 1 |==> offset * 1
4008:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):614:offset + 1 |==> offset - 1
4009:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):614:offset + 1 |==> offset / 1
4010:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):615:offset + 1 |==> offset % 1
4011:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):615:offset + 1 |==> offset * 1
4012:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):615:offset + 1 |==> offset - 1
4013:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):615:offset + 1 |==> offset / 1
4014:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):616:offset + 1 |==> offset % 1
4015:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):616:offset + 1 |==> offset * 1
4016:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):616:offset + 1 |==> offset - 1
4017:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):616:offset + 1 |==> offset / 1
4018:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):617:offset + 1 |==> offset % 1
4019:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):617:offset + 1 |==> offset * 1
4020:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):617:offset + 1 |==> offset - 1
4021:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):617:offset + 1 |==> offset / 1
4022:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):618:mbstr.length() == 1 |==> mbstr.length() <= 1
4023:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):618:mbstr.length() == 1 |==> mbstr.length() >= 1
4024:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):618:mbstr.length() == 1 |==> false
4025:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):619:curReader != null |==> true
4026:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):620:curReader.addError(MarcError.MINOR_ERROR, "Missing square brace character in MARC8 multibyte character, inserting one to create the only valid option") |==> <NO-OP>
4027:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):624:sb.append(mbstr) |==> <NO-OP>
4028:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):625:offset += 2 |==> <NO-OP>
4029:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):626:mbstr.length() > 1 |==> mbstr.length() != 1
4030:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):626:mbstr.length() > 1 |==> mbstr.length() >= 1
4031:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):626:mbstr.length() > 1 |==> false
4032:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):627:curReader != null |==> true
4033:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):628:curReader.addError(MarcError.MAJOR_ERROR, "Missing square brace character in MARC8 multibyte character, inserting one to create a randomly chosen valid option") |==> <NO-OP>
4034:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):632:sb.append(mbstr.subSequence(0, 1)) |==> <NO-OP>
4035:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):633:offset += 2 |==> <NO-OP>
4036:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):634:mbstr.length() == 0 |==> mbstr.length() <= 0
4037:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):634:mbstr.length() == 0 |==> mbstr.length() >= 0
4038:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):634:mbstr.length() == 0 |==> false
4039:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):635:curReader != null |==> true
4040:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):636:curReader.addError(MarcError.MINOR_ERROR, "Erroneous MARC8 multibyte character, Discarding bad character and continuing reading Multibyte characters") |==> <NO-OP>
4041:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):640:sb.append("[?]") |==> <NO-OP>
4042:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):641:offset += 2 |==> <NO-OP>
4043:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 |==> offset % 7
4044:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 |==> offset * 7
4045:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 |==> offset - 7
4046:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 |==> offset / 7
4047:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length |==> offset + 7 != data.length
4048:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length |==> offset + 7 <= data.length
4049:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length |==> false
4050:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 3 |==> offset % 3
4051:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 3 |==> offset * 3
4052:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 3 |==> offset - 3
4053:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 3 |==> offset / 3
4054:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> offset + 7 < data.length == noneEquals(data, offset, offset + 3, ' ')
4055:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> false
4056:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> offset + 7 < data.length
4057:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') |==> noneEquals(data, offset, offset + 3, ' ')
4058:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 0 |==> offset % 0
4059:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 0 |==> offset * 0
4060:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 0 |==> offset - 0
4061:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 0 |==> offset / 0
4062:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 1 |==> offset % 1
4063:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 1 |==> offset * 1
4064:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 1 |==> offset - 1
4065:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 1 |==> offset / 1
4066:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 2 |==> offset % 2
4067:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 2 |==> offset * 2
4068:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 2 |==> offset - 2
4069:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 2 |==> offset / 2
4070:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) <= 0
4071:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) >= 0
4072:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 |==> false
4073:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 3 |==> offset % 3
4074:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 3 |==> offset * 3
4075:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 3 |==> offset - 3
4076:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 3 |==> offset / 3
4077:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 4 |==> offset % 4
4078:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 4 |==> offset * 4
4079:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 4 |==> offset - 4
4080:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 4 |==> offset / 4
4081:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 5 |==> offset % 5
4082:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 5 |==> offset * 5
4083:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 5 |==> offset - 5
4084:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 5 |==> offset / 5
4085:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) <= 0
4086:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) >= 0
4087:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> false
4088:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 != (getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
4089:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0
4090:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0
4091:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0 |==> true
4092:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> (offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ')) == (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
4093:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> false
4094:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ')
4095:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):644:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) |==> (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
4096:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 4 |==> offset % 4
4097:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 4 |==> offset * 4
4098:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 4 |==> offset - 4
4099:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 4 |==> offset / 4
4100:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 5 |==> offset % 5
4101:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 5 |==> offset * 5
4102:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 5 |==> offset - 5
4103:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 5 |==> offset / 5
4104:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 6 |==> offset % 6
4105:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 6 |==> offset * 6
4106:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 6 |==> offset - 6
4107:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 6 |==> offset / 6
4108:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 |==> getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) < 0
4109:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 |==> getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) > 0
4110:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 |==> true
4111:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 |==> (offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)) == (getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0)
4112:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):645:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 |==> false
4113:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 |==> offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0)
4114:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 |==> getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0
4115:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):647:offset + 6 |==> offset % 6
4116:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):647:offset + 6 |==> offset * 6
4117:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):647:offset + 6 |==> offset - 6
4118:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):647:offset + 6 |==> offset / 6
4119:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) |==> (offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0) == noneEquals(data, offset, offset + 6, 27)
4120:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):646:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) |==> false
4121:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) |==> offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0
4122:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):647:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) |==> noneEquals(data, offset, offset + 6, 27)
4123:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):648:offset + 6 |==> offset % 6
4124:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):648:offset + 6 |==> offset * 6
4125:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):648:offset + 6 |==> offset - 6
4126:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):648:offset + 6 |==> offset / 6
4127:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) |==> (offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27)) == noneInRange(data, offset, offset + 6, 128, 255)
4128:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):647:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) |==> false
4129:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) |==> offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27)
4130:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):648:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) |==> noneInRange(data, offset, offset + 6, 128, 255)
4131:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> (offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255)) == !nextEscIsMB(data, offset, data.length)
4132:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):648:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> false
4133:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):643:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255)
4134:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):648:offset + 7 < data.length && noneEquals(data, offset, offset + 3, ' ') && (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) == 0 || getMBChar(makeMultibyte(data[offset + 3], data[offset + 4], data[offset + 5])) == 0) && getMBChar(makeMultibyte(data[offset + 4], data[offset + 5], data[offset + 6])) != 0 && noneEquals(data, offset, offset + 6, 27) && noneInRange(data, offset, offset + 6, 128, 255) && !nextEscIsMB(data, offset, data.length) |==> !nextEscIsMB(data, offset, data.length)
4135:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):650:offset + 1 |==> offset % 1
4136:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):650:offset + 1 |==> offset * 1
4137:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):650:offset + 1 |==> offset - 1
4138:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):650:offset + 1 |==> offset / 1
4139:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):651:offset + 1 |==> offset % 1
4140:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):651:offset + 1 |==> offset * 1
4141:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):651:offset + 1 |==> offset - 1
4142:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):651:offset + 1 |==> offset / 1
4143:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):652:offset + 1 |==> offset % 1
4144:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):652:offset + 1 |==> offset * 1
4145:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):652:offset + 1 |==> offset - 1
4146:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):652:offset + 1 |==> offset / 1
4147:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):653:offset + 1 |==> offset % 1
4148:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):653:offset + 1 |==> offset * 1
4149:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):653:offset + 1 |==> offset - 1
4150:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):653:offset + 1 |==> offset / 1
4151:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):654:mbstr.length() == 1 |==> mbstr.length() <= 1
4152:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):654:mbstr.length() == 1 |==> mbstr.length() >= 1
4153:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):654:mbstr.length() == 1 |==> false
4154:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):655:curReader != null |==> true
4155:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):656:curReader.addError(MarcError.MINOR_ERROR, "Missing square brace character in MARC8 multibyte character, inserting one to create the only valid option") |==> <NO-OP>
4156:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):659:sb.append(mbstr) |==> <NO-OP>
4157:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):660:offset += 2 |==> <NO-OP>
4158:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):661:mbstr.length() > 1 |==> mbstr.length() != 1
4159:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):661:mbstr.length() > 1 |==> mbstr.length() >= 1
4160:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):661:mbstr.length() > 1 |==> false
4161:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):662:curReader != null |==> true
4162:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):663:curReader.addError(MarcError.MAJOR_ERROR, "Missing square brace character in MARC8 multibyte character, inserting one to create a randomly chosen valid option") |==> <NO-OP>
4163:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):666:sb.append(mbstr.subSequence(0, 1)) |==> <NO-OP>
4164:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):667:offset += 2 |==> <NO-OP>
4165:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):668:mbstr.length() == 0 |==> mbstr.length() <= 0
4166:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):668:mbstr.length() == 0 |==> mbstr.length() >= 0
4167:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):668:mbstr.length() == 0 |==> false
4168:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):669:curReader != null |==> true
4169:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):670:curReader.addError(MarcError.MINOR_ERROR, "Erroneous MARC8 multibyte character, Discarding bad character and continuing reading Multibyte characters") |==> <NO-OP>
4170:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):673:sb.append("[?]") |==> <NO-OP>
4171:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):674:offset += 2 |==> <NO-OP>
4172:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 |==> offset % 4
4173:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 |==> offset * 4
4174:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 |==> offset - 4
4175:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 |==> offset / 4
4176:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length |==> offset + 4 < data.length
4177:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length |==> offset + 4 == data.length
4178:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length |==> true
4179:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:data[offset] > 127 |==> data[offset] != 127
4180:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:data[offset] > 127 |==> data[offset] >= 127
4181:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:data[offset] > 127 |==> false
4182:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length && data[offset] > 127 |==> offset + 4 <= data.length == data[offset] > 127
4183:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length && data[offset] > 127 |==> false
4184:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length && data[offset] > 127 |==> offset + 4 <= data.length
4185:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length && data[offset] > 127 |==> data[offset] > 127
4186:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 1 |==> offset % 1
4187:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 1 |==> offset * 1
4188:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 1 |==> offset - 1
4189:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 1 |==> offset / 1
4190:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 2 |==> offset % 2
4191:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 2 |==> offset * 2
4192:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 2 |==> offset - 2
4193:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 2 |==> offset / 2
4194:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 3 |==> offset % 3
4195:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 3 |==> offset * 3
4196:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 3 |==> offset - 3
4197:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 3 |==> offset / 3
4198:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0 |==> getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) < 0
4199:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0 |==> getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) > 0
4200:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0 |==> true
4201:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length && data[offset] > 127 && getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0 |==> (offset + 4 <= data.length && data[offset] > 127) == (getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0)
4202:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length && data[offset] > 127 && getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0 |==> false
4203:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):676:offset + 4 <= data.length && data[offset] > 127 && getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0 |==> offset + 4 <= data.length && data[offset] > 127
4204:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):677:offset + 4 <= data.length && data[offset] > 127 && getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0 |==> getMBChar(makeMultibyte(data[offset + 1], data[offset + 2], data[offset + 3])) != 0
4205:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):679:curReader != null |==> true
4206:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):680:curReader.addError(MarcError.MINOR_ERROR, "Erroneous character in MARC8 multibyte character, Copying bad character and continuing reading Multibyte characters") |==> <NO-OP>
4207:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):684:sb.append(getChar(data[offset], 66, 69)) |==> <NO-OP>
4208:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):685:offset += 1 |==> <NO-OP>
4209:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null |==> true
4210:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 4 |==> offset % 4
4211:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 4 |==> offset * 4
4212:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 4 |==> offset - 4
4213:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 4 |==> offset / 4
4214:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 4 <= data.length |==> offset + 4 < data.length
4215:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 4 <= data.length |==> offset + 4 == data.length
4216:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 4 <= data.length |==> true
4217:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length |==> curReader != null == offset + 4 <= data.length
4218:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length |==> false
4219:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length |==> curReader != null
4220:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length |==> offset + 4 <= data.length
4221:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 1 |==> offset % 1
4222:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 1 |==> offset * 1
4223:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 1 |==> offset - 1
4224:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 1 |==> offset / 1
4225:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 1] == 32 |==> data[offset + 1] <= 32
4226:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 1] == 32 |==> data[offset + 1] >= 32
4227:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 1] == 32 |==> false
4228:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 2 |==> offset % 2
4229:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 2 |==> offset * 2
4230:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 2 |==> offset - 2
4231:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:offset + 2 |==> offset / 2
4232:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 2] == 32 |==> data[offset + 2] <= 32
4233:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 2] == 32 |==> data[offset + 2] >= 32
4234:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 2] == 32 |==> false
4235:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 1] == 32 || data[offset + 2] == 32 |==> data[offset + 1] == 32 != (data[offset + 2] == 32)
4236:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 1] == 32 || data[offset + 2] == 32 |==> data[offset + 1] == 32
4237:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 1] == 32 || data[offset + 2] == 32 |==> data[offset + 2] == 32
4238:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:data[offset + 1] == 32 || data[offset + 2] == 32 |==> true
4239:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> (curReader != null && offset + 4 <= data.length) == (data[offset + 1] == 32 || data[offset + 2] == 32)
4240:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> false
4241:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> curReader != null && offset + 4 <= data.length
4242:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):687:curReader != null && offset + 4 <= data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> (data[offset + 1] == 32 || data[offset + 2] == 32)
4243:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset % 1
4244:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset * 1
4245:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset - 1
4246:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset / 1
4247:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:data[offset + 1] != 32 |==> data[offset + 1] < 32
4248:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:data[offset + 1] != 32 |==> data[offset + 1] > 32
4249:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:data[offset + 1] != 32 |==> true
4250:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset % 1
4251:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset * 1
4252:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset - 1
4253:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 1 |==> offset / 1
4254:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 2 |==> offset % 2
4255:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 2 |==> offset * 2
4256:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 2 |==> offset - 2
4257:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):689:offset + 2 |==> offset / 2
4258:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):690:offset + 3 |==> offset % 3
4259:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):690:offset + 3 |==> offset * 3
4260:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):690:offset + 3 |==> offset - 3
4261:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):690:offset + 3 |==> offset / 3
4262:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):692:c != 0 |==> c < 0
4263:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):692:c != 0 |==> c > 0
4264:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):692:c != 0 |==> true
4265:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):693:curReader != null |==> true
4266:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):694:curReader.addError(MarcError.ERROR_TYPO, "Extraneous space found within MARC8 multibyte character") |==> <NO-OP>
4267:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):697:sb.append(c) |==> <NO-OP>
4268:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):698:sb.append(' ') |==> <NO-OP>
4269:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):699:offset += 4 |==> <NO-OP>
4270:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):701:curReader != null |==> true
4271:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):702:curReader.addError(MarcError.MINOR_ERROR, "Erroneous MARC8 multibyte character, inserting change to default character set") |==> <NO-OP>
4272:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):705:cdt.multibyte = false |==> <NO-OP>
4273:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):706:cdt.g0 = 66 |==> <NO-OP>
4274:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):707:cdt.g1 = 69 |==> <NO-OP>
4275:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):708:break; |==> <NO-OP>
4276:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset % 3
4277:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset * 3
4278:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset - 3
4279:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset / 3
4280:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 > data.length |==> offset + 3 != data.length
4281:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 > data.length |==> offset + 3 >= data.length
4282:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 > data.length |==> false
4283:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset % 3
4284:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset * 3
4285:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset - 3
4286:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 |==> offset / 3
4287:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 == data.length |==> offset + 3 <= data.length
4288:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 == data.length |==> offset + 3 >= data.length
4289:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 == data.length |==> false
4290:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 1 |==> offset % 1
4291:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 1 |==> offset * 1
4292:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 1 |==> offset - 1
4293:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 1 |==> offset / 1
4294:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 1] == 32 |==> data[offset + 1] <= 32
4295:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 1] == 32 |==> data[offset + 1] >= 32
4296:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 1] == 32 |==> false
4297:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 2 |==> offset % 2
4298:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 2 |==> offset * 2
4299:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 2 |==> offset - 2
4300:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 2 |==> offset / 2
4301:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 2] == 32 |==> data[offset + 2] <= 32
4302:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 2] == 32 |==> data[offset + 2] >= 32
4303:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 2] == 32 |==> false
4304:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 1] == 32 || data[offset + 2] == 32 |==> data[offset + 1] == 32 != (data[offset + 2] == 32)
4305:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 1] == 32 || data[offset + 2] == 32 |==> data[offset + 1] == 32
4306:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 1] == 32 || data[offset + 2] == 32 |==> data[offset + 2] == 32
4307:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:data[offset + 1] == 32 || data[offset + 2] == 32 |==> true
4308:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> offset + 3 == data.length == (data[offset + 1] == 32 || data[offset + 2] == 32)
4309:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> false
4310:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> offset + 3 == data.length
4311:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> (data[offset + 1] == 32 || data[offset + 2] == 32)
4312:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 > data.length || offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> offset + 3 > data.length != (offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32))
4313:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 > data.length || offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> offset + 3 > data.length
4314:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 > data.length || offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32)
4315:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):710:offset + 3 > data.length || offset + 3 == data.length && (data[offset + 1] == 32 || data[offset + 2] == 32) |==> true
4316:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):711:curReader != null |==> true
4317:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):712:curReader.addError(MarcError.MINOR_ERROR, "Partial MARC8 multibyte character, inserting change to default character set") |==> <NO-OP>
4318:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):715:cdt.multibyte = false |==> <NO-OP>
4319:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):716:cdt.g0 = 66 |==> <NO-OP>
4320:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):717:cdt.g1 = 69 |==> <NO-OP>
4321:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):718:break; |==> <NO-OP>
4322:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 |==> offset % 3
4323:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 |==> offset * 3
4324:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 |==> offset - 3
4325:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 |==> offset / 3
4326:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 <= data.length |==> offset + 3 < data.length
4327:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 <= data.length |==> offset + 3 == data.length
4328:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 <= data.length |==> true
4329:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 0 |==> offset % 0
4330:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 0 |==> offset * 0
4331:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 0 |==> offset - 0
4332:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 0 |==> offset / 0
4333:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 1 |==> offset % 1
4334:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 1 |==> offset * 1
4335:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 1 |==> offset - 1
4336:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 1 |==> offset / 1
4337:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 2 |==> offset % 2
4338:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 2 |==> offset * 2
4339:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 2 |==> offset - 2
4340:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:offset + 2 |==> offset / 2
4341:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) < 0
4342:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) > 0
4343:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):720:getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0 |==> true
4344:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 <= data.length && getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0 |==> offset + 3 <= data.length == (getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0)
4345:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 <= data.length && getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0 |==> false
4346:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 <= data.length && getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0 |==> offset + 3 <= data.length
4347:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):719:offset + 3 <= data.length && getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0 |==> getMBChar(makeMultibyte(data[offset + 0], data[offset + 1], data[offset + 2])) != 0
4348:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):721:offset + 1 |==> offset % 1
4349:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):721:offset + 1 |==> offset * 1
4350:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):721:offset + 1 |==> offset - 1
4351:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):721:offset + 1 |==> offset / 1
4352:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):722:offset + 2 |==> offset % 2
4353:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):722:offset + 2 |==> offset * 2
4354:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):722:offset + 2 |==> offset - 2
4355:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):722:offset + 2 |==> offset / 2
4356:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:curReader == null |==> false
4357:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:c != 0 |==> c < 0
4358:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:c != 0 |==> c > 0
4359:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:c != 0 |==> true
4360:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:curReader == null || c != 0 |==> curReader == null != (c != 0)
4361:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:curReader == null || c != 0 |==> curReader == null
4362:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:curReader == null || c != 0 |==> c != 0
4363:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):723:curReader == null || c != 0 |==> true
4364:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):724:sb.append(c) |==> <NO-OP>
4365:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):725:offset += 3 |==> <NO-OP>
4366:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):728:curReader != null |==> true
4367:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):729:curReader.addError(MarcError.MINOR_ERROR, "Erroneous MARC8 multibyte character, inserting change to default character set") |==> <NO-OP>
4368:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):732:cdt.multibyte = false |==> <NO-OP>
4369:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):733:cdt.g0 = 66 |==> <NO-OP>
4370:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):734:cdt.g1 = 69 |==> <NO-OP>
4371:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):736:break; |==> <NO-OP>
4372:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@convertMultibyte(org.marc4j.converter.impl.AnselToUnicode.CodeTracker,char[]):740:cdt.offset = offset |==> <NO-OP>
4373:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):746:length - 1 |==> length % 1
4374:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):746:length - 1 |==> length * 1
4375:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):746:length - 1 |==> length + 1
4376:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):746:length - 1 |==> length / 1
4377:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):746:offset < length - 1 |==> offset != length - 1
4378:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):746:offset < length - 1 |==> offset <= length - 1
4379:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):746:offset < length - 1 |==> false
4380:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):747:data[offset] == (char)27 |==> data[offset] <= (char)27
4381:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):747:data[offset] == (char)27 |==> data[offset] >= (char)27
4382:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):747:data[offset] == (char)27 |==> false
4383:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):748:offset + 1 |==> offset % 1
4384:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):748:offset + 1 |==> offset * 1
4385:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):748:offset + 1 |==> offset - 1
4386:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):748:offset + 1 |==> offset / 1
4387:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):748:data[offset + 1] == '$' |==> data[offset + 1] <= '$'
4388:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):748:data[offset + 1] == '$' |==> data[offset + 1] >= '$'
4389:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):748:data[offset + 1] == '$' |==> false
4390:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):749:return true; |==> <NO-OP>
4391:STD:<BREAK>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@nextEscIsMB(char[],int,int):751:break; |==> <NO-OP>
4392:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@noneEquals(char[],int,int,int):759:offset <= end |==> offset < end
4393:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@noneEquals(char[],int,int,int):759:offset <= end |==> offset == end
4394:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@noneEquals(char[],int,int,int):759:offset <= end |==> true
4395:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@noneEquals(char[],int,int,int):760:data[offset] == (char)val |==> data[offset] <= (char)val
4396:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@noneEquals(char[],int,int,int):760:data[offset] == (char)val |==> data[offset] >= (char)val
4397:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@noneEquals(char[],int,int,int):760:data[offset] == (char)val |==> false
4398:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@noneEquals(char[],int,int,int):761:return false; |==> <NO-OP>
4399:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):769:offset <= end |==> offset < end
4400:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):769:offset <= end |==> offset == end
4401:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):769:offset <= end |==> true
4402:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] >= (char)val1 |==> data[offset] == (char)val1
4403:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] >= (char)val1 |==> data[offset] > (char)val1
4404:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] >= (char)val1 |==> true
4405:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] <= (char)val2 |==> data[offset] < (char)val2
4406:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] <= (char)val2 |==> data[offset] == (char)val2
4407:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] <= (char)val2 |==> true
4408:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] >= (char)val1 && data[offset] <= (char)val2 |==> data[offset] >= (char)val1 == data[offset] <= (char)val2
4409:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] >= (char)val1 && data[offset] <= (char)val2 |==> false
4410:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] >= (char)val1 && data[offset] <= (char)val2 |==> data[offset] >= (char)val1
4411:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):770:data[offset] >= (char)val1 && data[offset] <= (char)val2 |==> data[offset] <= (char)val2
4412:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@noneInRange(char[],int,int,int,int):771:return false; |==> <NO-OP>
4413:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:offset < data.length |==> offset != data.length
4414:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:offset < data.length |==> offset <= data.length
4415:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:offset < data.length |==> false
4416:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:data[offset] != 27 |==> data[offset] < 27
4417:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:data[offset] != 27 |==> data[offset] > 27
4418:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:data[offset] != 27 |==> true
4419:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:offset < data.length && data[offset] != 27 |==> offset < data.length == (data[offset] != 27)
4420:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:offset < data.length && data[offset] != 27 |==> false
4421:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:offset < data.length && data[offset] != 27 |==> offset < data.length
4422:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):780:offset < data.length && data[offset] != 27 |==> data[offset] != 27
4423:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):781:offset++ |==> <NO-OP>
4424:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getRawMBLength(char[],int):782:length++ |==> <NO-OP>
4425:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:offset < data.length |==> offset != data.length
4426:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:offset < data.length |==> offset <= data.length
4427:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:offset < data.length |==> false
4428:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:data[offset] != 27 |==> data[offset] < 27
4429:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:data[offset] != 27 |==> data[offset] > 27
4430:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:data[offset] != 27 |==> true
4431:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:offset < data.length && data[offset] != 27 |==> offset < data.length == (data[offset] != 27)
4432:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:offset < data.length && data[offset] != 27 |==> false
4433:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:offset < data.length && data[offset] != 27 |==> offset < data.length
4434:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):790:offset < data.length && data[offset] != 27 |==> data[offset] != 27
4435:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):791:data[offset] == ' ' |==> data[offset] <= ' '
4436:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):791:data[offset] == ' ' |==> data[offset] >= ' '
4437:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):791:data[offset] == ' ' |==> false
4438:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):792:cnt++ |==> <NO-OP>
4439:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getNumSpacesInMBLength(char[],int):795:offset++ |==> <NO-OP>
4440:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:c == '&' |==> c <= '&'
4441:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:c == '&' |==> c >= '&'
4442:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:c == '&' |==> false
4443:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' |==> translateNCR == (c == '&')
4444:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' |==> false
4445:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' |==> translateNCR
4446:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' |==> c == '&'
4447:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:cdt.offset + 8 |==> cdt.offset % 8
4448:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:cdt.offset + 8 |==> cdt.offset * 8
4449:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:cdt.offset + 8 |==> cdt.offset - 8
4450:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:cdt.offset + 8 |==> cdt.offset / 8
4451:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:data.length >= cdt.offset + 8 |==> data.length == cdt.offset + 8
4452:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:data.length >= cdt.offset + 8 |==> data.length > cdt.offset + 8
4453:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:data.length >= cdt.offset + 8 |==> true
4454:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' && data.length >= cdt.offset + 8 |==> (translateNCR && c == '&') == data.length >= cdt.offset + 8
4455:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' && data.length >= cdt.offset + 8 |==> false
4456:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' && data.length >= cdt.offset + 8 |==> translateNCR && c == '&'
4457:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):804:translateNCR && c == '&' && data.length >= cdt.offset + 8 |==> data.length >= cdt.offset + 8
4458:COR:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];"):TRUE:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):806:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];") |==> false
4459:COR:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];"):FALSE:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):806:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f];") |==> true
4460:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):807:c = getCharFromCodePoint(tmp.substring(3, 7)) |==> <NO-OP>
4461:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):808:cdt.offset += 8 |==> <NO-OP>
4462:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:cdt.offset + 10 |==> cdt.offset % 10
4463:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:cdt.offset + 10 |==> cdt.offset * 10
4464:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:cdt.offset + 10 |==> cdt.offset - 10
4465:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:cdt.offset + 10 |==> cdt.offset / 10
4466:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:data.length >= cdt.offset + 10 |==> data.length == cdt.offset + 10
4467:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:data.length >= cdt.offset + 10 |==> data.length > cdt.offset + 10
4468:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:data.length >= cdt.offset + 10 |==> true
4469:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%") && data.length >= cdt.offset + 10 |==> tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%") == data.length >= cdt.offset + 10
4470:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%") && data.length >= cdt.offset + 10 |==> false
4471:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%") && data.length >= cdt.offset + 10 |==> tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%")
4472:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):809:tmp.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%") && data.length >= cdt.offset + 10 |==> data.length >= cdt.offset + 10
4473:COR:tmp1.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%x;"):TRUE:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):811:tmp1.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%x;") |==> false
4474:COR:tmp1.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%x;"):FALSE:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):811:tmp1.matches("&#x[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]%x;") |==> true
4475:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):812:c = getCharFromCodePoint(tmp1.substring(3, 7)) |==> <NO-OP>
4476:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):813:cdt.offset += 10 |==> <NO-OP>
4477:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):814:curReader != null |==> true
4478:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):815:curReader.addError(MarcError.MINOR_ERROR, "Subfield contains malformed Unicode Numeric Character Reference : " + tmp1) |==> <NO-OP>
4479:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):819:cdt.offset++ |==> <NO-OP>
4480:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):822:cdt.offset++ |==> <NO-OP>
4481:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@getCharCDT(char[],org.marc4j.converter.impl.AnselToUnicode.CodeTracker):825:cdt.offset++ |==> <NO-OP>
4482:SOR:<<(int,int):>>(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):847:c1 << 16 |==> c1 >> 16
4483:SOR:<<(int,int):>>>(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):847:c1 << 16 |==> c1 >>> 16
4484:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):847:chars[0] = c1 << 16 |==> <NO-OP>
4485:SOR:<<(int,int):>>(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):848:c2 << 8 |==> c2 >> 8
4486:SOR:<<(int,int):>>>(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):848:c2 << 8 |==> c2 >>> 8
4487:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):848:chars[1] = c2 << 8 |==> <NO-OP>
4488:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):849:chars[2] = c3 |==> <NO-OP>
4489:LOR:|(int,int):&(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):851:chars[0] | chars[1] |==> chars[0] & chars[1]
4490:LOR:|(int,int):^(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):851:chars[0] | chars[1] |==> chars[0] ^ chars[1]
4491:LOR:|(int,int):&(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):851:chars[0] | chars[1] | chars[2] |==> (chars[0] | chars[1]) & chars[2]
4492:LOR:|(int,int):^(int,int):org.marc4j.converter.impl.AnselToUnicode@makeMultibyte(char,char,char):851:chars[0] | chars[1] | chars[2] |==> (chars[0] | chars[1]) ^ chars[2]
4493:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.AnselToUnicode@getChar(int,int,int):855:ch <= 126 |==> ch < 126
4494:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.AnselToUnicode@getChar(int,int,int):855:ch <= 126 |==> ch == 126
4495:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.AnselToUnicode@getChar(int,int,int):855:ch <= 126 |==> true
4496:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@getMBCharStr(int):881:c == 0 |==> c <= 0
4497:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@getMBCharStr(int):881:c == 0 |==> c >= 0
4498:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@getMBCharStr(int):881:c == 0 |==> false
4499:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):889:len - 1 |==> len % 1
4500:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):889:len - 1 |==> len * 1
4501:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):889:len - 1 |==> len + 1
4502:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):889:len - 1 |==> len / 1
4503:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):889:pos < len - 1 |==> pos != len - 1
4504:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):889:pos < len - 1 |==> pos <= len - 1
4505:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):889:pos < len - 1 |==> false
4506:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@hasNext(int,int):890:return true; |==> <NO-OP>
4507:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.AnselToUnicode@isEscape(int):897:i == 27 |==> i <= 27
4508:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.AnselToUnicode@isEscape(int):897:i == 27 |==> i >= 27
4509:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.AnselToUnicode@isEscape(int):897:i == 27 |==> false
4510:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.AnselToUnicode@isEscape(int):898:return true; |==> <NO-OP>
4511:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):31:setCombineConsecutiveRecordsFields(configProps.getProperty("marc.combine_records"), configProps.getProperty("marc.combine_records.left_field"), configProps.getProperty("marc.combine_records.right_field")) |==> <NO-OP>
4512:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):35:setPermissiveReader(Boolean.parseBoolean(configProps.getProperty("marc.permissive"))) |==> <NO-OP>
4513:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):37:setDefaultEncoding(configProps.getProperty("marc.default_encoding")) |==> <NO-OP>
4514:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):39:setToUtf8(Boolean.parseBoolean(configProps.getProperty("marc.to_utf_8"))) |==> <NO-OP>
4515:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):41:setUnicodeNormalize(configProps.getProperty("marc.unicode_normalize")) |==> <NO-OP>
4516:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):43:setFilterParams(configProps.getProperty("marc.include_if_present"), configProps.getProperty("marc.include_if_missing")) |==> <NO-OP>
4517:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):46:setDeleteSubfieldSpec(configProps.getProperty("marc.delete_subfields")) |==> <NO-OP>
4518:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>(java.util.Properties):48:setMarcRemapFilename(configProps.getProperty("marc.reader.remap")) |==> <NO-OP>
4519:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>():52:defaultEncoding = null |==> <NO-OP>
4520:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>():53:permissiveReader = false |==> <NO-OP>
4521:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>():54:to_utf_8 = false |==> <NO-OP>
4522:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>():55:combineConsecutiveRecordsFields = null |==> <NO-OP>
4523:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@<init>():56:unicodeNormalize = null |==> <NO-OP>
4524:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setPermissiveReader(boolean):64:this.permissiveReader = permissiveReader |==> <NO-OP>
4525:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@getDefaultEncoding():69:defaultEncoding == null |==> false
4526:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@setDefaultEncoding(java.lang.String):77:defaultEncoding == null |==> false
4527:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setDefaultEncoding(java.lang.String):78:this.defaultEncoding = null |==> <NO-OP>
4528:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setDefaultEncoding(java.lang.String):80:this.defaultEncoding = defaultEncoding.trim() |==> <NO-OP>
4529:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setToUtf8(boolean):90:this.to_utf_8 = to_utf_8 |==> <NO-OP>
4530:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):109:this.combineConsecutiveRecordsFields = combineConsecutiveRecordsFields |==> <NO-OP>
4531:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields != null |==> true
4532:ROR:==(int,int):<=(int,int):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields.length() == 0 |==> combineConsecutiveRecordsFields.length() <= 0
4533:ROR:==(int,int):>=(int,int):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields.length() == 0 |==> combineConsecutiveRecordsFields.length() >= 0
4534:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields.length() == 0 |==> false
4535:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields != null && combineConsecutiveRecordsFields.length() == 0 |==> combineConsecutiveRecordsFields != null == (combineConsecutiveRecordsFields.length() == 0)
4536:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields != null && combineConsecutiveRecordsFields.length() == 0 |==> false
4537:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields != null && combineConsecutiveRecordsFields.length() == 0 |==> combineConsecutiveRecordsFields != null
4538:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):111:combineConsecutiveRecordsFields != null && combineConsecutiveRecordsFields.length() == 0 |==> combineConsecutiveRecordsFields.length() == 0
4539:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):112:this.combineConsecutiveRecordsFields = null |==> <NO-OP>
4540:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):114:combineRecordsLeftField = leftField |==> <NO-OP>
4541:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setCombineConsecutiveRecordsFields(java.lang.String,java.lang.String,java.lang.String):115:combineRecordsRightField = rightField |==> <NO-OP>
4542:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):132:unicodeNormalizeStr == null |==> false
4543:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):133:unicodeNormalize = null |==> <NO-OP>
4544:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):134:unicodeNormalizeStr.equalsIgnoreCase("KC") || unicodeNormalizeStr.equalsIgnoreCase("CompatibilityCompose") |==> unicodeNormalizeStr.equalsIgnoreCase("KC") != unicodeNormalizeStr.equalsIgnoreCase("CompatibilityCompose")
4545:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):134:unicodeNormalizeStr.equalsIgnoreCase("KC") || unicodeNormalizeStr.equalsIgnoreCase("CompatibilityCompose") |==> unicodeNormalizeStr.equalsIgnoreCase("KC")
4546:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):134:unicodeNormalizeStr.equalsIgnoreCase("KC") || unicodeNormalizeStr.equalsIgnoreCase("CompatibilityCompose") |==> unicodeNormalizeStr.equalsIgnoreCase("CompatibilityCompose")
4547:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):134:unicodeNormalizeStr.equalsIgnoreCase("KC") || unicodeNormalizeStr.equalsIgnoreCase("CompatibilityCompose") |==> true
4548:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):136:unicodeNormalize = "KC" |==> <NO-OP>
4549:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):137:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") |==> unicodeNormalizeStr.equalsIgnoreCase("C") != unicodeNormalizeStr.equalsIgnoreCase("Compose")
4550:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):137:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") |==> unicodeNormalizeStr.equalsIgnoreCase("C")
4551:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):137:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") |==> unicodeNormalizeStr.equalsIgnoreCase("Compose")
4552:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):137:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") |==> true
4553:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):137:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") || unicodeNormalizeStr.equalsIgnoreCase("true") |==> (unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose")) != unicodeNormalizeStr.equalsIgnoreCase("true")
4554:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):137:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") || unicodeNormalizeStr.equalsIgnoreCase("true") |==> unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose")
4555:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):138:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") || unicodeNormalizeStr.equalsIgnoreCase("true") |==> unicodeNormalizeStr.equalsIgnoreCase("true")
4556:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):138:unicodeNormalizeStr.equalsIgnoreCase("C") || unicodeNormalizeStr.equalsIgnoreCase("Compose") || unicodeNormalizeStr.equalsIgnoreCase("true") |==> true
4557:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):139:unicodeNormalize = "C" |==> <NO-OP>
4558:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):140:unicodeNormalizeStr.equalsIgnoreCase("D") || unicodeNormalizeStr.equalsIgnoreCase("Decompose") |==> unicodeNormalizeStr.equalsIgnoreCase("D") != unicodeNormalizeStr.equalsIgnoreCase("Decompose")
4559:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):140:unicodeNormalizeStr.equalsIgnoreCase("D") || unicodeNormalizeStr.equalsIgnoreCase("Decompose") |==> unicodeNormalizeStr.equalsIgnoreCase("D")
4560:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):140:unicodeNormalizeStr.equalsIgnoreCase("D") || unicodeNormalizeStr.equalsIgnoreCase("Decompose") |==> unicodeNormalizeStr.equalsIgnoreCase("Decompose")
4561:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):140:unicodeNormalizeStr.equalsIgnoreCase("D") || unicodeNormalizeStr.equalsIgnoreCase("Decompose") |==> true
4562:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):142:unicodeNormalize = "D" |==> <NO-OP>
4563:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):143:unicodeNormalizeStr.equalsIgnoreCase("KD") || unicodeNormalizeStr.equalsIgnoreCase("CompatibiltyDecompose") |==> unicodeNormalizeStr.equalsIgnoreCase("KD") != unicodeNormalizeStr.equalsIgnoreCase("CompatibiltyDecompose")
4564:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):143:unicodeNormalizeStr.equalsIgnoreCase("KD") || unicodeNormalizeStr.equalsIgnoreCase("CompatibiltyDecompose") |==> unicodeNormalizeStr.equalsIgnoreCase("KD")
4565:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):143:unicodeNormalizeStr.equalsIgnoreCase("KD") || unicodeNormalizeStr.equalsIgnoreCase("CompatibiltyDecompose") |==> unicodeNormalizeStr.equalsIgnoreCase("CompatibiltyDecompose")
4566:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):143:unicodeNormalizeStr.equalsIgnoreCase("KD") || unicodeNormalizeStr.equalsIgnoreCase("CompatibiltyDecompose") |==> true
4567:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):145:unicodeNormalize = "KD" |==> <NO-OP>
4568:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setUnicodeNormalize(java.lang.String):147:unicodeNormalize = null |==> <NO-OP>
4569:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@shouldFilter():161:includeIfPresent != null |==> true
4570:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@shouldFilter():161:includeIfMissing != null |==> true
4571:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderConfig@shouldFilter():161:includeIfPresent != null || includeIfMissing != null |==> includeIfPresent != null != (includeIfMissing != null)
4572:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderConfig@shouldFilter():161:includeIfPresent != null || includeIfMissing != null |==> includeIfPresent != null
4573:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderConfig@shouldFilter():161:includeIfPresent != null || includeIfMissing != null |==> includeIfMissing != null
4574:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderConfig@shouldFilter():161:includeIfPresent != null || includeIfMissing != null |==> true
4575:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setFilterParams(java.lang.String,java.lang.String):165:includeIfPresent = ifPresent |==> <NO-OP>
4576:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setFilterParams(java.lang.String,java.lang.String):166:includeIfMissing = ifMissing |==> <NO-OP>
4577:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@setDeleteSubfieldSpec(java.lang.String):175:marcDeleteSubfields != null |==> true
4578:COR:marcDeleteSubfields.equals("nomap"):TRUE:org.marc4j.MarcReaderConfig@setDeleteSubfieldSpec(java.lang.String):176:marcDeleteSubfields.equals("nomap") |==> false
4579:COR:marcDeleteSubfields.equals("nomap"):FALSE:org.marc4j.MarcReaderConfig@setDeleteSubfieldSpec(java.lang.String):176:marcDeleteSubfields.equals("nomap") |==> true
4580:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setDeleteSubfieldSpec(java.lang.String):177:this.marcDeleteSubfields = null |==> <NO-OP>
4581:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setDeleteSubfieldSpec(java.lang.String):179:this.marcDeleteSubfields = marcDeleteSubfields.trim() |==> <NO-OP>
4582:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setDeleteSubfieldSpec(java.lang.String):182:this.marcDeleteSubfields = null |==> <NO-OP>
4583:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderConfig@setMarcRemapFilename(java.lang.String):192:marcRemapFile != null |==> true
4584:COR:marcRemapFile.equals("nomap"):TRUE:org.marc4j.MarcReaderConfig@setMarcRemapFilename(java.lang.String):193:marcRemapFile.equals("nomap") |==> false
4585:COR:marcRemapFile.equals("nomap"):FALSE:org.marc4j.MarcReaderConfig@setMarcRemapFilename(java.lang.String):193:marcRemapFile.equals("nomap") |==> true
4586:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setMarcRemapFilename(java.lang.String):194:this.marcRemapFile = null |==> <NO-OP>
4587:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setMarcRemapFilename(java.lang.String):196:this.marcRemapFile = marcRemapFile.trim() |==> <NO-OP>
4588:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderConfig@setMarcRemapFilename(java.lang.String):199:this.marcRemapFile = null |==> <NO-OP>
4589:ROR:==(int,int):<=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):22:inputFilenames.length == 0 |==> inputFilenames.length <= 0
4590:ROR:==(int,int):>=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):22:inputFilenames.length == 0 |==> inputFilenames.length >= 0
4591:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):22:inputFilenames.length == 0 |==> false
4592:STD:<RETURN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):23:return makeReader(config, searchDirectories, "stdin"); |==> <NO-OP>
4593:ROR:==(int,int):<=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):24:inputFilenames.length == 1 |==> inputFilenames.length <= 1
4594:ROR:==(int,int):>=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):24:inputFilenames.length == 1 |==> inputFilenames.length >= 1
4595:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):24:inputFilenames.length == 1 |==> false
4596:STD:<RETURN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):25:return makeReader(config, searchDirectories, inputFilenames[0]); |==> <NO-OP>
4597:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):30:readers.add(reader) |==> <NO-OP>
4598:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String[]):33:result = decorateMarcReader(result, config, searchDirectories) |==> <NO-OP>
4599:ROR:==(int,int):<=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):40:inputFilenames.size() == 0 |==> inputFilenames.size() <= 0
4600:ROR:==(int,int):>=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):40:inputFilenames.size() == 0 |==> inputFilenames.size() >= 0
4601:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):40:inputFilenames.size() == 0 |==> false
4602:STD:<RETURN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):41:return makeReader(config, searchDirectories, "stdin"); |==> <NO-OP>
4603:ROR:==(int,int):<=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):42:inputFilenames.size() == 1 |==> inputFilenames.size() <= 1
4604:ROR:==(int,int):>=(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):42:inputFilenames.size() == 1 |==> inputFilenames.size() >= 1
4605:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):42:inputFilenames.size() == 1 |==> false
4606:STD:<RETURN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):43:return makeReader(config, searchDirectories, inputFilenames.iterator().next()); |==> <NO-OP>
4607:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):50:readers.add(reader) |==> <NO-OP>
4608:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.util.List<java.lang.String>):53:result = decorateMarcReader(result, config, searchDirectories) |==> <NO-OP>
4609:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String):62:inputFilename.equals("-") || inputFilename.equals("stdin") |==> inputFilename.equals("-") != inputFilename.equals("stdin")
4610:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String):62:inputFilename.equals("-") || inputFilename.equals("stdin") |==> inputFilename.equals("-")
4611:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String):62:inputFilename.equals("-") || inputFilename.equals("stdin") |==> inputFilename.equals("stdin")
4612:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String):62:inputFilename.equals("-") || inputFilename.equals("stdin") |==> true
4613:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.lang.String[],java.lang.String):68:reader = decorateMarcReader(reader, config, searchDirectories) |==> <NO-OP>
4614:COR:input.markSupported():TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):94:input.markSupported() |==> false
4615:COR:input.markSupported():FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):94:input.markSupported() |==> true
4616:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):99:is.mark(20) |==> <NO-OP>
4617:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):107:is.reset() |==> <NO-OP>
4618:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):113:inputTypeXML = false |==> <NO-OP>
4619:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):114:inputTypeBinary = false |==> <NO-OP>
4620:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):115:inputTypeJSON = false |==> <NO-OP>
4621:COR:filestart.substring(0, 5).equalsIgnoreCase("<?xml"):TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):117:filestart.substring(0, 5).equalsIgnoreCase("<?xml") |==> false
4622:COR:filestart.substring(0, 5).equalsIgnoreCase("<?xml"):FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):117:filestart.substring(0, 5).equalsIgnoreCase("<?xml") |==> true
4623:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):118:inputTypeXML = true |==> <NO-OP>
4624:COR:filestart.startsWith("{"):TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):119:filestart.startsWith("{") |==> false
4625:COR:filestart.startsWith("{"):FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):119:filestart.startsWith("{") |==> true
4626:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):120:inputTypeJSON = true |==> <NO-OP>
4627:COR:filestart.substring(0, 5).matches("\\d\\d\\d\\d\\d"):TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):121:filestart.substring(0, 5).matches("\\d\\d\\d\\d\\d") |==> false
4628:COR:filestart.substring(0, 5).matches("\\d\\d\\d\\d\\d"):FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):121:filestart.substring(0, 5).matches("\\d\\d\\d\\d\\d") |==> true
4629:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):122:inputTypeBinary = true |==> <NO-OP>
4630:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):123:filestart.contains("<?xml") || filestart.contains("<?XML") |==> filestart.contains("<?xml") != filestart.contains("<?XML")
4631:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):123:filestart.contains("<?xml") || filestart.contains("<?XML") |==> filestart.contains("<?xml")
4632:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):123:filestart.contains("<?xml") || filestart.contains("<?XML") |==> filestart.contains("<?XML")
4633:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):123:filestart.contains("<?xml") || filestart.contains("<?XML") |==> true
4634:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):124:inputTypeXML = true |==> <NO-OP>
4635:COR:filestart.contains("<collection"):TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):125:filestart.contains("<collection") |==> false
4636:COR:filestart.contains("<collection"):FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):125:filestart.contains("<collection") |==> true
4637:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):126:inputTypeXML = true |==> <NO-OP>
4638:COR:filestart.contains("<record"):TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):127:filestart.contains("<record") |==> false
4639:COR:filestart.contains("<record"):FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):127:filestart.contains("<record") |==> true
4640:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):128:inputTypeXML = true |==> <NO-OP>
4641:COR:filestart.contains("<!--"):TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):129:filestart.contains("<!--") |==> false
4642:COR:filestart.contains("<!--"):FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):129:filestart.contains("<!--") |==> true
4643:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):130:inputTypeXML = true |==> <NO-OP>
4644:COR:filestart.contains("=LDR  "):TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):131:filestart.contains("=LDR  ") |==> false
4645:COR:filestart.contains("=LDR  "):FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):131:filestart.contains("=LDR  ") |==> true
4646:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):132:inputTypeMrk8 = true |==> <NO-OP>
4647:COR:inputTypeXML:TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):135:inputTypeXML |==> false
4648:COR:inputTypeXML:FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):135:inputTypeXML |==> true
4649:COR:inputTypeJSON:TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):138:inputTypeJSON |==> false
4650:COR:inputTypeJSON:FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):138:inputTypeJSON |==> true
4651:COR:inputTypeMrk8:TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):141:inputTypeMrk8 |==> false
4652:COR:inputTypeMrk8:FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):141:inputTypeMrk8 |==> true
4653:COR:inputTypeBinary:TRUE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):144:inputTypeBinary |==> false
4654:COR:inputTypeBinary:FALSE:org.marc4j.MarcReaderFactory@makeReader(org.marc4j.MarcReaderConfig,java.io.InputStream):144:inputTypeBinary |==> true
4655:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):162:reader != null |==> true
4656:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):162:config.getCombineConsecutiveRecordsFields() != null |==> true
4657:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):162:reader != null && config.getCombineConsecutiveRecordsFields() != null |==> reader != null == (config.getCombineConsecutiveRecordsFields() != null)
4658:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):162:reader != null && config.getCombineConsecutiveRecordsFields() != null |==> false
4659:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):162:reader != null && config.getCombineConsecutiveRecordsFields() != null |==> reader != null
4660:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):162:reader != null && config.getCombineConsecutiveRecordsFields() != null |==> config.getCombineConsecutiveRecordsFields() != null
4661:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):163:reader = new MarcCombiningReader(reader, config.getCombineConsecutiveRecordsFields(), config.getCombineRecordsLeftField(), config.getCombineRecordsRightField()) |==> <NO-OP>
4662:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):169:reader != null |==> true
4663:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):169:reader != null && (config.shouldFilter()) |==> reader != null == (config.shouldFilter())
4664:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):169:reader != null && (config.shouldFilter()) |==> false
4665:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):169:reader != null && (config.shouldFilter()) |==> reader != null
4666:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):169:reader != null && (config.shouldFilter()) |==> (config.shouldFilter())
4667:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):170:reader = new MarcFilteredReader(reader, config.getIncludeIfPresent(), config.getIncludeIfMissing()) |==> <NO-OP>
4668:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:reader != null |==> true
4669:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:marcDeleteSubfields != null |==> true
4670:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:marcRemapRecord != null |==> true
4671:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:marcDeleteSubfields != null || marcRemapRecord != null |==> marcDeleteSubfields != null != (marcRemapRecord != null)
4672:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:marcDeleteSubfields != null || marcRemapRecord != null |==> marcDeleteSubfields != null
4673:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:marcDeleteSubfields != null || marcRemapRecord != null |==> marcRemapRecord != null
4674:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:marcDeleteSubfields != null || marcRemapRecord != null |==> true
4675:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:reader != null && (marcDeleteSubfields != null || marcRemapRecord != null) |==> reader != null == (marcDeleteSubfields != null || marcRemapRecord != null)
4676:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:reader != null && (marcDeleteSubfields != null || marcRemapRecord != null) |==> false
4677:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:reader != null && (marcDeleteSubfields != null || marcRemapRecord != null) |==> reader != null
4678:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):180:reader != null && (marcDeleteSubfields != null || marcRemapRecord != null) |==> (marcDeleteSubfields != null || marcRemapRecord != null)
4679:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):181:marcRemapRecord != null |==> true
4680:STD:<CALL>:<NO-OP>:org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):187:remapProps.load(remapInputStream) |==> <NO-OP>
4681:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):189:reader = new MarcScriptedRecordEditReader(reader, marcDeleteSubfields, remapProps) |==> <NO-OP>
4682:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null |==> true
4683:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() |==> reader != null == config.toUtf8()
4684:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() |==> false
4685:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() |==> reader != null
4686:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() |==> config.toUtf8()
4687:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:config.getUnicodeNormalize() != null |==> true
4688:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() && config.getUnicodeNormalize() != null |==> (reader != null && config.toUtf8()) == (config.getUnicodeNormalize() != null)
4689:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() && config.getUnicodeNormalize() != null |==> false
4690:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() && config.getUnicodeNormalize() != null |==> reader != null && config.toUtf8()
4691:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):197:reader != null && config.toUtf8() && config.getUnicodeNormalize() != null |==> config.getUnicodeNormalize() != null
4692:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcReaderFactory@decorateMarcReader(org.marc4j.MarcReader,org.marc4j.MarcReaderConfig,java.lang.String[]):198:reader = new MarcTranslatedReader(reader, config.getUnicodeNormalize()) |==> <NO-OP>
4693:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@hasNext():98:currentRecord == null |==> false
4694:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@hasNext():99:currentRecord = next() |==> <NO-OP>
4695:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@hasNext():101:currentRecord != null |==> true
4696:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@next():111:currentRecord != null |==> true
4697:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@next():113:currentRecord = null |==> <NO-OP>
4698:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@next():114:return tmp; |==> <NO-OP>
4699:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@next():117:currentRecord == null |==> false
4700:COR:reader.hasNext():TRUE:org.marc4j.MarcScriptedRecordEditReader@next():118:reader.hasNext() |==> false
4701:COR:reader.hasNext():FALSE:org.marc4j.MarcScriptedRecordEditReader@next():118:reader.hasNext() |==> true
4702:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@next():119:return null; |==> <NO-OP>
4703:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@next():124:rec = reader.next() |==> <NO-OP>
4704:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@next():128:deleteSubfieldsSpec != null |==> true
4705:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@next():129:deleteSubfields(rec) |==> <NO-OP>
4706:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@next():131:remapProperties != null |==> true
4707:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@next():133:keepRecord == false |==> false
4708:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@next():133:keepRecord == false |==> keepRecord
4709:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@next():133:keepRecord == false |==> false
4710:STD:<CONT>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@next():136:continue; |==> <NO-OP>
4711:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@next():139:currentRecord = rec |==> <NO-OP>
4712:ROR:>(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):149:fieldSpec.length() > 3 |==> fieldSpec.length() != 3
4713:ROR:>(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):149:fieldSpec.length() > 3 |==> fieldSpec.length() >= 3
4714:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):149:fieldSpec.length() > 3 |==> false
4715:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):150:subfield = fieldSpec.substring(3) |==> <NO-OP>
4716:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):156:subfield != null |==> true
4717:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs != null |==> true
4718:ROR:!=(int,int):<(int,int):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs.size() != 0 |==> sfs.size() < 0
4719:ROR:!=(int,int):>(int,int):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs.size() != 0 |==> sfs.size() > 0
4720:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs.size() != 0 |==> true
4721:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs != null && sfs.size() != 0 |==> sfs != null == (sfs.size() != 0)
4722:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs != null && sfs.size() != 0 |==> false
4723:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs != null && sfs.size() != 0 |==> sfs != null
4724:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):158:sfs != null && sfs.size() != 0 |==> sfs.size() != 0
4725:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):159:rec.removeVariableField(df) |==> <NO-OP>
4726:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):161:df.removeSubfield(sf) |==> <NO-OP>
4727:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):163:rec.addVariableField(df) |==> <NO-OP>
4728:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@deleteSubfields(org.marc4j.marc.Record):166:rec.removeVariableField(df) |==> <NO-OP>
4729:COR:remapProperties.containsKey(tagPlus0):TRUE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):181:remapProperties.containsKey(tagPlus0) |==> false
4730:COR:remapProperties.containsKey(tagPlus0):FALSE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):181:remapProperties.containsKey(tagPlus0) |==> true
4731:COR:Verifier.isControlNumberField(tag):TRUE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):182:Verifier.isControlNumberField(tag) |==> false
4732:COR:Verifier.isControlNumberField(tag):FALSE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):182:Verifier.isControlNumberField(tag) |==> true
4733:COR:eval(mapParts[0], field, rec):TRUE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):186:eval(mapParts[0], field, rec) |==> false
4734:COR:eval(mapParts[0], field, rec):FALSE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):186:eval(mapParts[0], field, rec) |==> true
4735:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):187:keepRecord &= process(mapParts[1], field, null, fToDelete, fToInsert, rec) |==> <NO-OP>
4736:COR:eval(mapParts[0], field, rec):TRUE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):198:eval(mapParts[0], field, rec) |==> false
4737:COR:eval(mapParts[0], field, rec):FALSE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):198:eval(mapParts[0], field, rec) |==> true
4738:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):199:keepRecord &= process(mapParts[1], field, sfToDelete, fToDelete, fToInsert, rec) |==> <NO-OP>
4739:ROR:!=(int,int):<(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):204:sfToDelete.size() != 0 |==> sfToDelete.size() < 0
4740:ROR:!=(int,int):>(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):204:sfToDelete.size() != 0 |==> sfToDelete.size() > 0
4741:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):204:sfToDelete.size() != 0 |==> true
4742:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):206:((DataField)field).removeSubfield(sf) |==> <NO-OP>
4743:COR:keepRecord:TRUE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):211:keepRecord |==> false
4744:COR:keepRecord:FALSE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):211:keepRecord |==> true
4745:STD:<BREAK>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):212:break; |==> <NO-OP>
4746:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):216:keepRecord && remapProperties.containsKey("tagPlus0") |==> keepRecord == remapProperties.containsKey("tagPlus0")
4747:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):216:keepRecord && remapProperties.containsKey("tagPlus0") |==> false
4748:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):216:keepRecord && remapProperties.containsKey("tagPlus0") |==> keepRecord
4749:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):216:keepRecord && remapProperties.containsKey("tagPlus0") |==> remapProperties.containsKey("tagPlus0")
4750:COR:eval(mapParts[0], null, rec):TRUE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):221:eval(mapParts[0], null, rec) |==> false
4751:COR:eval(mapParts[0], null, rec):FALSE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):221:eval(mapParts[0], null, rec) |==> true
4752:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):222:keepRecord &= process(mapParts[1], null, null, fToDelete, fToInsert, rec) |==> <NO-OP>
4753:ROR:!=(int,int):<(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):226:fToDelete.size() != 0 |==> fToDelete.size() < 0
4754:ROR:!=(int,int):>(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):226:fToDelete.size() != 0 |==> fToDelete.size() > 0
4755:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):226:fToDelete.size() != 0 |==> true
4756:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):226:keepRecord && fToDelete.size() != 0 |==> keepRecord == (fToDelete.size() != 0)
4757:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):226:keepRecord && fToDelete.size() != 0 |==> false
4758:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):226:keepRecord && fToDelete.size() != 0 |==> keepRecord
4759:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):226:keepRecord && fToDelete.size() != 0 |==> fToDelete.size() != 0
4760:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):228:rec.removeVariableField(field) |==> <NO-OP>
4761:ROR:!=(int,int):<(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):231:fToInsert.size() != 0 |==> fToInsert.size() < 0
4762:ROR:!=(int,int):>(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):231:fToInsert.size() != 0 |==> fToInsert.size() > 0
4763:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):231:fToInsert.size() != 0 |==> true
4764:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):231:keepRecord && fToInsert.size() != 0 |==> keepRecord == (fToInsert.size() != 0)
4765:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):231:keepRecord && fToInsert.size() != 0 |==> false
4766:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):231:keepRecord && fToInsert.size() != 0 |==> keepRecord
4767:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):231:keepRecord && fToInsert.size() != 0 |==> fToInsert.size() != 0
4768:ROR:>=(int,int):==(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):236:df.getTag().compareTo(field.getTag()) >= 0 |==> df.getTag().compareTo(field.getTag()) == 0
4769:ROR:>=(int,int):>(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):236:df.getTag().compareTo(field.getTag()) >= 0 |==> df.getTag().compareTo(field.getTag()) > 0
4770:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):236:df.getTag().compareTo(field.getTag()) >= 0 |==> true
4771:STD:<BREAK>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):237:break; |==> <NO-OP>
4772:STD:<INC>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):239:index++ |==> <NO-OP>
4773:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):241:rec.getDataFields().add(index, (DataField)field) |==> <NO-OP>
4774:COR:field.getTag().equals("001"):TRUE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):242:field.getTag().equals("001") |==> false
4775:COR:field.getTag().equals("001"):FALSE:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):242:field.getTag().equals("001") |==> true
4776:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):243:rec.addVariableField(field) |==> <NO-OP>
4777:ROR:>=(int,int):==(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):247:df.getTag().compareTo(field.getTag()) >= 0 |==> df.getTag().compareTo(field.getTag()) == 0
4778:ROR:>=(int,int):>(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):247:df.getTag().compareTo(field.getTag()) >= 0 |==> df.getTag().compareTo(field.getTag()) > 0
4779:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):247:df.getTag().compareTo(field.getTag()) >= 0 |==> true
4780:STD:<BREAK>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):248:break; |==> <NO-OP>
4781:STD:<INC>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):250:index++ |==> <NO-OP>
4782:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@remapRecord(org.marc4j.marc.Record):252:rec.getControlFields().add(index, (ControlField)field) |==> <NO-OP>
4783:COR:conditional.startsWith("true()"):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):261:conditional.startsWith("true()") |==> false
4784:COR:conditional.startsWith("true()"):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):261:conditional.startsWith("true()") |==> true
4785:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):262:return true; |==> <NO-OP>
4786:COR:conditional.startsWith("not("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):263:conditional.startsWith("not(") |==> false
4787:COR:conditional.startsWith("not("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):263:conditional.startsWith("not(") |==> true
4788:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):265:arg != null |==> true
4789:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):266:return !eval(arg, field, record); |==> <NO-OP>
4790:COR:conditional.startsWith("indicatormatches("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):268:conditional.startsWith("indicatormatches(") |==> false
4791:COR:conditional.startsWith("indicatormatches("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):268:conditional.startsWith("indicatormatches(") |==> true
4792:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null |==> true
4793:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField |==> field != null == field instanceof DataField
4794:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField |==> false
4795:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField |==> field != null
4796:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField |==> field instanceof DataField
4797:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args.length == 2 |==> args.length <= 2
4798:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args.length == 2 |==> args.length >= 2
4799:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args.length == 2 |==> false
4800:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 |==> (field != null && field instanceof DataField) == (args.length == 2)
4801:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 |==> false
4802:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 |==> field != null && field instanceof DataField
4803:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 |==> args.length == 2
4804:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args[0].length() == 1 |==> args[0].length() <= 1
4805:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args[0].length() == 1 |==> args[0].length() >= 1
4806:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args[0].length() == 1 |==> false
4807:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> (field != null && field instanceof DataField && args.length == 2) == (args[0].length() == 1)
4808:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> false
4809:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> field != null && field instanceof DataField && args.length == 2
4810:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> args[0].length() == 1
4811:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args[1].length() == 1 |==> args[1].length() <= 1
4812:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:args[1].length() == 1 |==> args[1].length() >= 1
4813:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):271:args[1].length() == 1 |==> false
4814:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 && args[1].length() == 1 |==> (field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1) == (args[1].length() == 1)
4815:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 && args[1].length() == 1 |==> false
4816:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 && args[1].length() == 1 |==> field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1
4817:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):270:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 && args[1].length() == 1 |==> args[1].length() == 1
4818:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == '*' |==> args[0].charAt(0) <= '*'
4819:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == '*' |==> args[0].charAt(0) >= '*'
4820:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == '*' |==> false
4821:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == indicator1 |==> args[0].charAt(0) <= indicator1
4822:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == indicator1 |==> args[0].charAt(0) >= indicator1
4823:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == indicator1 |==> false
4824:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1 |==> args[0].charAt(0) == '*' != (args[0].charAt(0) == indicator1)
4825:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1 |==> args[0].charAt(0) == '*'
4826:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1 |==> args[0].charAt(0) == indicator1
4827:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1 |==> true
4828:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[1].charAt(0) == '*' |==> args[1].charAt(0) <= '*'
4829:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[1].charAt(0) == '*' |==> args[1].charAt(0) >= '*'
4830:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):275:args[1].charAt(0) == '*' |==> false
4831:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):275:args[1].charAt(0) == indicator2 |==> args[1].charAt(0) <= indicator2
4832:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):275:args[1].charAt(0) == indicator2 |==> args[1].charAt(0) >= indicator2
4833:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):275:args[1].charAt(0) == indicator2 |==> false
4834:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2 |==> args[1].charAt(0) == '*' != (args[1].charAt(0) == indicator2)
4835:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2 |==> args[1].charAt(0) == '*'
4836:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):275:args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2 |==> args[1].charAt(0) == indicator2
4837:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):275:args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2 |==> true
4838:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:(args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1) && (args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2) |==> (args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1) == (args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2)
4839:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:(args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1) && (args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2) |==> false
4840:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:(args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1) && (args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2) |==> (args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1)
4841:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):274:(args[0].charAt(0) == '*' || args[0].charAt(0) == indicator1) && (args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2) |==> (args[1].charAt(0) == '*' || args[1].charAt(0) == indicator2)
4842:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):276:return true; |==> <NO-OP>
4843:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):278:return false; |==> <NO-OP>
4844:COR:conditional.startsWith("subfieldmatches("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):280:conditional.startsWith("subfieldmatches(") |==> false
4845:COR:conditional.startsWith("subfieldmatches("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):280:conditional.startsWith("subfieldmatches(") |==> true
4846:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null |==> true
4847:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField |==> field != null == field instanceof DataField
4848:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField |==> false
4849:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField |==> field != null
4850:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField |==> field instanceof DataField
4851:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:args.length == 2 |==> args.length <= 2
4852:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:args.length == 2 |==> args.length >= 2
4853:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:args.length == 2 |==> false
4854:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 |==> (field != null && field instanceof DataField) == (args.length == 2)
4855:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 |==> false
4856:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 |==> field != null && field instanceof DataField
4857:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 |==> args.length == 2
4858:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:args[0].length() == 1 |==> args[0].length() <= 1
4859:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:args[0].length() == 1 |==> args[0].length() >= 1
4860:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:args[0].length() == 1 |==> false
4861:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> (field != null && field instanceof DataField && args.length == 2) == (args[0].length() == 1)
4862:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> false
4863:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> field != null && field instanceof DataField && args.length == 2
4864:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):282:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> args[0].length() == 1
4865:COR:sf.getData().matches(args[1]):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):285:sf.getData().matches(args[1]) |==> false
4866:COR:sf.getData().matches(args[1]):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):285:sf.getData().matches(args[1]) |==> true
4867:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):286:return true; |==> <NO-OP>
4868:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null |==> true
4869:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField |==> field != null == field instanceof ControlField
4870:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField |==> false
4871:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField |==> field != null
4872:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField |==> field instanceof ControlField
4873:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:args.length == 2 |==> args.length <= 2
4874:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:args.length == 2 |==> args.length >= 2
4875:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:args.length == 2 |==> false
4876:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField && args.length == 2 |==> (field != null && field instanceof ControlField) == (args.length == 2)
4877:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField && args.length == 2 |==> false
4878:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField && args.length == 2 |==> field != null && field instanceof ControlField
4879:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):289:field != null && field instanceof ControlField && args.length == 2 |==> args.length == 2
4880:COR:((ControlField)field).getData().matches(args[1]):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):290:((ControlField)field).getData().matches(args[1]) |==> false
4881:COR:((ControlField)field).getData().matches(args[1]):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):290:((ControlField)field).getData().matches(args[1]) |==> true
4882:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):291:return true; |==> <NO-OP>
4883:COR:conditional.startsWith("subfieldcontains("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):294:conditional.startsWith("subfieldcontains(") |==> false
4884:COR:conditional.startsWith("subfieldcontains("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):294:conditional.startsWith("subfieldcontains(") |==> true
4885:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null |==> true
4886:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField |==> field != null == field instanceof DataField
4887:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField |==> false
4888:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField |==> field != null
4889:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField |==> field instanceof DataField
4890:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:args.length == 2 |==> args.length <= 2
4891:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:args.length == 2 |==> args.length >= 2
4892:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:args.length == 2 |==> false
4893:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 |==> (field != null && field instanceof DataField) == (args.length == 2)
4894:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 |==> false
4895:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 |==> field != null && field instanceof DataField
4896:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 |==> args.length == 2
4897:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:args[0].length() == 1 |==> args[0].length() <= 1
4898:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:args[0].length() == 1 |==> args[0].length() >= 1
4899:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:args[0].length() == 1 |==> false
4900:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> (field != null && field instanceof DataField && args.length == 2) == (args[0].length() == 1)
4901:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> false
4902:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> field != null && field instanceof DataField && args.length == 2
4903:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):296:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> args[0].length() == 1
4904:COR:sf.getData().contains(args[1]):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):299:sf.getData().contains(args[1]) |==> false
4905:COR:sf.getData().contains(args[1]):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):299:sf.getData().contains(args[1]) |==> true
4906:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):300:return true; |==> <NO-OP>
4907:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null |==> true
4908:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField |==> field != null == field instanceof ControlField
4909:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField |==> false
4910:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField |==> field != null
4911:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField |==> field instanceof ControlField
4912:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:args.length == 2 |==> args.length <= 2
4913:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:args.length == 2 |==> args.length >= 2
4914:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:args.length == 2 |==> false
4915:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField && args.length == 2 |==> (field != null && field instanceof ControlField) == (args.length == 2)
4916:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField && args.length == 2 |==> false
4917:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField && args.length == 2 |==> field != null && field instanceof ControlField
4918:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):303:field != null && field instanceof ControlField && args.length == 2 |==> args.length == 2
4919:COR:((ControlField)field).getData().contains(args[1]):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):304:((ControlField)field).getData().contains(args[1]) |==> false
4920:COR:((ControlField)field).getData().contains(args[1]):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):304:((ControlField)field).getData().contains(args[1]) |==> true
4921:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):305:return true; |==> <NO-OP>
4922:COR:conditional.startsWith("subfieldexists("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):308:conditional.startsWith("subfieldexists(") |==> false
4923:COR:conditional.startsWith("subfieldexists("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):308:conditional.startsWith("subfieldexists(") |==> true
4924:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null |==> true
4925:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField |==> field != null == field instanceof DataField
4926:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField |==> false
4927:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField |==> field != null
4928:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField |==> field instanceof DataField
4929:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:arg.length() == 1 |==> arg.length() <= 1
4930:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:arg.length() == 1 |==> arg.length() >= 1
4931:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:arg.length() == 1 |==> false
4932:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField && arg.length() == 1 |==> (field != null && field instanceof DataField) == (arg.length() == 1)
4933:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField && arg.length() == 1 |==> false
4934:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField && arg.length() == 1 |==> field != null && field instanceof DataField
4935:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):310:field != null && field instanceof DataField && arg.length() == 1 |==> arg.length() == 1
4936:ROR:>(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):312:subfields.size() > 0 |==> subfields.size() != 0
4937:ROR:>(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):312:subfields.size() > 0 |==> subfields.size() >= 0
4938:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):312:subfields.size() > 0 |==> false
4939:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):313:return true; |==> <NO-OP>
4940:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):315:field != null |==> true
4941:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):315:field != null && field instanceof ControlField |==> field != null == field instanceof ControlField
4942:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):315:field != null && field instanceof ControlField |==> false
4943:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):315:field != null && field instanceof ControlField |==> field != null
4944:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):315:field != null && field instanceof ControlField |==> field instanceof ControlField
4945:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):316:return true; |==> <NO-OP>
4946:COR:conditional.startsWith("and("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):318:conditional.startsWith("and(") |==> false
4947:COR:conditional.startsWith("and("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):318:conditional.startsWith("and(") |==> true
4948:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):320:args.length == 2 |==> args.length <= 2
4949:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):320:args.length == 2 |==> args.length >= 2
4950:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):320:args.length == 2 |==> false
4951:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):321:eval(args[0], field, record) && eval(args[1], field, record) |==> eval(args[0], field, record) == eval(args[1], field, record)
4952:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):321:eval(args[0], field, record) && eval(args[1], field, record) |==> false
4953:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):321:eval(args[0], field, record) && eval(args[1], field, record) |==> eval(args[0], field, record)
4954:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):321:eval(args[0], field, record) && eval(args[1], field, record) |==> eval(args[1], field, record)
4955:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):321:return Config.__M_NO == 4954 ? eval(args[1], field, record) : Config.__M_NO == 4953 ? eval(args[0], field, record) : Config.__M_NO == 4952 ? false : Config.__M_NO == 4951 ? eval(args[0], field, record) == eval(args[1], field, record) : Config.__M_NO == 0 && Config.COVERED(4951, 4954) ? eval(args[0], field, record) && eval(args[1], field, record) : eval(args[0], field, record) && eval(args[1], field, record); |==> <NO-OP>
4956:COR:conditional.startsWith("or("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):323:conditional.startsWith("or(") |==> false
4957:COR:conditional.startsWith("or("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):323:conditional.startsWith("or(") |==> true
4958:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):325:args.length == 2 |==> args.length <= 2
4959:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):325:args.length == 2 |==> args.length >= 2
4960:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):325:args.length == 2 |==> false
4961:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):326:eval(args[0], field, record) || eval(args[1], field, record) |==> eval(args[0], field, record) != eval(args[1], field, record)
4962:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):326:eval(args[0], field, record) || eval(args[1], field, record) |==> eval(args[0], field, record)
4963:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):326:eval(args[0], field, record) || eval(args[1], field, record) |==> eval(args[1], field, record)
4964:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):326:eval(args[0], field, record) || eval(args[1], field, record) |==> true
4965:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):326:return Config.__M_NO == 4964 ? true : Config.__M_NO == 4963 ? eval(args[1], field, record) : Config.__M_NO == 4962 ? eval(args[0], field, record) : Config.__M_NO == 4961 ? eval(args[0], field, record) != eval(args[1], field, record) : Config.__M_NO == 0 && Config.COVERED(4961, 4964) ? eval(args[0], field, record) || eval(args[1], field, record) : eval(args[0], field, record) || eval(args[1], field, record); |==> <NO-OP>
4966:COR:conditional.startsWith("fieldexists("):TRUE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):328:conditional.startsWith("fieldexists(") |==> false
4967:COR:conditional.startsWith("fieldexists("):FALSE:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):328:conditional.startsWith("fieldexists(") |==> true
4968:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 |==> args.length <= 3
4969:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 |==> args.length >= 3
4970:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 |==> false
4971:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> args.length == 3 == args[0].matches("[0-9][0-9][0-9]")
4972:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> false
4973:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> args.length == 3
4974:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> args[0].matches("[0-9][0-9][0-9]")
4975:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args[1].length() == 1 |==> args[1].length() <= 1
4976:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args[1].length() == 1 |==> args[1].length() >= 1
4977:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args[1].length() == 1 |==> false
4978:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> (args.length == 3 && args[0].matches("[0-9][0-9][0-9]")) == (args[1].length() == 1)
4979:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> false
4980:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> args.length == 3 && args[0].matches("[0-9][0-9][0-9]")
4981:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):330:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> args[1].length() == 1
4982:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):334:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> sf.getData().equals(args[2]) != sf.getData().matches(args[2])
4983:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):334:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> sf.getData().equals(args[2])
4984:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):334:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> sf.getData().matches(args[2])
4985:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):334:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> true
4986:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):335:return true; |==> <NO-OP>
4987:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@eval(java.lang.String,org.marc4j.marc.VariableField,org.marc4j.marc.Record):341:return false; |==> <NO-OP>
4988:COR:command.startsWith("replace("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):350:command.startsWith("replace(") |==> false
4989:COR:command.startsWith("replace("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):350:command.startsWith("replace(") |==> true
4990:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null |==> true
4991:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField |==> field != null == field instanceof DataField
4992:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField |==> false
4993:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField |==> field != null
4994:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField |==> field instanceof DataField
4995:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:args.length == 3 |==> args.length <= 3
4996:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:args.length == 3 |==> args.length >= 3
4997:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:args.length == 3 |==> false
4998:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 |==> (field != null && field instanceof DataField) == (args.length == 3)
4999:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 |==> false
5000:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 |==> field != null && field instanceof DataField
5001:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 |==> args.length == 3
5002:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:args[0].length() == 1 |==> args[0].length() <= 1
5003:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:args[0].length() == 1 |==> args[0].length() >= 1
5004:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:args[0].length() == 1 |==> false
5005:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 && args[0].length() == 1 |==> (field != null && field instanceof DataField && args.length == 3) == (args[0].length() == 1)
5006:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 && args[0].length() == 1 |==> false
5007:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 && args[0].length() == 1 |==> field != null && field instanceof DataField && args.length == 3
5008:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):352:field != null && field instanceof DataField && args.length == 3 && args[0].length() == 1 |==> args[0].length() == 1
5009:COR:newData.equals(sf.getData()):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):356:newData.equals(sf.getData()) |==> false
5010:COR:newData.equals(sf.getData()):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):356:newData.equals(sf.getData()) |==> true
5011:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):357:sf.setData(newData) |==> <NO-OP>
5012:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null |==> true
5013:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField |==> field != null == field instanceof ControlField
5014:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField |==> false
5015:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField |==> field != null
5016:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField |==> field instanceof ControlField
5017:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:args.length == 3 |==> args.length <= 3
5018:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:args.length == 3 |==> args.length >= 3
5019:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:args.length == 3 |==> false
5020:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField && args.length == 3 |==> (field != null && field instanceof ControlField) == (args.length == 3)
5021:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField && args.length == 3 |==> false
5022:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField && args.length == 3 |==> field != null && field instanceof ControlField
5023:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):360:field != null && field instanceof ControlField && args.length == 3 |==> args.length == 3
5024:COR:newData.equals(((ControlField)field).getData()):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):363:newData.equals(((ControlField)field).getData()) |==> false
5025:COR:newData.equals(((ControlField)field).getData()):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):363:newData.equals(((ControlField)field).getData()) |==> true
5026:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):364:((ControlField)field).setData(newData) |==> <NO-OP>
5027:COR:command.startsWith("append("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):367:command.startsWith("append(") |==> false
5028:COR:command.startsWith("append("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):367:command.startsWith("append(") |==> true
5029:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null |==> true
5030:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField |==> field != null == field instanceof DataField
5031:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField |==> false
5032:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField |==> field != null
5033:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField |==> field instanceof DataField
5034:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:args.length == 2 |==> args.length <= 2
5035:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:args.length == 2 |==> args.length >= 2
5036:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:args.length == 2 |==> false
5037:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 |==> (field != null && field instanceof DataField) == (args.length == 2)
5038:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 |==> false
5039:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 |==> field != null && field instanceof DataField
5040:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 |==> args.length == 2
5041:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:args[0].length() == 1 |==> args[0].length() <= 1
5042:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:args[0].length() == 1 |==> args[0].length() >= 1
5043:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:args[0].length() == 1 |==> false
5044:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> (field != null && field instanceof DataField && args.length == 2) == (args[0].length() == 1)
5045:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> false
5046:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> field != null && field instanceof DataField && args.length == 2
5047:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):369:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> args[0].length() == 1
5048:COR:newData.equals(sf.getData()):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):373:newData.equals(sf.getData()) |==> false
5049:COR:newData.equals(sf.getData()):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):373:newData.equals(sf.getData()) |==> true
5050:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):374:sf.setData(newData) |==> <NO-OP>
5051:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null |==> true
5052:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField |==> field != null == field instanceof ControlField
5053:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField |==> false
5054:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField |==> field != null
5055:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField |==> field instanceof ControlField
5056:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:args.length == 2 |==> args.length <= 2
5057:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:args.length == 2 |==> args.length >= 2
5058:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:args.length == 2 |==> false
5059:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField && args.length == 2 |==> (field != null && field instanceof ControlField) == (args.length == 2)
5060:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField && args.length == 2 |==> false
5061:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField && args.length == 2 |==> field != null && field instanceof ControlField
5062:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):377:field != null && field instanceof ControlField && args.length == 2 |==> args.length == 2
5063:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):379:((ControlField)field).setData(newData) |==> <NO-OP>
5064:COR:command.startsWith("prepend("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):381:command.startsWith("prepend(") |==> false
5065:COR:command.startsWith("prepend("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):381:command.startsWith("prepend(") |==> true
5066:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null |==> true
5067:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField |==> field != null == field instanceof DataField
5068:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField |==> false
5069:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField |==> field != null
5070:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField |==> field instanceof DataField
5071:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:args.length == 2 |==> args.length <= 2
5072:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:args.length == 2 |==> args.length >= 2
5073:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:args.length == 2 |==> false
5074:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 |==> (field != null && field instanceof DataField) == (args.length == 2)
5075:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 |==> false
5076:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 |==> field != null && field instanceof DataField
5077:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 |==> args.length == 2
5078:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:args[0].length() == 1 |==> args[0].length() <= 1
5079:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:args[0].length() == 1 |==> args[0].length() >= 1
5080:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:args[0].length() == 1 |==> false
5081:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> (field != null && field instanceof DataField && args.length == 2) == (args[0].length() == 1)
5082:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> false
5083:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> field != null && field instanceof DataField && args.length == 2
5084:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):383:field != null && field instanceof DataField && args.length == 2 && args[0].length() == 1 |==> args[0].length() == 1
5085:COR:newData.equals(sf.getData()):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):387:newData.equals(sf.getData()) |==> false
5086:COR:newData.equals(sf.getData()):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):387:newData.equals(sf.getData()) |==> true
5087:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):388:sf.setData(newData) |==> <NO-OP>
5088:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null |==> true
5089:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField |==> field != null == field instanceof ControlField
5090:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField |==> false
5091:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField |==> field != null
5092:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField |==> field instanceof ControlField
5093:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:args.length == 2 |==> args.length <= 2
5094:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:args.length == 2 |==> args.length >= 2
5095:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:args.length == 2 |==> false
5096:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField && args.length == 2 |==> (field != null && field instanceof ControlField) == (args.length == 2)
5097:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField && args.length == 2 |==> false
5098:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField && args.length == 2 |==> field != null && field instanceof ControlField
5099:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):391:field != null && field instanceof ControlField && args.length == 2 |==> args.length == 2
5100:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):393:((ControlField)field).setData(newData) |==> <NO-OP>
5101:COR:command.startsWith("deletesubfield("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):395:command.startsWith("deletesubfield(") |==> false
5102:COR:command.startsWith("deletesubfield("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):395:command.startsWith("deletesubfield(") |==> true
5103:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null |==> true
5104:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField |==> field != null == field instanceof DataField
5105:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField |==> false
5106:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField |==> field != null
5107:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField |==> field instanceof DataField
5108:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:arg.length() == 1 |==> arg.length() <= 1
5109:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:arg.length() == 1 |==> arg.length() >= 1
5110:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:arg.length() == 1 |==> false
5111:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField && arg.length() == 1 |==> (field != null && field instanceof DataField) == (arg.length() == 1)
5112:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField && arg.length() == 1 |==> false
5113:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField && arg.length() == 1 |==> field != null && field instanceof DataField
5114:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):397:field != null && field instanceof DataField && arg.length() == 1 |==> arg.length() == 1
5115:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):400:sfToDelete.add(sf) |==> <NO-OP>
5116:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):402:field != null |==> true
5117:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):402:field != null && field instanceof ControlField |==> field != null == field instanceof ControlField
5118:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):402:field != null && field instanceof ControlField |==> false
5119:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):402:field != null && field instanceof ControlField |==> field != null
5120:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):402:field != null && field instanceof ControlField |==> field instanceof ControlField
5121:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):403:fToDelete.add(field) |==> <NO-OP>
5122:COR:command.startsWith("both("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):405:command.startsWith("both(") |==> false
5123:COR:command.startsWith("both("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):405:command.startsWith("both(") |==> true
5124:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):409:args.length == 2 |==> args.length <= 2
5125:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):409:args.length == 2 |==> args.length >= 2
5126:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):409:args.length == 2 |==> false
5127:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):410:returncode = process(args[0], field, sfToDelete, fToDelete, fToInsert, record) |==> <NO-OP>
5128:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):411:returncode &= process(args[1], field, sfToDelete, fToDelete, fToInsert, record) |==> <NO-OP>
5129:COR:command.startsWith("deletefield("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):413:command.startsWith("deletefield(") |==> false
5130:COR:command.startsWith("deletefield("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):413:command.startsWith("deletefield(") |==> true
5131:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):414:fToDelete.add(field) |==> <NO-OP>
5132:COR:command.startsWith("deleteotherfield("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):415:command.startsWith("deleteotherfield(") |==> false
5133:COR:command.startsWith("deleteotherfield("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):415:command.startsWith("deleteotherfield(") |==> true
5134:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 |==> args.length <= 3
5135:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 |==> args.length >= 3
5136:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 |==> false
5137:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> args.length == 3 == args[0].matches("[0-9][0-9][0-9]")
5138:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> false
5139:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> args.length == 3
5140:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") |==> args[0].matches("[0-9][0-9][0-9]")
5141:ROR:==(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args[1].length() == 1 |==> args[1].length() <= 1
5142:ROR:==(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args[1].length() == 1 |==> args[1].length() >= 1
5143:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args[1].length() == 1 |==> false
5144:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> (args.length == 3 && args[0].matches("[0-9][0-9][0-9]")) == (args[1].length() == 1)
5145:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> false
5146:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> args.length == 3 && args[0].matches("[0-9][0-9][0-9]")
5147:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):417:args.length == 3 && args[0].matches("[0-9][0-9][0-9]") && args[1].length() == 1 |==> args[1].length() == 1
5148:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):421:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> sf.getData().equals(args[2]) != sf.getData().matches(args[2])
5149:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):421:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> sf.getData().equals(args[2])
5150:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):421:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> sf.getData().matches(args[2])
5151:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):421:sf.getData().equals(args[2]) || sf.getData().matches(args[2]) |==> true
5152:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):422:fToDelete.add(vf) |==> <NO-OP>
5153:COR:command.startsWith("insertfield("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):427:command.startsWith("insertfield(") |==> false
5154:COR:command.startsWith("insertfield("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):427:command.startsWith("insertfield(") |==> true
5155:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):430:vf != null |==> true
5156:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):431:fToInsert.add(vf) |==> <NO-OP>
5157:COR:command.startsWith("insertparameterizedfield("):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):433:command.startsWith("insertparameterizedfield(") |==> false
5158:COR:command.startsWith("insertparameterizedfield("):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):433:command.startsWith("insertparameterizedfield(") |==> true
5159:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):437:field != null |==> true
5160:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):437:field != null && field instanceof DataField |==> field != null == field instanceof DataField
5161:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):437:field != null && field instanceof DataField |==> false
5162:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):437:field != null && field instanceof DataField |==> field != null
5163:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):437:field != null && field instanceof DataField |==> field instanceof DataField
5164:COR:m.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):443:m.matches() |==> false
5165:COR:m.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):443:m.matches() |==> true
5166:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):448:vf != null |==> true
5167:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):449:fToInsert.add(vf) |==> <NO-OP>
5168:COR:command.startsWith("reject()"):TRUE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):451:command.startsWith("reject()") |==> false
5169:COR:command.startsWith("reject()"):FALSE:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):451:command.startsWith("reject()") |==> true
5170:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@process(java.lang.String,org.marc4j.marc.VariableField,java.util.List<org.marc4j.marc.Subfield>,java.util.List<org.marc4j.marc.VariableField>,java.util.List<org.marc4j.marc.VariableField>,org.marc4j.marc.Record):452:return false; |==> <NO-OP>
5171:AOR:+(int,int):%(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):459:m.groupCount() + 1 |==> m.groupCount() % 1
5172:AOR:+(int,int):*(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):459:m.groupCount() + 1 |==> m.groupCount() * 1
5173:AOR:+(int,int):-(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):459:m.groupCount() + 1 |==> m.groupCount() - 1
5174:AOR:+(int,int):/(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):459:m.groupCount() + 1 |==> m.groupCount() / 1
5175:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):460:result[0] = m.group(0) |==> <NO-OP>
5176:ROR:<(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):461:i < m.groupCount() |==> i != m.groupCount()
5177:ROR:<(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):461:i < m.groupCount() |==> i <= m.groupCount()
5178:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):461:i < m.groupCount() |==> false
5179:AOR:+(int,int):%(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i % 1
5180:AOR:+(int,int):*(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i * 1
5181:AOR:+(int,int):-(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i - 1
5182:AOR:+(int,int):/(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i / 1
5183:AOR:+(int,int):%(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i % 1
5184:AOR:+(int,int):*(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i * 1
5185:AOR:+(int,int):-(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i - 1
5186:AOR:+(int,int):/(int,int):org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:i + 1 |==> i / 1
5187:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@stringsFromMatcher(java.util.regex.Matcher):462:result[i + 1] = m.group(i + 1) |==> <NO-OP>
5188:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):480:factory == null |==> false
5189:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):481:factory = MarcFactory.newInstance() |==> <NO-OP>
5190:COR:cdf.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):483:cdf.matches() |==> false
5191:COR:cdf.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):483:cdf.matches() |==> true
5192:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):487:argmatches != null |==> true
5193:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):488:data = fillParameters(data, argmatches) |==> <NO-OP>
5194:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):490:cf.setData(data) |==> <NO-OP>
5195:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):491:return cf; |==> <NO-OP>
5196:COR:mdf.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):492:mdf.matches() |==> false
5197:COR:mdf.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):492:mdf.matches() |==> true
5198:ROR:<(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 < '0' |==> ind1 != '0'
5199:ROR:<(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 < '0' |==> ind1 <= '0'
5200:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 < '0' |==> false
5201:ROR:>(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 > '9' |==> ind1 != '9'
5202:ROR:>(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 > '9' |==> ind1 >= '9'
5203:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 > '9' |==> false
5204:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 < '0' || ind1 > '9' |==> ind1 < '0' != ind1 > '9'
5205:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 < '0' || ind1 > '9' |==> ind1 < '0'
5206:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 < '0' || ind1 > '9' |==> ind1 > '9'
5207:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):494:ind1 < '0' || ind1 > '9' |==> true
5208:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):495:ind1 = ' ' |==> <NO-OP>
5209:ROR:<(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 < '0' |==> ind2 != '0'
5210:ROR:<(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 < '0' |==> ind2 <= '0'
5211:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 < '0' |==> false
5212:ROR:>(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 > '9' |==> ind2 != '9'
5213:ROR:>(int,int):>=(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 > '9' |==> ind2 >= '9'
5214:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 > '9' |==> false
5215:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 < '0' || ind2 > '9' |==> ind2 < '0' != ind2 > '9'
5216:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 < '0' || ind2 > '9' |==> ind2 < '0'
5217:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 < '0' || ind2 > '9' |==> ind2 > '9'
5218:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):498:ind2 < '0' || ind2 > '9' |==> true
5219:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):499:ind2 = ' ' |==> <NO-OP>
5220:COR:sm.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):505:sm.matches() |==> false
5221:COR:sm.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):505:sm.matches() |==> true
5222:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):508:argmatches != null |==> true
5223:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):509:data = fillParameters(data, argmatches) |==> <NO-OP>
5224:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):511:sfData = sm.group(4) |==> <NO-OP>
5225:STD:<CALL>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):513:df.addSubfield(sf) |==> <NO-OP>
5226:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@createFieldFromString(java.lang.String,java.lang.String[]):516:return df; |==> <NO-OP>
5227:ROR:<(int,int):!=(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):522:i < argmatches.length |==> i != argmatches.length
5228:ROR:<(int,int):<=(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):522:i < argmatches.length |==> i <= argmatches.length
5229:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):522:i < argmatches.length |==> false
5230:AOR:+(int,int):%(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):523:i + 1 |==> i % 1
5231:AOR:+(int,int):*(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):523:i + 1 |==> i * 1
5232:AOR:+(int,int):-(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):523:i + 1 |==> i - 1
5233:AOR:+(int,int):/(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):523:i + 1 |==> i / 1
5234:COR:data.contains("${" + (i + 1) + "}"):TRUE:org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):523:data.contains("${" + (i + 1) + "}") |==> false
5235:COR:data.contains("${" + (i + 1) + "}"):FALSE:org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):523:data.contains("${" + (i + 1) + "}") |==> true
5236:AOR:+(int,int):%(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i % 1
5237:AOR:+(int,int):*(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i * 1
5238:AOR:+(int,int):-(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i - 1
5239:AOR:+(int,int):/(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i / 1
5240:AOR:+(int,int):%(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i % 1
5241:AOR:+(int,int):*(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i * 1
5242:AOR:+(int,int):-(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i - 1
5243:AOR:+(int,int):/(int,int):org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:i + 1 |==> i / 1
5244:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@fillParameters(java.lang.String,java.lang.String[]):524:data = data.replaceAll("[$][{]" + (i + 1) + "[}]", argmatches[i + 1]) |==> <NO-OP>
5245:COR:m.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@getOneArg(java.lang.String):534:m.matches() |==> false
5246:COR:m.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@getOneArg(java.lang.String):534:m.matches() |==> true
5247:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@getOneArg(java.lang.String):535:return m.group(1).replaceAll("\\\"", "\""); |==> <NO-OP>
5248:COR:m.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@getTwoArgs(java.lang.String):545:m.matches() |==> false
5249:COR:m.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@getTwoArgs(java.lang.String):545:m.matches() |==> true
5250:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@getTwoArgs(java.lang.String):548:return result; |==> <NO-OP>
5251:COR:m.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@getThreeArgs(java.lang.String):558:m.matches() |==> false
5252:COR:m.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@getThreeArgs(java.lang.String):558:m.matches() |==> true
5253:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@getThreeArgs(java.lang.String):561:return result; |==> <NO-OP>
5254:COR:m.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@getTwoConditionals(java.lang.String):571:m.matches() |==> false
5255:COR:m.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@getTwoConditionals(java.lang.String):571:m.matches() |==> true
5256:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@getTwoConditionals(java.lang.String):573:return result; |==> <NO-OP>
5257:COR:m.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@getOneConditional(java.lang.String):582:m.matches() |==> false
5258:COR:m.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@getOneConditional(java.lang.String):582:m.matches() |==> true
5259:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@getOneConditional(java.lang.String):584:return result; |==> <NO-OP>
5260:COR:m.matches():TRUE:org.marc4j.MarcScriptedRecordEditReader@getArgAndConditional(java.lang.String):594:m.matches() |==> false
5261:COR:m.matches():FALSE:org.marc4j.MarcScriptedRecordEditReader@getArgAndConditional(java.lang.String):594:m.matches() |==> true
5262:STD:<RETURN>:<NO-OP>:org.marc4j.MarcScriptedRecordEditReader@getArgAndConditional(java.lang.String):596:return result; |==> <NO-OP>
5263:COR:df.getTag().matches(fieldsToSplit):TRUE:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):59:df.getTag().matches(fieldsToSplit) |==> false
5264:COR:df.getTag().matches(fieldsToSplit):FALSE:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):59:df.getTag().matches(fieldsToSplit) |==> true
5265:STD:<CONT>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):60:continue; |==> <NO-OP>
5266:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):62:df.setId(null) |==> <NO-OP>
5267:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):73:data.write(getDataElement(cf.getData())) |==> <NO-OP>
5268:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):74:data.write(Constants.FT) |==> <NO-OP>
5269:AOR:-(int,int):%(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):75:data.size() - previous |==> data.size() % previous
5270:AOR:-(int,int):*(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):75:data.size() - previous |==> data.size() * previous
5271:AOR:-(int,int):+(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):75:data.size() - previous |==> data.size() + previous
5272:AOR:-(int,int):/(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):75:data.size() - previous |==> data.size() / previous
5273:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):75:dir.write(getEntry(cf.getTag(), data.size() - previous, previous)) |==> <NO-OP>
5274:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):76:previous = data.size() |==> <NO-OP>
5275:COR:df.getTag().matches(fieldsToSplit):TRUE:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):81:df.getTag().matches(fieldsToSplit) |==> false
5276:COR:df.getTag().matches(fieldsToSplit):FALSE:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):81:df.getTag().matches(fieldsToSplit) |==> true
5277:STD:<CONT>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):82:continue; |==> <NO-OP>
5278:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):84:data.write(df.getIndicator1()) |==> <NO-OP>
5279:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):85:data.write(df.getIndicator2()) |==> <NO-OP>
5280:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):87:data.write(Constants.US) |==> <NO-OP>
5281:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):88:data.write(sf.getCode()) |==> <NO-OP>
5282:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):89:data.write(getDataElement(sf.getData())) |==> <NO-OP>
5283:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):91:data.write(Constants.FT) |==> <NO-OP>
5284:AOR:-(int,int):%(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):92:data.size() - previous |==> data.size() % previous
5285:AOR:-(int,int):*(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):92:data.size() - previous |==> data.size() * previous
5286:AOR:-(int,int):+(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):92:data.size() - previous |==> data.size() + previous
5287:AOR:-(int,int):/(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):92:data.size() - previous |==> data.size() / previous
5288:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):92:dir.write(getEntry(df.getTag(), data.size() - previous, previous)) |==> <NO-OP>
5289:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):93:previous = data.size() |==> <NO-OP>
5290:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):96:doneWithRec = true |==> <NO-OP>
5291:ROR:>=(int,int):==(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):98:previous >= recordThreshold |==> previous == recordThreshold
5292:ROR:>=(int,int):>(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):98:previous >= recordThreshold |==> previous > recordThreshold
5293:ROR:>=(int,int):TRUE(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):98:previous >= recordThreshold |==> true
5294:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):99:doneWithRec = false |==> <NO-OP>
5295:STD:<BREAK>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):100:break; |==> <NO-OP>
5296:COR:df.getTag().matches(fieldsToSplit):TRUE:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):102:df.getTag().matches(fieldsToSplit) |==> false
5297:COR:df.getTag().matches(fieldsToSplit):FALSE:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):102:df.getTag().matches(fieldsToSplit) |==> true
5298:STD:<CONT>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):103:continue; |==> <NO-OP>
5299:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId() == null |==> false
5300:ROR:!=(int,int):<(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId().intValue() != 0 |==> df.getId().intValue() < 0
5301:ROR:!=(int,int):>(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId().intValue() != 0 |==> df.getId().intValue() > 0
5302:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId().intValue() != 0 |==> true
5303:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId() == null || df.getId().intValue() != 0 |==> df.getId() == null != (df.getId().intValue() != 0)
5304:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId() == null || df.getId().intValue() != 0 |==> df.getId() == null
5305:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId() == null || df.getId().intValue() != 0 |==> df.getId().intValue() != 0
5306:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):105:df.getId() == null || df.getId().intValue() != 0 |==> true
5307:STD:<CONT>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):106:continue; |==> <NO-OP>
5308:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):108:df.setId(new Long(0)) |==> <NO-OP>
5309:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):109:data.write(df.getIndicator1()) |==> <NO-OP>
5310:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):110:data.write(df.getIndicator2()) |==> <NO-OP>
5311:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):112:data.write(Constants.US) |==> <NO-OP>
5312:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):113:data.write(sf.getCode()) |==> <NO-OP>
5313:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):114:data.write(getDataElement(sf.getData())) |==> <NO-OP>
5314:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):116:data.write(Constants.FT) |==> <NO-OP>
5315:AOR:-(int,int):%(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):117:data.size() - previous |==> data.size() % previous
5316:AOR:-(int,int):*(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):117:data.size() - previous |==> data.size() * previous
5317:AOR:-(int,int):+(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):117:data.size() - previous |==> data.size() + previous
5318:AOR:-(int,int):/(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):117:data.size() - previous |==> data.size() / previous
5319:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):117:dir.write(getEntry(df.getTag(), data.size() - previous, previous)) |==> <NO-OP>
5320:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):118:previous = data.size() |==> <NO-OP>
5321:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):120:dir.write(Constants.FT) |==> <NO-OP>
5322:AOR:+(int,int):%(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):125:24 + dir.size() |==> 24 % dir.size()
5323:AOR:+(int,int):*(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):125:24 + dir.size() |==> 24 * dir.size()
5324:AOR:+(int,int):-(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):125:24 + dir.size() |==> 24 - dir.size()
5325:AOR:+(int,int):/(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):125:24 + dir.size() |==> 24 / dir.size()
5326:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):126:ldr.setBaseAddressOfData(baseAddress) |==> <NO-OP>
5327:AOR:+(int,int):%(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() % data.size()
5328:AOR:+(int,int):*(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() * data.size()
5329:AOR:+(int,int):-(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() - data.size()
5330:AOR:+(int,int):/(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() / data.size()
5331:AOR:+(int,int):%(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() + 1 |==> (ldr.getBaseAddressOfData() + data.size()) % 1
5332:AOR:+(int,int):*(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() + 1 |==> (ldr.getBaseAddressOfData() + data.size()) * 1
5333:AOR:+(int,int):-(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() + 1 |==> ldr.getBaseAddressOfData() + data.size() - 1
5334:AOR:+(int,int):/(int,int):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):127:ldr.getBaseAddressOfData() + data.size() + 1 |==> (ldr.getBaseAddressOfData() + data.size()) / 1
5335:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):128:ldr.setRecordLength(recordLength) |==> <NO-OP>
5336:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):131:dir.close() |==> <NO-OP>
5337:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):132:data.close() |==> <NO-OP>
5338:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):134:!allowOversizeEntry && hasOversizeLength |==> !allowOversizeEntry == hasOversizeLength
5339:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):134:!allowOversizeEntry && hasOversizeLength |==> false
5340:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):134:!allowOversizeEntry && hasOversizeLength |==> !allowOversizeEntry
5341:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):134:!allowOversizeEntry && hasOversizeLength |==> hasOversizeLength
5342:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):138:writeLeader(ldr) |==> <NO-OP>
5343:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):139:out.write(dir.toByteArray()) |==> <NO-OP>
5344:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):140:out.write(data.toByteArray()) |==> <NO-OP>
5345:STD:<CALL>:<NO-OP>:org.marc4j.MarcSplitStreamWriter@write(org.marc4j.marc.Record):141:out.write(Constants.RT) |==> <NO-OP>
5346:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream):95:this.out = out |==> <NO-OP>
5347:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream,java.lang.String):106:this.encoding = encoding |==> <NO-OP>
5348:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream,java.lang.String):107:this.out = out |==> <NO-OP>
5349:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream,boolean):117:this.out = out |==> <NO-OP>
5350:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream,boolean):118:this.allowOversizeEntry = allowOversizeRecord |==> <NO-OP>
5351:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream,java.lang.String,boolean):130:this.encoding = encoding |==> <NO-OP>
5352:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream,java.lang.String,boolean):131:this.out = out |==> <NO-OP>
5353:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@<init>(java.io.OutputStream,java.lang.String,boolean):132:this.allowOversizeEntry = allowOversizeRecord |==> <NO-OP>
5354:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@setConverter(org.marc4j.converter.CharConverter):152:this.converter = converter |==> <NO-OP>
5355:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):167:hasOversizeOffset = false |==> <NO-OP>
5356:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):168:hasOversizeLength = false |==> <NO-OP>
5357:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):172:data.write(getDataElement(cf.getData())) |==> <NO-OP>
5358:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):173:data.write(Constants.FT) |==> <NO-OP>
5359:AOR:-(int,int):%(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):174:data.size() - previous |==> data.size() % previous
5360:AOR:-(int,int):*(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):174:data.size() - previous |==> data.size() * previous
5361:AOR:-(int,int):+(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):174:data.size() - previous |==> data.size() + previous
5362:AOR:-(int,int):/(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):174:data.size() - previous |==> data.size() / previous
5363:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):174:dir.write(getEntry(cf.getTag(), data.size() - previous, previous)) |==> <NO-OP>
5364:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):175:previous = data.size() |==> <NO-OP>
5365:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):180:data.write(df.getIndicator1()) |==> <NO-OP>
5366:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):181:data.write(df.getIndicator2()) |==> <NO-OP>
5367:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):183:data.write(Constants.US) |==> <NO-OP>
5368:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):184:data.write(sf.getCode()) |==> <NO-OP>
5369:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):185:data.write(getDataElement(sf.getData())) |==> <NO-OP>
5370:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):187:data.write(Constants.FT) |==> <NO-OP>
5371:AOR:-(int,int):%(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):188:data.size() - previous |==> data.size() % previous
5372:AOR:-(int,int):*(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):188:data.size() - previous |==> data.size() * previous
5373:AOR:-(int,int):+(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):188:data.size() - previous |==> data.size() + previous
5374:AOR:-(int,int):/(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):188:data.size() - previous |==> data.size() / previous
5375:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):188:dir.write(getEntry(df.getTag(), data.size() - previous, previous)) |==> <NO-OP>
5376:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):189:previous = data.size() |==> <NO-OP>
5377:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):191:dir.write(Constants.FT) |==> <NO-OP>
5378:AOR:+(int,int):%(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):196:24 + dir.size() |==> 24 % dir.size()
5379:AOR:+(int,int):*(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):196:24 + dir.size() |==> 24 * dir.size()
5380:AOR:+(int,int):-(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):196:24 + dir.size() |==> 24 - dir.size()
5381:AOR:+(int,int):/(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):196:24 + dir.size() |==> 24 / dir.size()
5382:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):197:ldr.setBaseAddressOfData(baseAddress) |==> <NO-OP>
5383:AOR:+(int,int):%(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() % data.size()
5384:AOR:+(int,int):*(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() * data.size()
5385:AOR:+(int,int):-(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() - data.size()
5386:AOR:+(int,int):/(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() |==> ldr.getBaseAddressOfData() / data.size()
5387:AOR:+(int,int):%(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() + 1 |==> (ldr.getBaseAddressOfData() + data.size()) % 1
5388:AOR:+(int,int):*(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() + 1 |==> (ldr.getBaseAddressOfData() + data.size()) * 1
5389:AOR:+(int,int):-(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() + 1 |==> ldr.getBaseAddressOfData() + data.size() - 1
5390:AOR:+(int,int):/(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):198:ldr.getBaseAddressOfData() + data.size() + 1 |==> (ldr.getBaseAddressOfData() + data.size()) / 1
5391:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):199:ldr.setRecordLength(recordLength) |==> <NO-OP>
5392:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):202:dir.close() |==> <NO-OP>
5393:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):203:data.close() |==> <NO-OP>
5394:ROR:>(int,int):!=(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 |==> baseAddress != 99999
5395:ROR:>(int,int):>=(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 |==> baseAddress >= 99999
5396:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 |==> false
5397:ROR:>(int,int):!=(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:recordLength > 99999 |==> recordLength != 99999
5398:ROR:>(int,int):>=(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:recordLength > 99999 |==> recordLength >= 99999
5399:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:recordLength > 99999 |==> false
5400:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 |==> baseAddress > 99999 != recordLength > 99999
5401:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 |==> baseAddress > 99999
5402:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 |==> recordLength > 99999
5403:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 |==> true
5404:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset |==> (baseAddress > 99999 || recordLength > 99999) != hasOversizeOffset
5405:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset |==> baseAddress > 99999 || recordLength > 99999
5406:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset |==> hasOversizeOffset
5407:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset |==> true
5408:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:!allowOversizeEntry && (baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset) |==> !allowOversizeEntry == (baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset)
5409:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:!allowOversizeEntry && (baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset) |==> false
5410:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:!allowOversizeEntry && (baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset) |==> !allowOversizeEntry
5411:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):205:!allowOversizeEntry && (baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset) |==> (baseAddress > 99999 || recordLength > 99999 || hasOversizeOffset)
5412:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):209:!allowOversizeEntry && (hasOversizeLength) |==> !allowOversizeEntry == (hasOversizeLength)
5413:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):209:!allowOversizeEntry && (hasOversizeLength) |==> false
5414:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):209:!allowOversizeEntry && (hasOversizeLength) |==> !allowOversizeEntry
5415:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):209:!allowOversizeEntry && (hasOversizeLength) |==> (hasOversizeLength)
5416:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):213:converter != null |==> true
5417:COR:converter.outputsUnicode():TRUE:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):214:converter.outputsUnicode() |==> false
5418:COR:converter.outputsUnicode():FALSE:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):214:converter.outputsUnicode() |==> true
5419:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):214:ldr.setCharCodingScheme(converter.outputsUnicode() ? 'a' : ' ') |==> <NO-OP>
5420:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):216:writeLeader(ldr) |==> <NO-OP>
5421:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):217:out.write(dir.toByteArray()) |==> <NO-OP>
5422:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):218:out.write(data.toByteArray()) |==> <NO-OP>
5423:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@write(org.marc4j.marc.Record):219:out.write(Constants.RT) |==> <NO-OP>
5424:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):229:out.write(format5Use.format(ldr.getRecordLength()).getBytes(encoding)) |==> <NO-OP>
5425:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):230:out.write(ldr.getRecordStatus()) |==> <NO-OP>
5426:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):231:out.write(ldr.getTypeOfRecord()) |==> <NO-OP>
5427:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):232:out.write(new String(ldr.getImplDefined1()).getBytes(encoding)) |==> <NO-OP>
5428:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):233:out.write(ldr.getCharCodingScheme()) |==> <NO-OP>
5429:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):234:out.write(Integer.toString(ldr.getIndicatorCount()).getBytes(encoding)) |==> <NO-OP>
5430:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):235:out.write(Integer.toString(ldr.getSubfieldCodeLength()).getBytes(encoding)) |==> <NO-OP>
5431:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):236:out.write(format5Use.format(ldr.getBaseAddressOfData()).getBytes(encoding)) |==> <NO-OP>
5432:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):237:out.write(new String(ldr.getImplDefined2()).getBytes(encoding)) |==> <NO-OP>
5433:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@writeLeader(org.marc4j.marc.Leader):238:out.write(new String(ldr.getEntryMap()).getBytes(encoding)) |==> <NO-OP>
5434:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamWriter@close():247:out.close() |==> <NO-OP>
5435:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcStreamWriter@getDataElement(java.lang.String):254:converter != null |==> true
5436:STD:<RETURN>:<NO-OP>:org.marc4j.MarcStreamWriter@getDataElement(java.lang.String):255:return converter.convert(data).getBytes(encoding); |==> <NO-OP>
5437:ROR:>(int,int):!=(int,int):org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):262:length > 99999 |==> length != 99999
5438:ROR:>(int,int):>=(int,int):org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):262:length > 99999 |==> length >= 99999
5439:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):262:length > 99999 |==> false
5440:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):263:hasOversizeLength = true |==> <NO-OP>
5441:ROR:>(int,int):!=(int,int):org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):265:start > 99999 |==> start != 99999
5442:ROR:>(int,int):>=(int,int):org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):265:start > 99999 |==> start >= 99999
5443:ROR:>(int,int):FALSE(int,int):org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):265:start > 99999 |==> false
5444:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@getEntry(java.lang.String,int,int):266:hasOversizeOffset = true |==> <NO-OP>
5445:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamWriter@setAllowOversizeEntry(boolean):286:this.allowOversizeEntry = allowOversizeEntry |==> <NO-OP>
5446:COR:input.markSupported():TRUE:org.marc4j.MarcStreamReader@<init>(java.io.InputStream,java.lang.String):103:input.markSupported() |==> false
5447:COR:input.markSupported():FALSE:org.marc4j.MarcStreamReader@<init>(java.io.InputStream,java.lang.String):103:input.markSupported() |==> true
5448:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@<init>(java.io.InputStream,java.lang.String):103:this.input = new DataInputStream(input.markSupported() ? input : new BufferedInputStream(input)) |==> <NO-OP>
5449:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcStreamReader@<init>(java.io.InputStream,java.lang.String):105:encoding != null |==> true
5450:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@<init>(java.io.InputStream,java.lang.String):106:this.encoding = encoding |==> <NO-OP>
5451:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@<init>(java.io.InputStream,java.lang.String):107:override = true |==> <NO-OP>
5452:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@hasNext():117:input.mark(10) |==> <NO-OP>
5453:ROR:==(int,int):<=(int,int):org.marc4j.MarcStreamReader@hasNext():118:input.read() == -1 |==> input.read() <= -1
5454:ROR:==(int,int):>=(int,int):org.marc4j.MarcStreamReader@hasNext():118:input.read() == -1 |==> input.read() >= -1
5455:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcStreamReader@hasNext():118:input.read() == -1 |==> false
5456:STD:<RETURN>:<NO-OP>:org.marc4j.MarcStreamReader@hasNext():119:return false; |==> <NO-OP>
5457:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@hasNext():121:input.reset() |==> <NO-OP>
5458:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@next():135:record = factory.newRecord() |==> <NO-OP>
5459:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@next():140:input.readFully(byteArray) |==> <NO-OP>
5460:AOR:-(int,int):%(int,int):org.marc4j.MarcStreamReader@next():143:recordLength - 24 |==> recordLength % 24
5461:AOR:-(int,int):*(int,int):org.marc4j.MarcStreamReader@next():143:recordLength - 24 |==> recordLength * 24
5462:AOR:-(int,int):+(int,int):org.marc4j.MarcStreamReader@next():143:recordLength - 24 |==> recordLength + 24
5463:AOR:-(int,int):/(int,int):org.marc4j.MarcStreamReader@next():143:recordLength - 24 |==> recordLength / 24
5464:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@next():144:input.readFully(recordBuf) |==> <NO-OP>
5465:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@next():145:parseRecord(record, byteArray, recordBuf, recordLength) |==> <NO-OP>
5466:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):161:ldr.setRecordLength(recordLength) |==> <NO-OP>
5467:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):165:parseLeader(ldr, byteArray) |==> <NO-OP>
5468:AOR:+(int,int):%(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:24 + 1 |==> 24 % 1
5469:AOR:+(int,int):*(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:24 + 1 |==> 24 * 1
5470:AOR:+(int,int):-(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:24 + 1 |==> 24 - 1
5471:AOR:+(int,int):/(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:24 + 1 |==> 24 / 1
5472:AOR:-(int,int):%(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() % (24 + 1)
5473:AOR:-(int,int):*(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() * (24 + 1)
5474:AOR:-(int,int):+(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() + (24 + 1)
5475:AOR:-(int,int):/(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:ldr.getBaseAddressOfData() - (24 + 1) |==> ldr.getBaseAddressOfData() / (24 + 1)
5476:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):166:directoryLength = ldr.getBaseAddressOfData() - (24 + 1) |==> <NO-OP>
5477:COR:override:TRUE:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):176:override |==> false
5478:COR:override:FALSE:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):176:override |==> true
5479:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):177:encoding = "ISO-8859-1" |==> <NO-OP>
5480:STD:<BREAK>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):179:break; |==> <NO-OP>
5481:COR:override:TRUE:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):181:override |==> false
5482:COR:override:FALSE:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):181:override |==> true
5483:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):182:encoding = "UTF8" |==> <NO-OP>
5484:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):186:record.setLeader(ldr) |==> <NO-OP>
5485:AOR:%(int,int):*(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):188:directoryLength % 12 |==> directoryLength * 12
5486:AOR:%(int,int):+(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):188:directoryLength % 12 |==> directoryLength + 12
5487:AOR:%(int,int):-(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):188:directoryLength % 12 |==> directoryLength - 12
5488:AOR:%(int,int):/(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):188:directoryLength % 12 |==> directoryLength / 12
5489:ROR:!=(int,int):<(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):188:directoryLength % 12 != 0 |==> directoryLength % 12 < 0
5490:ROR:!=(int,int):>(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):188:directoryLength % 12 != 0 |==> directoryLength % 12 > 0
5491:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):188:directoryLength % 12 != 0 |==> true
5492:AOR:/(int,int):%(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):193:directoryLength / 12 |==> directoryLength % 12
5493:AOR:/(int,int):*(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):193:directoryLength / 12 |==> directoryLength * 12
5494:AOR:/(int,int):+(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):193:directoryLength / 12 |==> directoryLength + 12
5495:AOR:/(int,int):-(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):193:directoryLength / 12 |==> directoryLength - 12
5496:ROR:<(int,int):!=(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):207:i < size |==> i != size
5497:ROR:<(int,int):<=(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):207:i < size |==> i <= size
5498:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):207:i < size |==> false
5499:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):208:inputrec.readFully(tag) |==> <NO-OP>
5500:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):210:tags[i] = tmp |==> <NO-OP>
5501:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):212:inputrec.readFully(length) |==> <NO-OP>
5502:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):213:tmp = new String(length) |==> <NO-OP>
5503:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):214:lengths[i] = Integer.parseInt(tmp) |==> <NO-OP>
5504:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):216:inputrec.readFully(start) |==> <NO-OP>
5505:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):218:tmp = new String(start) |==> <NO-OP>
5506:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):219:starts[i] = Integer.parseInt(tmp) |==> <NO-OP>
5507:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):220:unsortedStartIndex.put(starts[i], i) |==> <NO-OP>
5508:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):224:Arrays.sort(starts) |==> <NO-OP>
5509:ROR:!=(int,int):<(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):226:inputrec.read() != Constants.FT |==> inputrec.read() < Constants.FT
5510:ROR:!=(int,int):>(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):226:inputrec.read() != Constants.FT |==> inputrec.read() > Constants.FT
5511:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):226:inputrec.read() != Constants.FT |==> true
5512:ROR:<(int,int):!=(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):231:s < size |==> s != size
5513:ROR:<(int,int):<=(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):231:s < size |==> s <= size
5514:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):231:s < size |==> false
5515:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):232:i = unsortedStartIndex.get(starts[s]).intValue() |==> <NO-OP>
5516:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):234:getFieldLength(inputrec) |==> <NO-OP>
5517:COR:Verifier.isControlField(tags[i]):TRUE:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):236:Verifier.isControlField(tags[i]) |==> false
5518:COR:Verifier.isControlField(tags[i]):FALSE:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):236:Verifier.isControlField(tags[i]) |==> true
5519:AOR:-(int,int):%(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):237:lengths[i] - 1 |==> lengths[i] % 1
5520:AOR:-(int,int):*(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):237:lengths[i] - 1 |==> lengths[i] * 1
5521:AOR:-(int,int):+(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):237:lengths[i] - 1 |==> lengths[i] + 1
5522:AOR:-(int,int):/(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):237:lengths[i] - 1 |==> lengths[i] / 1
5523:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):237:byteArray = new byte[lengths[i] - 1] |==> <NO-OP>
5524:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):238:inputrec.readFully(byteArray) |==> <NO-OP>
5525:ROR:!=(int,int):<(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):240:inputrec.read() != Constants.FT |==> inputrec.read() < Constants.FT
5526:ROR:!=(int,int):>(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):240:inputrec.read() != Constants.FT |==> inputrec.read() > Constants.FT
5527:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):240:inputrec.read() != Constants.FT |==> true
5528:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):245:field.setTag(tags[i]) |==> <NO-OP>
5529:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):246:field.setData(getDataAsString(byteArray)) |==> <NO-OP>
5530:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):247:record.addVariableField(field) |==> <NO-OP>
5531:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):249:byteArray = new byte[lengths[i]] |==> <NO-OP>
5532:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):250:inputrec.readFully(byteArray) |==> <NO-OP>
5533:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):253:record.addVariableField(parseDataField(tags[i], byteArray)) |==> <NO-OP>
5534:ROR:!=(int,int):<(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):261:inputrec.read() != Constants.RT |==> inputrec.read() < Constants.RT
5535:ROR:!=(int,int):>(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):261:inputrec.read() != Constants.RT |==> inputrec.read() > Constants.RT
5536:ROR:!=(int,int):TRUE(int,int):org.marc4j.MarcStreamReader@parseRecord(org.marc4j.marc.Record,byte[],byte[],int):261:inputrec.read() != Constants.RT |==> true
5537:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):275:dataField.setTag(tag) |==> <NO-OP>
5538:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):276:dataField.setIndicator1(ind1) |==> <NO-OP>
5539:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):277:dataField.setIndicator2(ind2) |==> <NO-OP>
5540:ROR:<(int,int):!=(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):286:readByte < 0 |==> readByte != 0
5541:ROR:<(int,int):<=(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):286:readByte < 0 |==> readByte <= 0
5542:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):286:readByte < 0 |==> false
5543:STD:<BREAK>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):287:break; |==> <NO-OP>
5544:ROR:<(int,int):!=(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):292:code < 0 |==> code != 0
5545:ROR:<(int,int):<=(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):292:code < 0 |==> code <= 0
5546:ROR:<(int,int):FALSE(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):292:code < 0 |==> false
5547:ROR:==(int,int):<=(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):295:code == Constants.FT |==> code <= Constants.FT
5548:ROR:==(int,int):>=(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):295:code == Constants.FT |==> code >= Constants.FT
5549:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):295:code == Constants.FT |==> false
5550:STD:<BREAK>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):296:break; |==> <NO-OP>
5551:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):300:bais.read(data) |==> <NO-OP>
5552:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):302:subfield.setCode((char)code) |==> <NO-OP>
5553:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):303:subfield.setData(getDataAsString(data)) |==> <NO-OP>
5554:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):304:dataField.addSubfield(subfield) |==> <NO-OP>
5555:STD:<BREAK>:<NO-OP>:org.marc4j.MarcStreamReader@parseDataField(java.lang.String,byte[]):307:break; |==> <NO-OP>
5556:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@getFieldLength(java.io.DataInputStream):314:bais.mark(9999) |==> <NO-OP>
5557:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@getFieldLength(java.io.DataInputStream):319:bais.reset() |==> <NO-OP>
5558:STD:<RETURN>:<NO-OP>:org.marc4j.MarcStreamReader@getFieldLength(java.io.DataInputStream):320:return bytesRead; |==> <NO-OP>
5559:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@getFieldLength(java.io.DataInputStream):322:bais.reset() |==> <NO-OP>
5560:STD:<INC>:<NO-OP>:org.marc4j.MarcStreamReader@getFieldLength(java.io.DataInputStream):326:bytesRead++ |==> <NO-OP>
5561:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):332:bais.mark(9999) |==> <NO-OP>
5562:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):338:bais.reset() |==> <NO-OP>
5563:STD:<RETURN>:<NO-OP>:org.marc4j.MarcStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):339:return bytesRead; |==> <NO-OP>
5564:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):341:bais.reset() |==> <NO-OP>
5565:STD:<INC>:<NO-OP>:org.marc4j.MarcStreamReader@getSubfieldLength(java.io.ByteArrayInputStream):344:bytesRead++ |==> <NO-OP>
5566:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecordLength(byte[]):353:isr.read(tmp) |==> <NO-OP>
5567:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseRecordLength(byte[]):355:length = Integer.parseInt(new String(tmp)) |==> <NO-OP>
5568:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):365:isr.read(tmp) |==> <NO-OP>
5569:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):368:ldr.setRecordStatus((char)isr.read()) |==> <NO-OP>
5570:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):369:ldr.setTypeOfRecord((char)isr.read()) |==> <NO-OP>
5571:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):370:tmp = new char[2] |==> <NO-OP>
5572:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):371:isr.read(tmp) |==> <NO-OP>
5573:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):372:ldr.setImplDefined1(tmp) |==> <NO-OP>
5574:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):373:ldr.setCharCodingScheme((char)isr.read()) |==> <NO-OP>
5575:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):377:isr.read(baseAddr) |==> <NO-OP>
5576:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):378:tmp = new char[3] |==> <NO-OP>
5577:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):379:isr.read(tmp) |==> <NO-OP>
5578:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):380:ldr.setImplDefined2(tmp) |==> <NO-OP>
5579:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):381:tmp = new char[4] |==> <NO-OP>
5580:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):382:isr.read(tmp) |==> <NO-OP>
5581:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):383:ldr.setEntryMap(tmp) |==> <NO-OP>
5582:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):384:isr.close() |==> <NO-OP>
5583:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):386:ldr.setIndicatorCount(Integer.parseInt(String.valueOf(indicatorCount))) |==> <NO-OP>
5584:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):391:ldr.setSubfieldCodeLength(Integer.parseInt(String.valueOf(subfieldCodeLength))) |==> <NO-OP>
5585:STD:<CALL>:<NO-OP>:org.marc4j.MarcStreamReader@parseLeader(org.marc4j.marc.Leader,byte[]):396:ldr.setBaseAddressOfData(Integer.parseInt(new String(baseAddr))) |==> <NO-OP>
5586:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):405:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> encoding.equals("UTF-8") != encoding.equals("UTF8")
5587:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):405:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> encoding.equals("UTF-8")
5588:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):405:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> encoding.equals("UTF8")
5589:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):405:encoding.equals("UTF-8") || encoding.equals("UTF8") |==> true
5590:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):411:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> encoding.equals("MARC-8") != encoding.equals("MARC8")
5591:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):411:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> encoding.equals("MARC-8")
5592:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):411:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> encoding.equals("MARC8")
5593:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):411:encoding.equals("MARC-8") || encoding.equals("MARC8") |==> true
5594:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcStreamReader@getDataAsString(byte[]):412:converterAnsel == null |==> false
5595:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@getDataAsString(byte[]):413:converterAnsel = new AnselToUnicode() |==> <NO-OP>
5596:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcStreamReader@getDataAsString(byte[]):415:dataElement = converterAnsel.convert(bytes) |==> <NO-OP>
5597:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> encoding.equals("ISO-8859-1") != encoding.equals("ISO8859_1")
5598:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> encoding.equals("ISO-8859-1")
5599:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> encoding.equals("ISO8859_1")
5600:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") |==> true
5601:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") || encoding.equals("ISO_8859_1") |==> (encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1")) != encoding.equals("ISO_8859_1")
5602:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") || encoding.equals("ISO_8859_1") |==> encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1")
5603:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") || encoding.equals("ISO_8859_1") |==> encoding.equals("ISO_8859_1")
5604:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcStreamReader@getDataAsString(byte[]):416:encoding.equals("ISO-8859-1") || encoding.equals("ISO8859_1") || encoding.equals("ISO_8859_1") |==> true
5605:COR:override:TRUE:org.marc4j.MarcStreamReader@getDataAsString(byte[]):422:override |==> false
5606:COR:override:FALSE:org.marc4j.MarcStreamReader@getDataAsString(byte[]):422:override |==> true
5607:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,boolean):51:reader = r |==> <NO-OP>
5608:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,boolean):52:convert = new AnselToUnicode() |==> <NO-OP>
5609:COR:unicodeNormalizeBool:TRUE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,boolean):54:unicodeNormalizeBool |==> false
5610:COR:unicodeNormalizeBool:FALSE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,boolean):54:unicodeNormalizeBool |==> true
5611:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,boolean):55:this.unicodeNormalize = Normalizer.Form.NFC |==> <NO-OP>
5612:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):68:reader = r |==> <NO-OP>
5613:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):69:convert = new AnselToUnicode() |==> <NO-OP>
5614:COR:unicodeNormalizeStr.equals("KC"):TRUE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):71:unicodeNormalizeStr.equals("KC") |==> false
5615:COR:unicodeNormalizeStr.equals("KC"):FALSE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):71:unicodeNormalizeStr.equals("KC") |==> true
5616:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):72:unicodeNormalize = Normalizer.Form.NFKC |==> <NO-OP>
5617:COR:unicodeNormalizeStr.equals("KD"):TRUE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):73:unicodeNormalizeStr.equals("KD") |==> false
5618:COR:unicodeNormalizeStr.equals("KD"):FALSE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):73:unicodeNormalizeStr.equals("KD") |==> true
5619:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):74:unicodeNormalize = Normalizer.Form.NFKD |==> <NO-OP>
5620:COR:unicodeNormalizeStr.equals("C"):TRUE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):75:unicodeNormalizeStr.equals("C") |==> false
5621:COR:unicodeNormalizeStr.equals("C"):FALSE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):75:unicodeNormalizeStr.equals("C") |==> true
5622:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):76:unicodeNormalize = Normalizer.Form.NFC |==> <NO-OP>
5623:COR:unicodeNormalizeStr.equals("D"):TRUE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):77:unicodeNormalizeStr.equals("D") |==> false
5624:COR:unicodeNormalizeStr.equals("D"):FALSE:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):77:unicodeNormalizeStr.equals("D") |==> true
5625:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):78:unicodeNormalize = Normalizer.Form.NFD |==> <NO-OP>
5626:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@<init>(org.marc4j.MarcReader,java.lang.String):80:unicodeNormalize = null |==> <NO-OP>
5627:ROR:==(int,int):<=(int,int):org.marc4j.MarcTranslatedReader@next():101:l.getCharCodingScheme() == 'a' |==> l.getCharCodingScheme() <= 'a'
5628:ROR:==(int,int):>=(int,int):org.marc4j.MarcTranslatedReader@next():101:l.getCharCodingScheme() == 'a' |==> l.getCharCodingScheme() >= 'a'
5629:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcTranslatedReader@next():101:l.getCharCodingScheme() == 'a' |==> false
5630:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():102:is_utf_8 = true |==> <NO-OP>
5631:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcTranslatedReader@next():105:unicodeNormalize == null |==> false
5632:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcTranslatedReader@next():105:is_utf_8 && unicodeNormalize == null |==> is_utf_8 == (unicodeNormalize == null)
5633:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcTranslatedReader@next():105:is_utf_8 && unicodeNormalize == null |==> false
5634:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcTranslatedReader@next():105:is_utf_8 && unicodeNormalize == null |==> is_utf_8
5635:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcTranslatedReader@next():105:is_utf_8 && unicodeNormalize == null |==> unicodeNormalize == null
5636:STD:<RETURN>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():106:return (rec); |==> <NO-OP>
5637:STD:<CONT>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():113:continue; |==> <NO-OP>
5638:COR:is_utf_8:TRUE:org.marc4j.MarcTranslatedReader@next():123:is_utf_8 |==> false
5639:COR:is_utf_8:FALSE:org.marc4j.MarcTranslatedReader@next():123:is_utf_8 |==> true
5640:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():124:newData = convert.convert(newData) |==> <NO-OP>
5641:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcTranslatedReader@next():127:unicodeNormalize != null |==> true
5642:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():128:newData = Normalizer.normalize(newData, unicodeNormalize) |==> <NO-OP>
5643:COR:oldData.equals(newData):TRUE:org.marc4j.MarcTranslatedReader@next():131:oldData.equals(newData) |==> false
5644:COR:oldData.equals(newData):FALSE:org.marc4j.MarcTranslatedReader@next():131:oldData.equals(newData) |==> true
5645:STD:<CALL>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():132:sf.setData(newData) |==> <NO-OP>
5646:STD:<CALL>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():137:l.setCharCodingScheme('a') |==> <NO-OP>
5647:STD:<CALL>:<NO-OP>:org.marc4j.MarcTranslatedReader@next():138:rec.setLeader(l) |==> <NO-OP>
5648:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@<init>(java.io.InputStream):17:reader = new MarcXmlReader(input) |==> <NO-OP>
5649:STD:<CALL>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@next():39:rec.getLeader().setCharCodingScheme('a') |==> <NO-OP>
5650:COR:data.contains("\n"):TRUE:org.marc4j.MarcUnprettyXmlReader@next():46:data.contains("\n") |==> false
5651:COR:data.contains("\n"):FALSE:org.marc4j.MarcUnprettyXmlReader@next():46:data.contains("\n") |==> true
5652:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@next():47:data = data.replaceAll("\\r?\\n[ \t]*", " ") |==> <NO-OP>
5653:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@next():48:data = data.trim() |==> <NO-OP>
5654:STD:<CALL>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@next():49:cf.setData(data) |==> <NO-OP>
5655:COR:data.contains("\n"):TRUE:org.marc4j.MarcUnprettyXmlReader@next():57:data.contains("\n") |==> false
5656:COR:data.contains("\n"):FALSE:org.marc4j.MarcUnprettyXmlReader@next():57:data.contains("\n") |==> true
5657:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@next():58:data = data.replaceAll("\\r?\\n[ \t]*", " ") |==> <NO-OP>
5658:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@next():59:data = data.trim() |==> <NO-OP>
5659:STD:<CALL>:<NO-OP>:org.marc4j.MarcUnprettyXmlReader@next():60:sf.setData(data) |==> <NO-OP>
5660:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlReader@<init>(org.xml.sax.InputSource):96:producer.start() |==> <NO-OP>
5661:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlReader@<init>(org.xml.sax.InputSource,javax.xml.transform.Source):151:producer.setTransformerHandler(th) |==> <NO-OP>
5662:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlReader@<init>(org.xml.sax.InputSource,javax.xml.transform.Source):152:producer.start() |==> <NO-OP>
5663:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlReader@<init>(org.xml.sax.InputSource,javax.xml.transform.sax.TransformerHandler):192:producer.setTransformerHandler(th) |==> <NO-OP>
5664:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlReader@<init>(org.xml.sax.InputSource,javax.xml.transform.sax.TransformerHandler):193:producer.start() |==> <NO-OP>
5665:ROR:>(int,int):!=(int,int):org.marc4j.RecordStack@push(org.marc4j.marc.Record):56:list.size() > 0 |==> list.size() != 0
5666:ROR:>(int,int):>=(int,int):org.marc4j.RecordStack@push(org.marc4j.marc.Record):56:list.size() > 0 |==> list.size() >= 0
5667:ROR:>(int,int):FALSE(int,int):org.marc4j.RecordStack@push(org.marc4j.marc.Record):56:list.size() > 0 |==> false
5668:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@push(org.marc4j.marc.Record):58:wait() |==> <NO-OP>
5669:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@push(org.marc4j.marc.Record):62:list.add(record) |==> <NO-OP>
5670:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@push(org.marc4j.marc.Record):63:notifyAll() |==> <NO-OP>
5671:ROR:<=(int,int):<(int,int):org.marc4j.RecordStack@pop():73:list.size() <= 0 |==> list.size() < 0
5672:ROR:<=(int,int):==(int,int):org.marc4j.RecordStack@pop():73:list.size() <= 0 |==> list.size() == 0
5673:ROR:<=(int,int):TRUE(int,int):org.marc4j.RecordStack@pop():73:list.size() <= 0 |==> true
5674:ROR:!=(boolean,boolean):LHS(boolean,boolean):org.marc4j.RecordStack@pop():73:eof != true |==> eof
5675:ROR:!=(boolean,boolean):RHS(boolean,boolean):org.marc4j.RecordStack@pop():73:eof != true |==> true
5676:ROR:!=(boolean,boolean):TRUE(boolean,boolean):org.marc4j.RecordStack@pop():73:eof != true |==> true
5677:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.RecordStack@pop():73:list.size() <= 0 && eof != true |==> list.size() <= 0 == (eof != true)
5678:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.RecordStack@pop():73:list.size() <= 0 && eof != true |==> false
5679:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.RecordStack@pop():73:list.size() <= 0 && eof != true |==> list.size() <= 0
5680:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.RecordStack@pop():73:list.size() <= 0 && eof != true |==> eof != true
5681:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@pop():75:wait() |==> <NO-OP>
5682:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.RecordStack@pop():79:re != null |==> true
5683:ROR:>(int,int):!=(int,int):org.marc4j.RecordStack@pop():83:list.size() > 0 |==> list.size() != 0
5684:ROR:>(int,int):>=(int,int):org.marc4j.RecordStack@pop():83:list.size() > 0 |==> list.size() >= 0
5685:ROR:>(int,int):FALSE(int,int):org.marc4j.RecordStack@pop():83:list.size() > 0 |==> false
5686:STD:<ASSIGN>:<NO-OP>:org.marc4j.RecordStack@pop():84:record = list.remove(0) |==> <NO-OP>
5687:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@pop():86:notifyAll() |==> <NO-OP>
5688:ROR:<=(int,int):<(int,int):org.marc4j.RecordStack@hasNext():98:list.size() <= 0 |==> list.size() < 0
5689:ROR:<=(int,int):==(int,int):org.marc4j.RecordStack@hasNext():98:list.size() <= 0 |==> list.size() == 0
5690:ROR:<=(int,int):TRUE(int,int):org.marc4j.RecordStack@hasNext():98:list.size() <= 0 |==> true
5691:ROR:!=(boolean,boolean):LHS(boolean,boolean):org.marc4j.RecordStack@hasNext():98:eof != true |==> eof
5692:ROR:!=(boolean,boolean):RHS(boolean,boolean):org.marc4j.RecordStack@hasNext():98:eof != true |==> true
5693:ROR:!=(boolean,boolean):TRUE(boolean,boolean):org.marc4j.RecordStack@hasNext():98:eof != true |==> true
5694:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.RecordStack@hasNext():98:list.size() <= 0 && eof != true |==> list.size() <= 0 == (eof != true)
5695:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.RecordStack@hasNext():98:list.size() <= 0 && eof != true |==> false
5696:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.RecordStack@hasNext():98:list.size() <= 0 && eof != true |==> list.size() <= 0
5697:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.RecordStack@hasNext():98:list.size() <= 0 && eof != true |==> eof != true
5698:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@hasNext():100:wait() |==> <NO-OP>
5699:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.RecordStack@hasNext():104:re != null |==> true
5700:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.RecordStack@hasNext():107:!isEmpty() || !eof |==> !isEmpty() != !eof
5701:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.RecordStack@hasNext():107:!isEmpty() || !eof |==> !isEmpty()
5702:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.RecordStack@hasNext():107:!isEmpty() || !eof |==> !eof
5703:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.RecordStack@hasNext():107:!isEmpty() || !eof |==> true
5704:STD:<RETURN>:<NO-OP>:org.marc4j.RecordStack@hasNext():108:return true; |==> <NO-OP>
5705:STD:<ASSIGN>:<NO-OP>:org.marc4j.RecordStack@passException(java.lang.RuntimeException):121:re = e |==> <NO-OP>
5706:STD:<ASSIGN>:<NO-OP>:org.marc4j.RecordStack@passException(java.lang.RuntimeException):122:eof = true |==> <NO-OP>
5707:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@passException(java.lang.RuntimeException):123:notifyAll() |==> <NO-OP>
5708:STD:<ASSIGN>:<NO-OP>:org.marc4j.RecordStack@end():130:eof = true |==> <NO-OP>
5709:STD:<CALL>:<NO-OP>:org.marc4j.RecordStack@end():131:notifyAll() |==> <NO-OP>
5710:ROR:==(int,int):<=(int,int):org.marc4j.RecordStack@isEmpty():140:list.size() == 0 |==> list.size() <= 0
5711:ROR:==(int,int):>=(int,int):org.marc4j.RecordStack@isEmpty():140:list.size() == 0 |==> list.size() >= 0
5712:ROR:==(int,int):FALSE(int,int):org.marc4j.RecordStack@isEmpty():140:list.size() == 0 |==> false
5713:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:101:ELEMENTS.put("collection", new Integer(COLLECTION_ID)) |==> <NO-OP>
5714:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:102:ELEMENTS.put("leader", new Integer(LEADER_ID)) |==> <NO-OP>
5715:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:103:ELEMENTS.put("record", new Integer(RECORD_ID)) |==> <NO-OP>
5716:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:104:ELEMENTS.put("controlfield", new Integer(CONTROLFIELD_ID)) |==> <NO-OP>
5717:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:105:ELEMENTS.put("datafield", new Integer(DATAFIELD_ID)) |==> <NO-OP>
5718:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:106:ELEMENTS.put("subfield", new Integer(SUBFIELD_ID)) |==> <NO-OP>
5719:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:109:RECORD_TYPES.add("Bibliographic") |==> <NO-OP>
5720:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:110:RECORD_TYPES.add("Authority") |==> <NO-OP>
5721:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:111:RECORD_TYPES.add("Holdings") |==> <NO-OP>
5722:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:112:RECORD_TYPES.add("Classification") |==> <NO-OP>
5723:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler:113:RECORD_TYPES.add("Community") |==> <NO-OP>
5724:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@<init>(org.marc4j.RecordStack):123:factory = MarcFactory.newInstance() |==> <NO-OP>
5725:ROR:==(int,int):<=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):139:name.length() == 0 |==> name.length() <= 0
5726:ROR:==(int,int):>=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):139:name.length() == 0 |==> name.length() >= 0
5727:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):139:name.length() == 0 |==> false
5728:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):142:elementType == null |==> false
5729:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):143:record != null |==> true
5730:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):144:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Unexpected XML element: " + realname) |==> <NO-OP>
5731:STD:<RETURN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):145:return; |==> <NO-OP>
5732:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):153:break; |==> <NO-OP>
5733:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):157:record = factory.newRecord() |==> <NO-OP>
5734:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):159:typeAttr != null |==> true
5735:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):159:typeAttr != null && RECORD_TYPES.contains(typeAttr) |==> typeAttr != null == RECORD_TYPES.contains(typeAttr)
5736:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):159:typeAttr != null && RECORD_TYPES.contains(typeAttr) |==> false
5737:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):159:typeAttr != null && RECORD_TYPES.contains(typeAttr) |==> typeAttr != null
5738:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):159:typeAttr != null && RECORD_TYPES.contains(typeAttr) |==> RECORD_TYPES.contains(typeAttr)
5739:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):160:record.setType(typeAttr) |==> <NO-OP>
5740:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):162:prev_tag = "n/a" |==> <NO-OP>
5741:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):164:break; |==> <NO-OP>
5742:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):166:sb = new StringBuffer() |==> <NO-OP>
5743:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):167:break; |==> <NO-OP>
5744:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):169:tag = atts.getValue(TAG_ATTR) |==> <NO-OP>
5745:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):171:tag == null |==> false
5746:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):172:record != null |==> true
5747:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):173:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Missing tag element in ControlField after tag: " + prev_tag) |==> <NO-OP>
5748:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):177:break; |==> <NO-OP>
5749:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):180:controlField = factory.newControlField(tag) |==> <NO-OP>
5750:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):181:sb = new StringBuffer() |==> <NO-OP>
5751:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):184:tag = atts.getValue(TAG_ATTR) |==> <NO-OP>
5752:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):186:tag == null |==> false
5753:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):187:record != null |==> true
5754:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):188:record.addError("n/a", "n/a", MarcError.MINOR_ERROR, "Missing tag element in datafield after tag: " + prev_tag) |==> <NO-OP>
5755:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):192:break; |==> <NO-OP>
5756:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):198:ind1 == null |==> false
5757:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):199:record != null |==> true
5758:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):200:record.addError(tag, "n/a", MarcError.MINOR_ERROR, "DataField (" + tag + ") missing first indicator") |==> <NO-OP>
5759:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):204:break; |==> <NO-OP>
5760:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):207:ind2 == null |==> false
5761:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):208:record != null |==> true
5762:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):209:record.addError(tag, "n/a", MarcError.MINOR_ERROR, "DataField (" + tag + ") missing second indicator") |==> <NO-OP>
5763:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):213:break; |==> <NO-OP>
5764:ROR:==(int,int):<=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):216:ind1.length() == 0 |==> ind1.length() <= 0
5765:ROR:==(int,int):>=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):216:ind1.length() == 0 |==> ind1.length() >= 0
5766:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):216:ind1.length() == 0 |==> false
5767:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):217:ind1 = " " |==> <NO-OP>
5768:ROR:==(int,int):<=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):220:ind2.length() == 0 |==> ind2.length() <= 0
5769:ROR:==(int,int):>=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):220:ind2.length() == 0 |==> ind2.length() >= 0
5770:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):220:ind2.length() == 0 |==> false
5771:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):221:ind2 = " " |==> <NO-OP>
5772:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):224:dataField = factory.newDataField(tag, ind1.charAt(0), ind2.charAt(0)) |==> <NO-OP>
5773:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):229:code == null |==> false
5774:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):230:record != null |==> true
5775:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):231:record.addError(tag, "n/a", MarcError.MINOR_ERROR, "Subfield (" + tag + ") missing code attribute") |==> <NO-OP>
5776:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):235:break; |==> <NO-OP>
5777:ROR:==(int,int):<=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):238:code.length() == 0 |==> code.length() <= 0
5778:ROR:==(int,int):>=(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):238:code.length() == 0 |==> code.length() >= 0
5779:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):238:code.length() == 0 |==> false
5780:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):239:code = " " |==> <NO-OP>
5781:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):242:subfield = factory.newSubfield(code.charAt(0)) |==> <NO-OP>
5782:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):243:sb = new StringBuffer() |==> <NO-OP>
5783:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):245:prev_tag = tag |==> <NO-OP>
5784:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@characters(char[],int,int):257:sb != null |==> true
5785:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@characters(char[],int,int):258:sb.append(ch, start, length) |==> <NO-OP>
5786:ROR:==(int,int):<=(int,int):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):271:name.length() == 0 |==> name.length() <= 0
5787:ROR:==(int,int):>=(int,int):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):271:name.length() == 0 |==> name.length() >= 0
5788:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):271:name.length() == 0 |==> false
5789:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):274:elementType == null |==> false
5790:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):275:record != null |==> true
5791:STD:<RETURN>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):277:return; |==> <NO-OP>
5792:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):285:break; |==> <NO-OP>
5793:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):287:queue.push(record) |==> <NO-OP>
5794:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):288:break; |==> <NO-OP>
5795:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):291:record.setLeader(leader) |==> <NO-OP>
5796:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):292:break; |==> <NO-OP>
5797:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):294:controlField != null |==> true
5798:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):295:controlField.setData(sb.toString()) |==> <NO-OP>
5799:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):296:record.addVariableField(controlField) |==> <NO-OP>
5800:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):297:controlField = null |==> <NO-OP>
5801:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):299:break; |==> <NO-OP>
5802:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):301:dataField != null |==> true
5803:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):302:record.addVariableField(dataField) |==> <NO-OP>
5804:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):303:dataField = null |==> <NO-OP>
5805:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):305:break; |==> <NO-OP>
5806:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):307:dataField != null |==> true
5807:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):307:subfield != null |==> true
5808:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):307:dataField != null && subfield != null |==> dataField != null == (subfield != null)
5809:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):307:dataField != null && subfield != null |==> false
5810:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):307:dataField != null && subfield != null |==> dataField != null
5811:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):307:dataField != null && subfield != null |==> subfield != null
5812:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):308:subfield.setData(sb.toString()) |==> <NO-OP>
5813:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):309:dataField.addSubfield(subfield) |==> <NO-OP>
5814:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):310:subfield = null |==> <NO-OP>
5815:STD:<BREAK>:<NO-OP>:org.marc4j.MarcXmlHandler@endElement(java.lang.String,java.lang.String,java.lang.String):312:break; |==> <NO-OP>
5816:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlHandler@endDocument():322:queue.end() |==> <NO-OP>
5817:ROR:==(int,int):<=(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index == -1 |==> index <= -1
5818:ROR:==(int,int):>=(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index == -1 |==> index >= -1
5819:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index == -1 |==> false
5820:AOR:+(int,int):%(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index + 1 |==> index % 1
5821:AOR:+(int,int):*(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index + 1 |==> index * 1
5822:AOR:+(int,int):-(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index + 1 |==> index - 1
5823:AOR:+(int,int):/(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index + 1 |==> index / 1
5824:ROR:==(int,int):<=(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index + 1 == aName.length() |==> index + 1 <= aName.length()
5825:ROR:==(int,int):>=(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index + 1 == aName.length() |==> index + 1 >= aName.length()
5826:ROR:==(int,int):FALSE(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index + 1 == aName.length() |==> false
5827:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index == -1 || index + 1 == aName.length() |==> index == -1 != (index + 1 == aName.length())
5828:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index == -1 || index + 1 == aName.length() |==> index == -1
5829:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index == -1 || index + 1 == aName.length() |==> index + 1 == aName.length()
5830:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):397:index == -1 || index + 1 == aName.length() |==> true
5831:AOR:+(int,int):%(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):400:index + 1 |==> index % 1
5832:AOR:+(int,int):*(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):400:index + 1 |==> index * 1
5833:AOR:+(int,int):-(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):400:index + 1 |==> index - 1
5834:AOR:+(int,int):/(int,int):org.marc4j.MarcXmlHandler@stripNsPrefix(java.lang.String):400:index + 1 |==> index / 1
5835:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlParser@<init>(org.marc4j.MarcXmlHandler):52:this.handler = handler |==> <NO-OP>
5836:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.InputSource):61:parse(handler, input) |==> <NO-OP>
5837:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.InputSource,javax.xml.transform.sax.TransformerHandler):73:result.setHandler(handler) |==> <NO-OP>
5838:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.InputSource,javax.xml.transform.sax.TransformerHandler):74:th.setResult(result) |==> <NO-OP>
5839:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.InputSource,javax.xml.transform.sax.TransformerHandler):75:parse(th, input) |==> <NO-OP>
5840:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.ContentHandler,org.xml.sax.InputSource):83:reader = spf.newSAXParser().getXMLReader() |==> <NO-OP>
5841:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.ContentHandler,org.xml.sax.InputSource):84:reader.setFeature("http://xml.org/sax/features/namespaces", true) |==> <NO-OP>
5842:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.ContentHandler,org.xml.sax.InputSource):85:reader.setFeature("http://xml.org/sax/features/namespace-prefixes", true) |==> <NO-OP>
5843:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.ContentHandler,org.xml.sax.InputSource):86:reader.setContentHandler(handler) |==> <NO-OP>
5844:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParser@parse(org.xml.sax.ContentHandler,org.xml.sax.InputSource):87:reader.parse(input) |==> <NO-OP>
5845:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlParserThread@<init>(org.marc4j.RecordStack,org.xml.sax.InputSource):60:this.input = input |==> <NO-OP>
5846:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlParserThread@setTransformerHandler(javax.xml.transform.sax.TransformerHandler):78:this.th = th |==> <NO-OP>
5847:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlParserThread@setInputSource(org.xml.sax.InputSource):96:this.input = input |==> <NO-OP>
5848:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlParserThread@run():110:th == null |==> false
5849:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParserThread@run():111:parser.parse(input) |==> <NO-OP>
5850:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParserThread@run():113:parser.parse(input, th) |==> <NO-OP>
5851:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParserThread@run():116:queue.passException(me) |==> <NO-OP>
5852:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlParserThread@run():118:queue.end() |==> <NO-OP>
5853:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(java.io.OutputStream,java.lang.String,boolean):243:this.encoding = encoding |==> <NO-OP>
5854:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@<init>(java.io.OutputStream,java.lang.String,boolean):245:out == null |==> false
5855:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@<init>(java.io.OutputStream,java.lang.String,boolean):249:this.encoding == null |==> false
5856:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(java.io.OutputStream,java.lang.String,boolean):254:setIndent(indent) |==> <NO-OP>
5857:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(java.io.OutputStream,java.lang.String,boolean):257:writer = new BufferedWriter(writer) |==> <NO-OP>
5858:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(java.io.OutputStream,java.lang.String,boolean):259:setHandler(new StreamResult(writer), null) |==> <NO-OP>
5859:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(java.io.OutputStream,java.lang.String,boolean):264:writeStartDocument() |==> <NO-OP>
5860:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@<init>(javax.xml.transform.Result):273:result == null |==> false
5861:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(javax.xml.transform.Result):277:setHandler(result, null) |==> <NO-OP>
5862:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(javax.xml.transform.Result):278:writeStartDocument() |==> <NO-OP>
5863:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@<init>(javax.xml.transform.Result,javax.xml.transform.Source):298:stylesheet == null |==> false
5864:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@<init>(javax.xml.transform.Result,javax.xml.transform.Source):302:result == null |==> false
5865:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(javax.xml.transform.Result,javax.xml.transform.Source):306:setHandler(result, stylesheet) |==> <NO-OP>
5866:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@<init>(javax.xml.transform.Result,javax.xml.transform.Source):307:writeStartDocument() |==> <NO-OP>
5867:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@close():315:writeEndDocument() |==> <NO-OP>
5868:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@close():318:writer != null |==> true
5869:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@close():319:writer.write("\n") |==> <NO-OP>
5870:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@close():320:writer.close() |==> <NO-OP>
5871:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@setConverter(org.marc4j.converter.CharConverter):344:this.converter = converter |==> <NO-OP>
5872:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@setUnicodeNormalization(boolean):355:this.normalize = normalize |==> <NO-OP>
5873:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@setCheckNonXMLChars(boolean):375:this.checkNonXMLChars = checkNonXMLChars |==> <NO-OP>
5874:COR:factory.getFeature(SAXTransformerFactory.FEATURE):TRUE:org.marc4j.MarcXmlWriter@setHandler(javax.xml.transform.Result,javax.xml.transform.Source):392:factory.getFeature(SAXTransformerFactory.FEATURE) |==> false
5875:COR:factory.getFeature(SAXTransformerFactory.FEATURE):FALSE:org.marc4j.MarcXmlWriter@setHandler(javax.xml.transform.Result,javax.xml.transform.Source):392:factory.getFeature(SAXTransformerFactory.FEATURE) |==> true
5876:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@setHandler(javax.xml.transform.Result,javax.xml.transform.Source):398:stylesheet == null |==> false
5877:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@setHandler(javax.xml.transform.Result,javax.xml.transform.Source):399:handler = saxFactory.newTransformerHandler() |==> <NO-OP>
5878:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@setHandler(javax.xml.transform.Result,javax.xml.transform.Source):401:handler = saxFactory.newTransformerHandler(stylesheet) |==> <NO-OP>
5879:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@setHandler(javax.xml.transform.Result,javax.xml.transform.Source):404:handler.getTransformer().setOutputProperty(OutputKeys.METHOD, "xml") |==> <NO-OP>
5880:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@setHandler(javax.xml.transform.Result,javax.xml.transform.Source):405:handler.setResult(result) |==> <NO-OP>
5881:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeStartDocument():420:handler.startDocument() |==> <NO-OP>
5882:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeStartDocument():421:handler.startPrefixMapping(Constants.MARCXML_NS_PREFIX, Constants.MARCXML_NS_URI) |==> <NO-OP>
5883:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeStartDocument():422:handler.startElement(Constants.MARCXML_NS_URI, COLLECTION, Constants.MARCXML_NS_PREFIX + ":" + COLLECTION, atts) |==> <NO-OP>
5884:COR:indent:TRUE:org.marc4j.MarcXmlWriter@writeEndDocument():436:indent |==> false
5885:COR:indent:FALSE:org.marc4j.MarcXmlWriter@writeEndDocument():436:indent |==> true
5886:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeEndDocument():437:handler.ignorableWhitespace("\n".toCharArray(), 0, 1) |==> <NO-OP>
5887:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeEndDocument():440:handler.endElement(Constants.MARCXML_NS_URI, COLLECTION, Constants.MARCXML_NS_PREFIX + ":" + COLLECTION) |==> <NO-OP>
5888:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeEndDocument():441:handler.endPrefixMapping(Constants.MARCXML_NS_URI) |==> <NO-OP>
5889:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeEndDocument():442:handler.endDocument() |==> <NO-OP>
5890:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@write(org.marc4j.marc.Record):457:toXml(record) |==> <NO-OP>
5891:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream):472:writeSingleRecord(record, stream, true, false) |==> <NO-OP>
5892:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean):486:writeSingleRecord(record, stream, true, indent) |==> <NO-OP>
5893:COR:encode:TRUE:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):504:encode |==> false
5894:COR:encode:FALSE:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):504:encode |==> true
5895:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):505:writer.setConverter(new AnselToUnicode()) |==> <NO-OP>
5896:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):508:writer.setIndent(indent) |==> <NO-OP>
5897:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):509:writer.setUnicodeNormalization(true) |==> <NO-OP>
5898:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):510:writer.setHandler(new StreamResult(out), null) |==> <NO-OP>
5899:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):511:writer.handler.startDocument() |==> <NO-OP>
5900:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):512:writer.handler.startPrefixMapping(Constants.MARCXML_NS_PREFIX, Constants.MARCXML_NS_URI) |==> <NO-OP>
5901:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):513:writer.toXml(record) |==> <NO-OP>
5902:COR:indent:TRUE:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):515:indent |==> false
5903:COR:indent:FALSE:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):515:indent |==> true
5904:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):516:writer.handler.ignorableWhitespace("\n".toCharArray(), 0, 1) |==> <NO-OP>
5905:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):519:writer.handler.endPrefixMapping(Constants.MARCXML_NS_URI) |==> <NO-OP>
5906:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):520:writer.handler.endDocument() |==> <NO-OP>
5907:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):522:out.write("\n") |==> <NO-OP>
5908:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@writeSingleRecord(org.marc4j.marc.Record,java.io.OutputStream,boolean,boolean):523:out.close() |==> <NO-OP>
5909:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@setIndent(boolean):546:this.indent = indent |==> <NO-OP>
5910:COR:MarcFactory.newInstance().validateRecord(record):TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):550:MarcFactory.newInstance().validateRecord(record) |==> false
5911:COR:MarcFactory.newInstance().validateRecord(record):FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):550:MarcFactory.newInstance().validateRecord(record) |==> true
5912:COR:indent:TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):557:indent |==> false
5913:COR:indent:FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):557:indent |==> true
5914:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):558:handler.ignorableWhitespace("\n  ".toCharArray(), 0, 3) |==> <NO-OP>
5915:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):561:record.getType() != null |==> true
5916:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):564:rAtts.addAttribute("", "type", "type", "", record.getType()) |==> <NO-OP>
5917:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):565:handler.startElement(Constants.MARCXML_NS_URI, RECORD, Constants.MARCXML_NS_PREFIX + ":" + RECORD, rAtts) |==> <NO-OP>
5918:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):567:handler.startElement(Constants.MARCXML_NS_URI, RECORD, Constants.MARCXML_NS_PREFIX + ":" + RECORD, atts) |==> <NO-OP>
5919:COR:indent:TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):570:indent |==> false
5920:COR:indent:FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):570:indent |==> true
5921:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):571:handler.ignorableWhitespace("\n    ".toCharArray(), 0, 5) |==> <NO-OP>
5922:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):574:handler.startElement(Constants.MARCXML_NS_URI, LEADER, Constants.MARCXML_NS_PREFIX + ":" + LEADER, atts) |==> <NO-OP>
5923:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):577:handler.characters(temp, 0, temp.length) |==> <NO-OP>
5924:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):578:handler.endElement(Constants.MARCXML_NS_URI, LEADER, Constants.MARCXML_NS_PREFIX + ":" + LEADER) |==> <NO-OP>
5925:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):581:atts = new AttributesImpl() |==> <NO-OP>
5926:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):582:atts.addAttribute("", "tag", "tag", "CDATA", getDataElementString(field.getTag())) |==> <NO-OP>
5927:COR:indent:TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):584:indent |==> false
5928:COR:indent:FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):584:indent |==> true
5929:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):585:handler.ignorableWhitespace("\n    ".toCharArray(), 0, 5) |==> <NO-OP>
5930:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):588:handler.startElement(Constants.MARCXML_NS_URI, CONTROL_FIELD, Constants.MARCXML_NS_PREFIX + ":" + CONTROL_FIELD, atts) |==> <NO-OP>
5931:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):590:temp = getDataElement(field.getData()) |==> <NO-OP>
5932:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):591:handler.characters(temp, 0, temp.length) |==> <NO-OP>
5933:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):592:handler.endElement(Constants.MARCXML_NS_URI, CONTROL_FIELD, Constants.MARCXML_NS_PREFIX + ":" + CONTROL_FIELD) |==> <NO-OP>
5934:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):597:atts = new AttributesImpl() |==> <NO-OP>
5935:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):598:atts.addAttribute("", "tag", "tag", "CDATA", getDataElementString(field.getTag())) |==> <NO-OP>
5936:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):599:atts.addAttribute("", "ind1", "ind1", "CDATA", getDataElementString(String.valueOf(field.getIndicator1()))) |==> <NO-OP>
5937:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):601:atts.addAttribute("", "ind2", "ind2", "CDATA", getDataElementString(String.valueOf(field.getIndicator2()))) |==> <NO-OP>
5938:COR:indent:TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):604:indent |==> false
5939:COR:indent:FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):604:indent |==> true
5940:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):605:handler.ignorableWhitespace("\n    ".toCharArray(), 0, 5) |==> <NO-OP>
5941:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):608:handler.startElement(Constants.MARCXML_NS_URI, DATA_FIELD, Constants.MARCXML_NS_PREFIX + ":" + DATA_FIELD, atts) |==> <NO-OP>
5942:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):612:atts = new AttributesImpl() |==> <NO-OP>
5943:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):613:atts.addAttribute("", "code", "code", "CDATA", getDataElementString(String.valueOf(subfield.getCode()))) |==> <NO-OP>
5944:COR:indent:TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):616:indent |==> false
5945:COR:indent:FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):616:indent |==> true
5946:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):617:handler.ignorableWhitespace("\n      ".toCharArray(), 0, 7) |==> <NO-OP>
5947:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):620:handler.startElement(Constants.MARCXML_NS_URI, SUBFIELD, Constants.MARCXML_NS_PREFIX + ":" + SUBFIELD, atts) |==> <NO-OP>
5948:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):622:temp = getDataElement(subfield.getData()) |==> <NO-OP>
5949:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):623:handler.characters(temp, 0, temp.length) |==> <NO-OP>
5950:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):624:handler.endElement(Constants.MARCXML_NS_URI, SUBFIELD, Constants.MARCXML_NS_PREFIX + ":" + SUBFIELD) |==> <NO-OP>
5951:COR:indent:TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):627:indent |==> false
5952:COR:indent:FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):627:indent |==> true
5953:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):628:handler.ignorableWhitespace("\n    ".toCharArray(), 0, 5) |==> <NO-OP>
5954:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):631:handler.endElement(Constants.MARCXML_NS_URI, DATA_FIELD, Constants.MARCXML_NS_PREFIX + ":" + DATA_FIELD) |==> <NO-OP>
5955:COR:indent:TRUE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):634:indent |==> false
5956:COR:indent:FALSE:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):634:indent |==> true
5957:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):635:handler.ignorableWhitespace("\n  ".toCharArray(), 0, 3) |==> <NO-OP>
5958:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@toXml(org.marc4j.marc.Record):638:handler.endElement(Constants.MARCXML_NS_URI, RECORD, Constants.MARCXML_NS_PREFIX + ":" + RECORD) |==> <NO-OP>
5959:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):644:converter == null |==> false
5960:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):645:dataElement = data |==> <NO-OP>
5961:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):647:dataElement = converter.convert(data) |==> <NO-OP>
5962:COR:normalize:TRUE:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):650:normalize |==> false
5963:COR:normalize:FALSE:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):650:normalize |==> true
5964:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):651:dataElement = Normalizer.normalize(dataElement, Normalizer.Form.NFC) |==> <NO-OP>
5965:COR:checkNonXMLChars:TRUE:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):654:checkNonXMLChars |==> false
5966:COR:checkNonXMLChars:FALSE:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):654:checkNonXMLChars |==> true
5967:STD:<ASSIGN>:<NO-OP>:org.marc4j.MarcXmlWriter@getDataElementString(java.lang.String):655:dataElement = CheckNonXMLChars(dataElement) |==> <NO-OP>
5968:COR:isInvalidXmlChar(ch):TRUE:org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):674:isInvalidXmlChar(ch) |==> false
5969:COR:isInvalidXmlChar(ch):FALSE:org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):674:isInvalidXmlChar(ch) |==> true
5970:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):675:out.append("<U+") |==> <NO-OP>
5971:AOR:-(int,int):%(int,int):org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):677:hex.length() - 4 |==> hex.length() % 4
5972:AOR:-(int,int):*(int,int):org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):677:hex.length() - 4 |==> hex.length() * 4
5973:AOR:-(int,int):+(int,int):org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):677:hex.length() - 4 |==> hex.length() + 4
5974:AOR:-(int,int):/(int,int):org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):677:hex.length() - 4 |==> hex.length() / 4
5975:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):677:out.append(hex.substring(hex.length() - 4)) |==> <NO-OP>
5976:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):678:out.append('>') |==> <NO-OP>
5977:STD:<CALL>:<NO-OP>:org.marc4j.MarcXmlWriter@CheckNonXMLChars(java.lang.String):680:out.append(ch) |==> <NO-OP>
5978:COR:valid.matcher(s).matches():TRUE:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):702:valid.matcher(s).matches() |==> false
5979:COR:valid.matcher(s).matches():FALSE:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):702:valid.matcher(s).matches() |==> true
5980:STD:<RETURN>:<NO-OP>:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):703:return true; |==> <NO-OP>
5981:COR:ctrlChar.matcher(s).matches():TRUE:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):706:ctrlChar.matcher(s).matches() |==> false
5982:COR:ctrlChar.matcher(s).matches():FALSE:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):706:ctrlChar.matcher(s).matches() |==> true
5983:STD:<RETURN>:<NO-OP>:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):707:return true; |==> <NO-OP>
5984:COR:discouraged.matcher(s).matches():TRUE:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):710:discouraged.matcher(s).matches() |==> false
5985:COR:discouraged.matcher(s).matches():FALSE:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):710:discouraged.matcher(s).matches() |==> true
5986:STD:<RETURN>:<NO-OP>:org.marc4j.MarcXmlWriter@isInvalidXmlChar(char):711:return true; |==> <NO-OP>
5987:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8StreamReader@<init>(java.io.InputStream,boolean):93:this.toUTF8 = toUtf8 |==> <NO-OP>
5988:COR:this.hasNext():TRUE:org.marc4j.Mrk8StreamReader@next():114:this.hasNext() |==> false
5989:COR:this.hasNext():FALSE:org.marc4j.Mrk8StreamReader@next():114:this.hasNext() |==> true
5990:STD:<RETURN>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():115:return null; |==> <NO-OP>
5991:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.Mrk8StreamReader@next():117:this.lastLineRead != null |==> true
5992:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@next():117:this.lastLineRead != null && this.lastLineRead.substring(1, 4).equalsIgnoreCase("LDR") |==> this.lastLineRead != null == this.lastLineRead.substring(1, 4).equalsIgnoreCase("LDR")
5993:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@next():117:this.lastLineRead != null && this.lastLineRead.substring(1, 4).equalsIgnoreCase("LDR") |==> false
5994:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():117:this.lastLineRead != null && this.lastLineRead.substring(1, 4).equalsIgnoreCase("LDR") |==> this.lastLineRead != null
5995:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():117:this.lastLineRead != null && this.lastLineRead.substring(1, 4).equalsIgnoreCase("LDR") |==> this.lastLineRead.substring(1, 4).equalsIgnoreCase("LDR")
5996:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():118:lines.add(lastLineRead) |==> <NO-OP>
5997:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():119:this.lastLineRead = null |==> <NO-OP>
5998:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamReader@next():125:line.trim().length() == 0 |==> line.trim().length() <= 0
5999:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@next():125:line.trim().length() == 0 |==> line.trim().length() >= 0
6000:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@next():125:line.trim().length() == 0 |==> false
6001:STD:<CONT>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():127:continue; |==> <NO-OP>
6002:ROR:>(int,int):!=(int,int):org.marc4j.Mrk8StreamReader@next():129:lines.size() > 0 |==> lines.size() != 0
6003:ROR:>(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@next():129:lines.size() > 0 |==> lines.size() >= 0
6004:ROR:>(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@next():129:lines.size() > 0 |==> false
6005:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@next():129:line.substring(1, 4).equalsIgnoreCase("LDR") && lines.size() > 0 |==> line.substring(1, 4).equalsIgnoreCase("LDR") == lines.size() > 0
6006:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@next():129:line.substring(1, 4).equalsIgnoreCase("LDR") && lines.size() > 0 |==> false
6007:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():129:line.substring(1, 4).equalsIgnoreCase("LDR") && lines.size() > 0 |==> line.substring(1, 4).equalsIgnoreCase("LDR")
6008:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():129:line.substring(1, 4).equalsIgnoreCase("LDR") && lines.size() > 0 |==> lines.size() > 0
6009:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():131:this.lastLineRead = line |==> <NO-OP>
6010:STD:<BREAK>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():132:break; |==> <NO-OP>
6011:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():135:lines.add(line) |==> <NO-OP>
6012:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@next():136:hasHiBitCharacters == false |==> false
6013:ROR:==(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():136:hasHiBitCharacters == false |==> hasHiBitCharacters
6014:ROR:==(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():136:hasHiBitCharacters == false |==> false
6015:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@next():136:hasHiBitCharacters == false && nonAsciiChar.matcher(line).find() |==> hasHiBitCharacters == false == nonAsciiChar.matcher(line).find()
6016:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@next():136:hasHiBitCharacters == false && nonAsciiChar.matcher(line).find() |==> false
6017:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():136:hasHiBitCharacters == false && nonAsciiChar.matcher(line).find() |==> hasHiBitCharacters == false
6018:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@next():136:hasHiBitCharacters == false && nonAsciiChar.matcher(line).find() |==> nonAsciiChar.matcher(line).find()
6019:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8StreamReader@next():137:hasHiBitCharacters = true |==> <NO-OP>
6020:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):144:lines == null |==> false
6021:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):144:lines == null || lines.isEmpty() |==> lines == null != lines.isEmpty()
6022:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):144:lines == null || lines.isEmpty() |==> lines == null
6023:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):144:lines == null || lines.isEmpty() |==> lines.isEmpty()
6024:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):144:lines == null || lines.isEmpty() |==> true
6025:STD:<RETURN>:<NO-OP>:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):145:return null; |==> <NO-OP>
6026:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):151:line.trim().length() == 0 |==> line.trim().length() <= 0
6027:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):151:line.trim().length() == 0 |==> line.trim().length() >= 0
6028:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):151:line.trim().length() == 0 |==> false
6029:STD:<CONT>:<NO-OP>:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):152:continue; |==> <NO-OP>
6030:COR:tag.equalsIgnoreCase("LDR"):TRUE:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):157:tag.equalsIgnoreCase("LDR") |==> false
6031:COR:tag.equalsIgnoreCase("LDR"):FALSE:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):157:tag.equalsIgnoreCase("LDR") |==> true
6032:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):158:record.setLeader(getLeader(line.substring(6))) |==> <NO-OP>
6033:COR:this.isControlField(tag):TRUE:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):161:this.isControlField(tag) |==> false
6034:COR:this.isControlField(tag):FALSE:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):161:this.isControlField(tag) |==> true
6035:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):167:data.charAt(0) == '\\' |==> data.charAt(0) <= '\\'
6036:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):167:data.charAt(0) == '\\' |==> data.charAt(0) >= '\\'
6037:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):167:data.charAt(0) == '\\' |==> false
6038:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):168:data.charAt(1) == '\\' |==> data.charAt(1) <= '\\'
6039:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):168:data.charAt(1) == '\\' |==> data.charAt(1) >= '\\'
6040:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):168:data.charAt(1) == '\\' |==> false
6041:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):170:!this.isValidIndicator(indicator1) || !this.isValidIndicator(indicator2) |==> !this.isValidIndicator(indicator1) != !this.isValidIndicator(indicator2)
6042:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):170:!this.isValidIndicator(indicator1) || !this.isValidIndicator(indicator2) |==> !this.isValidIndicator(indicator1)
6043:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):170:!this.isValidIndicator(indicator1) || !this.isValidIndicator(indicator2) |==> !this.isValidIndicator(indicator2)
6044:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):170:!this.isValidIndicator(indicator1) || !this.isValidIndicator(indicator2) |==> true
6045:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):181:!isUTF8 && toUTF8 |==> !isUTF8 == toUTF8
6046:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):181:!isUTF8 && toUTF8 |==> false
6047:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):181:!isUTF8 && toUTF8 |==> !isUTF8
6048:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):181:!isUTF8 && toUTF8 |==> toUTF8
6049:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):182:Marc8ToUTF8 == null |==> false
6050:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):183:Marc8ToUTF8 = new AnselToUnicode() |==> <NO-OP>
6051:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):185:subData = Marc8ToUTF8.convert(subData) |==> <NO-OP>
6052:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):188:((DataField)field).addSubfield(subfield) |==> <NO-OP>
6053:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@parse(java.util.List<java.lang.String>,boolean):191:record.addVariableField(field) |==> <NO-OP>
6054:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator == ' ' |==> indicator <= ' '
6055:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator == ' ' |==> indicator >= ' '
6056:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator == ' ' |==> false
6057:ROR:>=(int,int):==(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator >= '0' |==> indicator == '0'
6058:ROR:>=(int,int):>(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator >= '0' |==> indicator > '0'
6059:ROR:>=(int,int):TRUE(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator >= '0' |==> true
6060:ROR:<=(int,int):<(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator <= '9' |==> indicator < '9'
6061:ROR:<=(int,int):==(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator <= '9' |==> indicator == '9'
6062:ROR:<=(int,int):TRUE(int,int):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator <= '9' |==> true
6063:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator >= '0' && indicator <= '9' |==> indicator >= '0' == indicator <= '9'
6064:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator >= '0' && indicator <= '9' |==> false
6065:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator >= '0' && indicator <= '9' |==> indicator >= '0'
6066:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator >= '0' && indicator <= '9' |==> indicator <= '9'
6067:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator == ' ' || (indicator >= '0' && indicator <= '9') |==> indicator == ' ' != (indicator >= '0' && indicator <= '9')
6068:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator == ' ' || (indicator >= '0' && indicator <= '9') |==> indicator == ' '
6069:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator == ' ' || (indicator >= '0' && indicator <= '9') |==> (indicator >= '0' && indicator <= '9')
6070:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.Mrk8StreamReader@isValidIndicator(char):198:indicator == ' ' || (indicator >= '0' && indicator <= '9') |==> true
6071:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@getLeader(java.lang.String):203:leader.unmarshal(substring) |==> <NO-OP>
6072:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamReader@unescapeFieldValue(java.lang.String):211:c == '\\' |==> c <= '\\'
6073:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@unescapeFieldValue(java.lang.String):211:c == '\\' |==> c >= '\\'
6074:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@unescapeFieldValue(java.lang.String):211:c == '\\' |==> false
6075:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@unescapeFieldValue(java.lang.String):211:sb.append(' ') |==> <NO-OP>
6076:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamReader@unescapeFieldValue(java.lang.String):212:sb.append(c) |==> <NO-OP>
6077:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:tag.length() == 3 |==> tag.length() <= 3
6078:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:tag.length() == 3 |==> tag.length() >= 3
6079:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:tag.length() == 3 |==> false
6080:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") |==> (tag.length() == 3) == tag.startsWith("00")
6081:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") |==> false
6082:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") |==> (tag.length() == 3)
6083:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") |==> tag.startsWith("00")
6084:ROR:>=(int,int):==(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:tag.charAt(2) >= '0' |==> tag.charAt(2) == '0'
6085:ROR:>=(int,int):>(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:tag.charAt(2) >= '0' |==> tag.charAt(2) > '0'
6086:ROR:>=(int,int):TRUE(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:tag.charAt(2) >= '0' |==> true
6087:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') |==> ((tag.length() == 3) && tag.startsWith("00")) == (tag.charAt(2) >= '0')
6088:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') |==> false
6089:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') |==> (tag.length() == 3) && tag.startsWith("00")
6090:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') |==> (tag.charAt(2) >= '0')
6091:ROR:<=(int,int):<(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:tag.charAt(2) <= '9' |==> tag.charAt(2) < '9'
6092:ROR:<=(int,int):==(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:tag.charAt(2) <= '9' |==> tag.charAt(2) == '9'
6093:ROR:<=(int,int):TRUE(int,int):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:tag.charAt(2) <= '9' |==> true
6094:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') && (tag.charAt(2) <= '9') |==> ((tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0')) == (tag.charAt(2) <= '9')
6095:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') && (tag.charAt(2) <= '9') |==> false
6096:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):219:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') && (tag.charAt(2) <= '9') |==> (tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0')
6097:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8StreamReader@isControlField(java.lang.String):220:(tag.length() == 3) && tag.startsWith("00") && (tag.charAt(2) >= '0') && (tag.charAt(2) <= '9') |==> (tag.charAt(2) <= '9')
6098:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):84:recordStringBuilder.append("=").append("LDR").append("  ").append(ldr.marshal()) |==> <NO-OP>
6099:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):87:recordStringBuilder.append("=").append(field.getTag()).append("  ") |==> <NO-OP>
6100:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):97:recordStringBuilder.append(data) |==> <NO-OP>
6101:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):100:dataField.getIndicator1() == ' ' |==> dataField.getIndicator1() <= ' '
6102:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):100:dataField.getIndicator1() == ' ' |==> dataField.getIndicator1() >= ' '
6103:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):100:dataField.getIndicator1() == ' ' |==> false
6104:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):100:recordStringBuilder.append((dataField.getIndicator1() == ' ') ? "\\" : dataField.getIndicator1()) |==> <NO-OP>
6105:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):101:dataField.getIndicator2() == ' ' |==> dataField.getIndicator2() <= ' '
6106:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):101:dataField.getIndicator2() == ' ' |==> dataField.getIndicator2() >= ' '
6107:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):101:dataField.getIndicator2() == ' ' |==> false
6108:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):101:recordStringBuilder.append((dataField.getIndicator2() == ' ') ? "\\" : dataField.getIndicator2()) |==> <NO-OP>
6109:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):110:recordStringBuilder.append("$").append(subField.getCode()).append(data) |==> <NO-OP>
6110:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):113:recordStringBuilder.append(System.lineSeparator()) |==> <NO-OP>
6111:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):115:recordStringBuilder.append(System.lineSeparator()) |==> <NO-OP>
6112:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):117:this.mrk8Writer.append(recordStringBuilder) |==> <NO-OP>
6113:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@write(org.marc4j.marc.Record):118:this.mrk8Writer.flush() |==> <NO-OP>
6114:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@close():150:this.mrk8Writer.flush() |==> <NO-OP>
6115:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8StreamWriter@close():151:this.mrk8Writer.close() |==> <NO-OP>
6116:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):52:datafield.indexOf('{') == -1 |==> datafield.indexOf('{') <= -1
6117:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):52:datafield.indexOf('{') == -1 |==> datafield.indexOf('{') >= -1
6118:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):52:datafield.indexOf('{') == -1 |==> false
6119:STD:<RETURN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):53:return (datafield); |==> <NO-OP>
6120:ROR:<(int,int):!=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):58:i < len |==> i != len
6121:ROR:<(int,int):<=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):58:i < len |==> i <= len
6122:ROR:<(int,int):FALSE(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):58:i < len |==> false
6123:ROR:==(int,int):<=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):60:j == -1 |==> j <= -1
6124:ROR:==(int,int):>=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):60:j == -1 |==> j >= -1
6125:ROR:==(int,int):FALSE(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):60:j == -1 |==> false
6126:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):61:sb.append(datafield.substring(i)) |==> <NO-OP>
6127:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):62:i = len |==> <NO-OP>
6128:STD:<CONT>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):63:continue; |==> <NO-OP>
6129:ROR:<(int,int):!=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):65:i < j |==> i != j
6130:ROR:<(int,int):<=(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):65:i < j |==> i <= j
6131:ROR:<(int,int):FALSE(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):65:i < j |==> false
6132:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):66:sb.append(datafield.substring(i, j)) |==> <NO-OP>
6133:AOR:-(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):67:j - 1 |==> j % 1
6134:AOR:-(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):67:j - 1 |==> j * 1
6135:AOR:-(int,int):+(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):67:j - 1 |==> j + 1
6136:AOR:-(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):67:j - 1 |==> j / 1
6137:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):67:i = j - 1 |==> <NO-OP>
6138:AOR:+(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):70:k + 1 |==> k % 1
6139:AOR:+(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):70:k + 1 |==> k * 1
6140:AOR:+(int,int):-(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):70:k + 1 |==> k - 1
6141:AOR:+(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):70:k + 1 |==> k / 1
6142:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):71:sb.append(lookup(lookupVal)) |==> <NO-OP>
6143:AOR:+(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):72:k + 1 |==> k % 1
6144:AOR:+(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):72:k + 1 |==> k * 1
6145:AOR:+(int,int):-(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):72:k + 1 |==> k - 1
6146:AOR:+(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):72:k + 1 |==> k / 1
6147:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@fromMrk8(java.lang.String):72:i = k + 1 |==> <NO-OP>
6148:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):78:mrk8Map == null |==> false
6149:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):79:mrk8Map = new LinkedHashMap<String, String>() |==> <NO-OP>
6150:ROR:<(int,int):!=(int,int):org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):80:i < mrk8Table.length |==> i != mrk8Table.length
6151:ROR:<(int,int):<=(int,int):org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):80:i < mrk8Table.length |==> i <= mrk8Table.length
6152:ROR:<(int,int):FALSE(int,int):org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):80:i < mrk8Table.length |==> false
6153:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):82:mrk8Map.put(mrk8Table[i][0], translateVal) |==> <NO-OP>
6154:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):87:lookupVal == null |==> false
6155:STD:<ASSIGN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@lookup(java.lang.String):92:lookupVal = toLookup |==> <NO-OP>
6156:ROR:<(int,int):!=(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):100:i < s.length() |==> i != s.length()
6157:ROR:<(int,int):<=(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):100:i < s.length() |==> i <= s.length()
6158:ROR:<(int,int):FALSE(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):100:i < s.length() |==> false
6159:AOR:*(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 |==> charToNibble(s.charAt(i)) % 16
6160:AOR:*(int,int):+(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 |==> charToNibble(s.charAt(i)) + 16
6161:AOR:*(int,int):-(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 |==> charToNibble(s.charAt(i)) - 16
6162:AOR:*(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 |==> charToNibble(s.charAt(i)) / 16
6163:AOR:+(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:i + 1 |==> i % 1
6164:AOR:+(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:i + 1 |==> i * 1
6165:AOR:+(int,int):-(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:i + 1 |==> i - 1
6166:AOR:+(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:i + 1 |==> i / 1
6167:AOR:+(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 + charToNibble(s.charAt(i + 1)) |==> charToNibble(s.charAt(i)) * 16 % charToNibble(s.charAt(i + 1))
6168:AOR:+(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 + charToNibble(s.charAt(i + 1)) |==> charToNibble(s.charAt(i)) * 16 * charToNibble(s.charAt(i + 1))
6169:AOR:+(int,int):-(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 + charToNibble(s.charAt(i + 1)) |==> charToNibble(s.charAt(i)) * 16 - charToNibble(s.charAt(i + 1))
6170:AOR:+(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:charToNibble(s.charAt(i)) * 16 + charToNibble(s.charAt(i + 1)) |==> charToNibble(s.charAt(i)) * 16 / charToNibble(s.charAt(i + 1))
6171:STD:<CALL>:<NO-OP>:org.marc4j.Mrk8TranslationTable@translate(java.lang.String):101:sb.append((char)(charToNibble(s.charAt(i)) * 16 + charToNibble(s.charAt(i + 1)))) |==> <NO-OP>
6172:ROR:>=(int,int):==(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c >= '0' |==> c == '0'
6173:ROR:>=(int,int):>(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c >= '0' |==> c > '0'
6174:ROR:>=(int,int):TRUE(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c >= '0' |==> true
6175:ROR:<=(int,int):<(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c <= '9' |==> c < '9'
6176:ROR:<=(int,int):==(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c <= '9' |==> c == '9'
6177:ROR:<=(int,int):TRUE(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c <= '9' |==> true
6178:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c >= '0' && c <= '9' |==> c >= '0' == c <= '9'
6179:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c >= '0' && c <= '9' |==> false
6180:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c >= '0' && c <= '9' |==> c >= '0'
6181:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c >= '0' && c <= '9' |==> c <= '9'
6182:AOR:-(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c - '0' |==> c % '0'
6183:AOR:-(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c - '0' |==> c * '0'
6184:AOR:-(int,int):+(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c - '0' |==> c + '0'
6185:AOR:-(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):107:c - '0' |==> c / '0'
6186:STD:<RETURN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@charToNibble(char):107:return ((int)(Config.__M_NO == 6185 ? c / '0' : Config.__M_NO == 6184 ? c + '0' : Config.__M_NO == 6183 ? c * '0' : Config.__M_NO == 6182 ? c % '0' : Config.__M_NO == 0 && Config.COVERED(6182, 6185) ? c - '0' : c - '0')); |==> <NO-OP>
6187:ROR:>=(int,int):==(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c >= 'A' |==> c == 'A'
6188:ROR:>=(int,int):>(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c >= 'A' |==> c > 'A'
6189:ROR:>=(int,int):TRUE(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c >= 'A' |==> true
6190:ROR:<=(int,int):<(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c <= 'F' |==> c < 'F'
6191:ROR:<=(int,int):==(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c <= 'F' |==> c == 'F'
6192:ROR:<=(int,int):TRUE(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c <= 'F' |==> true
6193:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c >= 'A' && c <= 'F' |==> c >= 'A' == c <= 'F'
6194:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c >= 'A' && c <= 'F' |==> false
6195:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c >= 'A' && c <= 'F' |==> c >= 'A'
6196:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c >= 'A' && c <= 'F' |==> c <= 'F'
6197:AOR:-(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' |==> c % 'A'
6198:AOR:-(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' |==> c * 'A'
6199:AOR:-(int,int):+(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' |==> c + 'A'
6200:AOR:-(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' |==> c / 'A'
6201:AOR:+(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' + 10 |==> (c - 'A') % 10
6202:AOR:+(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' + 10 |==> (c - 'A') * 10
6203:AOR:+(int,int):-(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' + 10 |==> c - 'A' - 10
6204:AOR:+(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):108:c - 'A' + 10 |==> (c - 'A') / 10
6205:STD:<RETURN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@charToNibble(char):108:return ((int)(Config.__M_NO == 6204 ? (c - 'A') / 10 : Config.__M_NO == 6203 ? c - 'A' - 10 : Config.__M_NO == 6202 ? (c - 'A') * 10 : Config.__M_NO == 6201 ? (c - 'A') % 10 : Config.__M_NO == 0 && Config.COVERED(6201, 6204) ? c - 'A' + 10 : (Config.__M_NO == 6200 ? c / 'A' : Config.__M_NO == 6199 ? c + 'A' : Config.__M_NO == 6198 ? c * 'A' : Config.__M_NO == 6197 ? c % 'A' : Config.__M_NO == 0 && Config.COVERED(6197, 6200) ? c - 'A' : c - 'A') + 10)); |==> <NO-OP>
6206:ROR:>=(int,int):==(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c >= 'a' |==> c == 'a'
6207:ROR:>=(int,int):>(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c >= 'a' |==> c > 'a'
6208:ROR:>=(int,int):TRUE(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c >= 'a' |==> true
6209:ROR:<=(int,int):<(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c <= 'f' |==> c < 'f'
6210:ROR:<=(int,int):==(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c <= 'f' |==> c == 'f'
6211:ROR:<=(int,int):TRUE(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c <= 'f' |==> true
6212:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c >= 'a' && c <= 'f' |==> c >= 'a' == c <= 'f'
6213:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c >= 'a' && c <= 'f' |==> false
6214:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c >= 'a' && c <= 'f' |==> c >= 'a'
6215:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c >= 'a' && c <= 'f' |==> c <= 'f'
6216:AOR:-(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' |==> c % 'a'
6217:AOR:-(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' |==> c * 'a'
6218:AOR:-(int,int):+(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' |==> c + 'a'
6219:AOR:-(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' |==> c / 'a'
6220:AOR:+(int,int):%(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' + 10 |==> (c - 'a') % 10
6221:AOR:+(int,int):*(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' + 10 |==> (c - 'a') * 10
6222:AOR:+(int,int):-(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' + 10 |==> c - 'a' - 10
6223:AOR:+(int,int):/(int,int):org.marc4j.Mrk8TranslationTable@charToNibble(char):109:c - 'a' + 10 |==> (c - 'a') / 10
6224:STD:<RETURN>:<NO-OP>:org.marc4j.Mrk8TranslationTable@charToNibble(char):109:return ((int)(Config.__M_NO == 6223 ? (c - 'a') / 10 : Config.__M_NO == 6222 ? c - 'a' - 10 : Config.__M_NO == 6221 ? (c - 'a') * 10 : Config.__M_NO == 6220 ? (c - 'a') % 10 : Config.__M_NO == 0 && Config.COVERED(6220, 6223) ? c - 'a' + 10 : (Config.__M_NO == 6219 ? c / 'a' : Config.__M_NO == 6218 ? c + 'a' : Config.__M_NO == 6217 ? c * 'a' : Config.__M_NO == 6216 ? c % 'a' : Config.__M_NO == 0 && Config.COVERED(6216, 6219) ? c - 'a' : c - 'a') + 10)); |==> <NO-OP>
6225:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):61:i <= 126 |==> i < 126
6226:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):61:i <= 126 |==> i == 126
6227:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):61:i <= 126 |==> true
6228:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):63:v != null |==> true
6229:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):63:v != null && v.contains(new Integer(i)) |==> v != null == v.contains(new Integer(i))
6230:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):63:v != null && v.contains(new Integer(i)) |==> false
6231:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):63:v != null && v.contains(new Integer(i)) |==> v != null
6232:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):63:v != null && v.contains(new Integer(i)) |==> v.contains(new Integer(i))
6233:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):66:v != null |==> true
6234:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):66:v != null && v.contains(new Integer(i)) |==> v != null == v.contains(new Integer(i))
6235:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):66:v != null && v.contains(new Integer(i)) |==> false
6236:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):66:v != null && v.contains(new Integer(i)) |==> v != null
6237:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.CodeTable@isCombining(int,int,int):66:v != null && v.contains(new Integer(i)) |==> v.contains(new Integer(i))
6238:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):79:c == 32 |==> c <= 32
6239:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):79:c == 32 |==> c >= 32
6240:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):79:c == 32 |==> false
6241:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTable@getChar(int,int):84:charset == null |==> false
6242:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTable@getChar(int,int):90:ch == null |==> false
6243:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c < 128 |==> c != 128
6244:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c < 128 |==> c <= 128
6245:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c < 128 |==> false
6246:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c + 128 |==> c % 128
6247:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c + 128 |==> c * 128
6248:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c + 128 |==> c - 128
6249:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c + 128 |==> c / 128
6250:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c - 128 |==> c % 128
6251:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c - 128 |==> c * 128
6252:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c - 128 |==> c + 128
6253:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.CodeTable@getChar(int,int):91:c - 128 |==> c / 128
6254:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTable@getChar(int,int):92:ch = charset.get(new Integer(newc)) |==> <NO-OP>
6255:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTable@getChar(int,int):93:ch == null |==> false
6256:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.io.InputStream):116:factory.setNamespaceAware(true) |==> <NO-OP>
6257:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.io.InputStream):117:factory.setValidating(false) |==> <NO-OP>
6258:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.io.InputStream):123:rdr.setContentHandler(saxUms) |==> <NO-OP>
6259:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.io.InputStream):124:rdr.parse(src) |==> <NO-OP>
6260:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.io.InputStream):126:charsets = saxUms.getCharSets() |==> <NO-OP>
6261:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.io.InputStream):127:combining = saxUms.getCombiningChars() |==> <NO-OP>
6262:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.lang.String):141:factory.setNamespaceAware(true) |==> <NO-OP>
6263:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.lang.String):142:factory.setValidating(false) |==> <NO-OP>
6264:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.lang.String):149:rdr.setContentHandler(saxUms) |==> <NO-OP>
6265:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.lang.String):150:rdr.parse(src) |==> <NO-OP>
6266:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.lang.String):152:charsets = saxUms.getCharSets() |==> <NO-OP>
6267:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.lang.String):153:combining = saxUms.getCombiningChars() |==> <NO-OP>
6268:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.net.URI):167:factory.setNamespaceAware(true) |==> <NO-OP>
6269:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.net.URI):168:factory.setValidating(false) |==> <NO-OP>
6270:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.net.URI):174:rdr.setContentHandler(saxUms) |==> <NO-OP>
6271:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.net.URI):175:rdr.parse(src) |==> <NO-OP>
6272:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.net.URI):177:charsets = saxUms.getCharSets() |==> <NO-OP>
6273:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTable@<init>(java.net.URI):178:combining = saxUms.getCombiningChars() |==> <NO-OP>
6274:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@main(java.lang.String[]):61:ct.dumpTableAsSwitchStatement(System.out) |==> <NO-OP>
6275:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):65:out.println("package org.marc4j.converter.impl;") |==> <NO-OP>
6276:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):66:out.println("") |==> <NO-OP>
6277:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):67:out.println("/** ") |==> <NO-OP>
6278:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):68:out.println(" *  An implementation of CodeTableInterface that is used in converting MARC8") |==> <NO-OP>
6279:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):69:out.println(" *  data to UTF8 data, that doesn\'t rely on any data files or resources or data structures") |==> <NO-OP>
6280:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):70:out.println(" *  ") |==> <NO-OP>
6281:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):71:out.println(" *  Warning: This file is generated by running the main routine in the file CodeTableGenerator.java ") |==> <NO-OP>
6282:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):72:out.println(" *  Warning: Do not edit this file, or all edits will be lost at the next build. ") |==> <NO-OP>
6283:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):73:out.println(" */") |==> <NO-OP>
6284:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):74:out.println("public class CodeTableGenerated implements CodeTableInterface {") |==> <NO-OP>
6285:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):75:out.println("\tpublic boolean isCombining(int i, int g0, int g1) {") |==> <NO-OP>
6286:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):76:out.println("\t\tswitch (i <= 0x7E ? g0 : g1) {") |==> <NO-OP>
6287:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):78:Arrays.sort(combiningKeys) |==> <NO-OP>
6288:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):79:combiningSel < combiningKeys.length |==> combiningSel != combiningKeys.length
6289:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):79:combiningSel < combiningKeys.length |==> combiningSel <= combiningKeys.length
6290:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):79:combiningSel < combiningKeys.length |==> false
6291:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):81:out.println("\t\t\tcase 0x" + Integer.toHexString(nextKey) + ":") |==> <NO-OP>
6292:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):83:v.size() > 0 |==> v.size() != 0
6293:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):83:v.size() > 0 |==> v.size() >= 0
6294:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):83:v.size() > 0 |==> false
6295:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):84:out.println("\t\t\t\tswitch(i) {") |==> <NO-OP>
6296:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):86:out.println("\t\t\t\t\tcase 0x" + Integer.toHexString(vVal) + ":") |==> <NO-OP>
6297:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):88:out.println("\t\t\t\t\t\treturn(true);") |==> <NO-OP>
6298:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):89:out.println("\t\t\t\t\tdefault:") |==> <NO-OP>
6299:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):90:out.println("\t\t\t\t\t\treturn(false);") |==> <NO-OP>
6300:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):91:out.println("\t\t\t\t}") |==> <NO-OP>
6301:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):93:out.println("\t\t\t\treturn(false);") |==> <NO-OP>
6302:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):96:out.println("\t\t\tdefault:") |==> <NO-OP>
6303:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):97:out.println("\t\t\t\treturn(false);") |==> <NO-OP>
6304:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):98:out.println("\t\t\t}") |==> <NO-OP>
6305:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):99:out.println("\t}") |==> <NO-OP>
6306:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):100:out.println("") |==> <NO-OP>
6307:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):101:out.println("\tpublic char getChar(int c, int mode) {") |==> <NO-OP>
6308:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):102:out.println("\t\tint code = getCharCode(c, mode);") |==> <NO-OP>
6309:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):103:out.println("\t\tif (code == -1) return((char)0);") |==> <NO-OP>
6310:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):104:out.println("\t\tif (code != 0) return((char)code);") |==> <NO-OP>
6311:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):105:out.println("\t\tcode = getCharCode(c < 0x80 ? c + 0x80 : c - 0x80 , mode);") |==> <NO-OP>
6312:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):106:out.println("\t\treturn((char)code);") |==> <NO-OP>
6313:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):107:out.println("\t}") |==> <NO-OP>
6314:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):108:out.println("") |==> <NO-OP>
6315:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):109:out.println("\tprivate int getCharCode(int c, int mode) {") |==> <NO-OP>
6316:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):110:out.println("\t\tif (c == 0x20) return  c;") |==> <NO-OP>
6317:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):111:out.println("\t\tswitch (mode) {") |==> <NO-OP>
6318:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):113:Arrays.sort(charsetsKeys) |==> <NO-OP>
6319:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):114:charsetSel < charsetsKeys.length |==> charsetSel != charsetsKeys.length
6320:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):114:charsetSel < charsetsKeys.length |==> charsetSel <= charsetsKeys.length
6321:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):114:charsetSel < charsetsKeys.length |==> false
6322:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):116:out.println("\t\t\tcase 0x" + Integer.toHexString(nextKey) + ":") |==> <NO-OP>
6323:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):117:nextKey.intValue() == 49 |==> nextKey.intValue() <= 49
6324:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):117:nextKey.intValue() == 49 |==> nextKey.intValue() >= 49
6325:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):117:nextKey.intValue() == 49 |==> false
6326:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):118:out.println("\t\t\t\treturn(getMultiByteChar(c));") |==> <NO-OP>
6327:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):122:Arrays.sort(keyArray) |==> <NO-OP>
6328:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):123:out.println("\t\t\t\tswitch(c) {") |==> <NO-OP>
6329:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):124:sel < keyArray.length |==> sel != keyArray.length
6330:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):124:sel < keyArray.length |==> sel <= keyArray.length
6331:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):124:sel < keyArray.length |==> false
6332:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):127:c != null |==> true
6333:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):128:out.println("\t\t\t\t\tcase 0x" + Integer.toHexString(mKey) + ":  return(0x" + Integer.toHexString(c.charValue()) + "); ") |==> <NO-OP>
6334:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):131:out.println("\t\t\t\t\tcase 0x" + Integer.toHexString(mKey) + ":  return(0); ") |==> <NO-OP>
6335:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):134:out.println("\t\t\t\t\tdefault:  return(0);") |==> <NO-OP>
6336:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):135:out.println("\t\t\t\t}") |==> <NO-OP>
6337:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):138:out.println("\t\t\tdefault: return(-1);  // unknown charset specified ") |==> <NO-OP>
6338:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):139:out.println("\t\t}") |==> <NO-OP>
6339:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):140:out.println("\t}") |==> <NO-OP>
6340:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):141:out.println("") |==> <NO-OP>
6341:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):143:getMultiByteFunc.append("\tprivate int getMultiByteChar(int c) {\n") |==> <NO-OP>
6342:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):147:Arrays.sort(keyArray) |==> <NO-OP>
6343:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):154:dumpPartialMultiByteTable(out, getMultiByteFunc, keyArray, map, 2162688, 2183167) |==> <NO-OP>
6344:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):155:dumpPartialMultiByteTable(out, getMultiByteFunc, keyArray, map, 2183168, 2228223) |==> <NO-OP>
6345:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):156:dumpPartialMultiByteTable(out, getMultiByteFunc, keyArray, map, 2228224, 2293759) |==> <NO-OP>
6346:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):157:dumpPartialMultiByteTable(out, getMultiByteFunc, keyArray, map, 2293760, 2621439) |==> <NO-OP>
6347:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):158:dumpPartialMultiByteTable(out, getMultiByteFunc, keyArray, map, 2621440, 8355839) |==> <NO-OP>
6348:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):160:getMultiByteFunc.append("\t\treturn(0);\n") |==> <NO-OP>
6349:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):161:getMultiByteFunc.append("\t}") |==> <NO-OP>
6350:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):162:out.println(getMultiByteFunc.toString()) |==> <NO-OP>
6351:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpTableAsSwitchStatement(java.io.PrintStream):164:out.println("}") |==> <NO-OP>
6352:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):171:buffer.append("\t\tif (c >= " + startByteStr + " && c <= " + endByteStr + ")  return (getMultiByteChar_" + startByteStr + "_" + endByteStr + "(c));\n") |==> <NO-OP>
6353:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):173:out.println("\tprivate char getMultiByteChar_" + startByteStr + "_" + endByteStr + "(int c) {") |==> <NO-OP>
6354:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):174:out.println("\t\tswitch(c) {") |==> <NO-OP>
6355:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):175:sel < keyArray.length |==> sel != keyArray.length
6356:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):175:sel < keyArray.length |==> sel <= keyArray.length
6357:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):175:sel < keyArray.length |==> false
6358:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey >= startByte |==> mKey == startByte
6359:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey >= startByte |==> mKey > startByte
6360:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey >= startByte |==> true
6361:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey <= endByte |==> mKey < endByte
6362:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey <= endByte |==> mKey == endByte
6363:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey <= endByte |==> true
6364:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey >= startByte && mKey <= endByte |==> mKey >= startByte == mKey <= endByte
6365:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey >= startByte && mKey <= endByte |==> false
6366:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey >= startByte && mKey <= endByte |==> mKey >= startByte
6367:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):178:mKey >= startByte && mKey <= endByte |==> mKey <= endByte
6368:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):179:c != null |==> true
6369:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):180:out.println("\t\t\tcase 0x" + Integer.toHexString(mKey) + ":  return((char)0x" + Integer.toHexString(c.charValue()) + "); ") |==> <NO-OP>
6370:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):183:out.println("\t\t\tcase 0x" + Integer.toHexString(mKey) + ":  return((char)0); ") |==> <NO-OP>
6371:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):187:out.println("\t\t\tdefault: return((char)0);") |==> <NO-OP>
6372:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):188:out.println("\t\t}") |==> <NO-OP>
6373:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):189:out.println("\t}") |==> <NO-OP>
6374:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableGenerator@dumpPartialMultiByteTable(java.io.PrintStream,java.lang.StringBuffer,java.lang.Integer[],java.util.HashMap<java.lang.Integer,java.lang.Character>,int,int):190:out.println("") |==> <NO-OP>
6375:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@setDocumentLocator(org.xml.sax.Locator):102:this.locator = locator |==> <NO-OP>
6376:COR:name.equals("characterSet"):TRUE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):117:name.equals("characterSet") |==> false
6377:COR:name.equals("characterSet"):FALSE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):117:name.equals("characterSet") |==> true
6378:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):118:charset = new HashMap<Integer, Character>() |==> <NO-OP>
6379:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):119:isocode = Integer.valueOf(atts.getValue("ISOcode"), 16) |==> <NO-OP>
6380:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):120:combining = new Vector<Integer>() |==> <NO-OP>
6381:COR:name.equals("marc"):TRUE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):121:name.equals("marc") |==> false
6382:COR:name.equals("marc"):FALSE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):121:name.equals("marc") |==> true
6383:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):122:data = new StringBuffer() |==> <NO-OP>
6384:COR:name.equals("codeTables"):TRUE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):123:name.equals("codeTables") |==> false
6385:COR:name.equals("codeTables"):FALSE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):123:name.equals("codeTables") |==> true
6386:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):124:sets = new HashMap<Integer, HashMap<Integer, Character>>() |==> <NO-OP>
6387:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):125:combiningchars = new HashMap<Integer, Vector<Integer>>() |==> <NO-OP>
6388:COR:name.equals("ucs"):TRUE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):126:name.equals("ucs") |==> false
6389:COR:name.equals("ucs"):FALSE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):126:name.equals("ucs") |==> true
6390:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):127:data = new StringBuffer() |==> <NO-OP>
6391:COR:name.equals("alt"):TRUE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):128:name.equals("alt") |==> false
6392:COR:name.equals("alt"):FALSE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):128:name.equals("alt") |==> true
6393:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):129:data = new StringBuffer() |==> <NO-OP>
6394:COR:name.equals("isCombining"):TRUE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):130:name.equals("isCombining") |==> false
6395:COR:name.equals("isCombining"):FALSE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):130:name.equals("isCombining") |==> true
6396:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):131:data = new StringBuffer() |==> <NO-OP>
6397:COR:name.equals("code"):TRUE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):132:name.equals("code") |==> false
6398:COR:name.equals("code"):FALSE:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):132:name.equals("code") |==> true
6399:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):133:iscombining = false |==> <NO-OP>
6400:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.CodeTableHandler@characters(char[],int,int):146:data != null |==> true
6401:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@characters(char[],int,int):147:data.append(ch, start, length) |==> <NO-OP>
6402:COR:name.equals("characterSet"):TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):162:name.equals("characterSet") |==> false
6403:COR:name.equals("characterSet"):FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):162:name.equals("characterSet") |==> true
6404:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):163:sets.put(isocode, charset) |==> <NO-OP>
6405:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):164:combiningchars.put(isocode, combining) |==> <NO-OP>
6406:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):165:combining = null |==> <NO-OP>
6407:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):166:charset = null |==> <NO-OP>
6408:COR:name.equals("marc"):TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):167:name.equals("marc") |==> false
6409:COR:name.equals("marc"):FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):167:name.equals("marc") |==> true
6410:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):168:marc = Integer.valueOf(data.toString(), 16) |==> <NO-OP>
6411:COR:name.equals("ucs"):TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):169:name.equals("ucs") |==> false
6412:COR:name.equals("ucs"):FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):169:name.equals("ucs") |==> true
6413:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):170:data.length() > 0 |==> data.length() != 0
6414:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):170:data.length() > 0 |==> data.length() >= 0
6415:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):170:data.length() > 0 |==> false
6416:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):171:ucs = new Character((char)Integer.parseInt(data.toString(), 16)) |==> <NO-OP>
6417:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):173:ucs = null |==> <NO-OP>
6418:COR:name.equals("alt"):TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):175:name.equals("alt") |==> false
6419:COR:name.equals("alt"):FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):175:name.equals("alt") |==> true
6420:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:data.length() > 0 |==> data.length() != 0
6421:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:data.length() > 0 |==> data.length() >= 0
6422:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:data.length() > 0 |==> false
6423:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:useAlt && data.length() > 0 |==> useAlt == data.length() > 0
6424:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:useAlt && data.length() > 0 |==> false
6425:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:useAlt && data.length() > 0 |==> useAlt
6426:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:useAlt && data.length() > 0 |==> data.length() > 0
6427:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):177:ucs = new Character((char)Integer.parseInt(data.toString(), 16)) |==> <NO-OP>
6428:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):178:useAlt = false |==> <NO-OP>
6429:COR:name.equals("code"):TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):180:name.equals("code") |==> false
6430:COR:name.equals("code"):FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):180:name.equals("code") |==> true
6431:COR:iscombining:TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):181:iscombining |==> false
6432:COR:iscombining:FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):181:iscombining |==> true
6433:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):182:combining.add(marc) |==> <NO-OP>
6434:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):184:charset.put(marc, ucs) |==> <NO-OP>
6435:COR:name.equals("isCombining"):TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):185:name.equals("isCombining") |==> false
6436:COR:name.equals("isCombining"):FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):185:name.equals("isCombining") |==> true
6437:COR:data.toString().equals("true"):TRUE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):186:data.toString().equals("true") |==> false
6438:COR:data.toString().equals("true"):FALSE:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):186:data.toString().equals("true") |==> true
6439:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):187:iscombining = true |==> <NO-OP>
6440:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):191:data = null |==> <NO-OP>
6441:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@main(java.lang.String[]):206:factory.setNamespaceAware(true) |==> <NO-OP>
6442:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@main(java.lang.String[]):207:factory.setValidating(false) |==> <NO-OP>
6443:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@main(java.lang.String[]):217:rdr.setContentHandler(saxUms) |==> <NO-OP>
6444:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@main(java.lang.String[]):218:rdr.parse(src) |==> <NO-OP>
6445:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@main(java.lang.String[]):220:charsets = saxUms.getCharSets() |==> <NO-OP>
6446:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@main(java.lang.String[]):223:System.out.println(saxUms.getCombiningChars()) |==> <NO-OP>
6447:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.CodeTableHandler@main(java.lang.String[]):226:exc.printStackTrace(System.out) |==> <NO-OP>
6448:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):48:i < data.length |==> i != data.length
6449:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):48:i < data.length |==> i <= data.length
6450:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):48:i < data.length |==> false
6451:COR:isAscii(c):TRUE:org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):51:isAscii(c) |==> false
6452:COR:isAscii(c):FALSE:org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):51:isAscii(c) |==> true
6453:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):52:sb.append(c) |==> <NO-OP>
6454:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):53:isCombining(c) && hasNext(i, len) |==> isCombining(c) == hasNext(i, len)
6455:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):53:isCombining(c) && hasNext(i, len) |==> false
6456:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):53:isCombining(c) && hasNext(i, len) |==> isCombining(c)
6457:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):53:isCombining(c) && hasNext(i, len) |==> hasNext(i, len)
6458:AOR:*(int,int):%(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 |==> c % 256
6459:AOR:*(int,int):+(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 |==> c + 256
6460:AOR:*(int,int):-(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 |==> c - 256
6461:AOR:*(int,int):/(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 |==> c / 256
6462:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:i + 1 |==> i % 1
6463:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:i + 1 |==> i * 1
6464:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:i + 1 |==> i - 1
6465:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:i + 1 |==> i / 1
6466:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 + data[i + 1] |==> c * 256 % data[i + 1]
6467:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 + data[i + 1] |==> c * 256 * data[i + 1]
6468:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 + data[i + 1] |==> c * 256 - data[i + 1]
6469:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):54:c * 256 + data[i + 1] |==> c * 256 / data[i + 1]
6470:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):55:d != 0 |==> d < 0
6471:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):55:d != 0 |==> d > 0
6472:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):55:d != 0 |==> true
6473:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):56:sb.append(d) |==> <NO-OP>
6474:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):57:i++ |==> <NO-OP>
6475:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):59:sb.append(getChar(c)) |==> <NO-OP>
6476:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@convert(char[]):62:sb.append(getChar(c)) |==> <NO-OP>
6477:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):69:len - 1 |==> len % 1
6478:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):69:len - 1 |==> len * 1
6479:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):69:len - 1 |==> len + 1
6480:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):69:len - 1 |==> len / 1
6481:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):69:pos < (len - 1) |==> pos != (len - 1)
6482:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):69:pos < (len - 1) |==> pos <= (len - 1)
6483:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):69:pos < (len - 1) |==> false
6484:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@hasNext(int,int):70:return true; |==> <NO-OP>
6485:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i >= 0 |==> i == 0
6486:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i >= 0 |==> i > 0
6487:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i >= 0 |==> true
6488:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i <= 127 |==> i < 127
6489:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i <= 127 |==> i == 127
6490:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i <= 127 |==> true
6491:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i >= 0 && i <= 127 |==> i >= 0 == i <= 127
6492:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i >= 0 && i <= 127 |==> false
6493:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i >= 0 && i <= 127 |==> i >= 0
6494:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):76:i >= 0 && i <= 127 |==> i <= 127
6495:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@isAscii(int):77:return true; |==> <NO-OP>
6496:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i >= 192 |==> i == 192
6497:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i >= 192 |==> i > 192
6498:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i >= 192 |==> true
6499:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i <= 223 |==> i < 223
6500:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i <= 223 |==> i == 223
6501:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i <= 223 |==> true
6502:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i >= 192 && i <= 223 |==> i >= 192 == i <= 223
6503:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i >= 192 && i <= 223 |==> false
6504:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i >= 192 && i <= 223 |==> i >= 192
6505:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):84:i >= 192 && i <= 223 |==> i <= 223
6506:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@isCombining(int):85:return true; |==> <NO-OP>
6507:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):107:return 161; |==> <NO-OP>
6508:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):109:return 8222; |==> <NO-OP>
6509:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):111:return 163; |==> <NO-OP>
6510:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):113:return 36; |==> <NO-OP>
6511:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):115:return 165; |==> <NO-OP>
6512:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):117:return 8224; |==> <NO-OP>
6513:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):119:return 167; |==> <NO-OP>
6514:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):121:return 8242; |==> <NO-OP>
6515:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):123:return 8216; |==> <NO-OP>
6516:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):125:return 8220; |==> <NO-OP>
6517:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):127:return 171; |==> <NO-OP>
6518:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):129:return 9837; |==> <NO-OP>
6519:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):131:return 169; |==> <NO-OP>
6520:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):133:return 8471; |==> <NO-OP>
6521:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):135:return 174; |==> <NO-OP>
6522:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):138:return 699; |==> <NO-OP>
6523:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):140:return 700; |==> <NO-OP>
6524:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):142:return 8218; |==> <NO-OP>
6525:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):147:return 8225; |==> <NO-OP>
6526:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):149:return 183; |==> <NO-OP>
6527:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):151:return 8243; |==> <NO-OP>
6528:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):153:return 8217; |==> <NO-OP>
6529:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):155:return 8221; |==> <NO-OP>
6530:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):157:return 187; |==> <NO-OP>
6531:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):159:return 9839; |==> <NO-OP>
6532:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):161:return 697; |==> <NO-OP>
6533:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):163:return 698; |==> <NO-OP>
6534:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):165:return 191; |==> <NO-OP>
6535:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):171:return 198; |==> <NO-OP>
6536:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):173:return 272; |==> <NO-OP>
6537:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):178:return 306; |==> <NO-OP>
6538:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):181:return 321; |==> <NO-OP>
6539:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):183:return 216; |==> <NO-OP>
6540:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):186:return 338; |==> <NO-OP>
6541:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):189:return 222; |==> <NO-OP>
6542:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):196:return 230; |==> <NO-OP>
6543:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):198:return 273; |==> <NO-OP>
6544:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):200:return 240; |==> <NO-OP>
6545:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):203:return 305; |==> <NO-OP>
6546:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):205:return 307; |==> <NO-OP>
6547:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):208:return 322; |==> <NO-OP>
6548:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):210:return 248; |==> <NO-OP>
6549:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):213:return 339; |==> <NO-OP>
6550:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):215:return 223; |==> <NO-OP>
6551:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getChar(int):217:return 254; |==> <NO-OP>
6552:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):229:return 7842; |==> <NO-OP>
6553:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):231:return 7866; |==> <NO-OP>
6554:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):233:return 7880; |==> <NO-OP>
6555:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):235:return 7886; |==> <NO-OP>
6556:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):237:return 7910; |==> <NO-OP>
6557:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):239:return 7926; |==> <NO-OP>
6558:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):241:return 7843; |==> <NO-OP>
6559:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):243:return 7867; |==> <NO-OP>
6560:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):245:return 7881; |==> <NO-OP>
6561:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):247:return 7887; |==> <NO-OP>
6562:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):249:return 7911; |==> <NO-OP>
6563:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):251:return 7927; |==> <NO-OP>
6564:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):255:return 192; |==> <NO-OP>
6565:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):257:return 200; |==> <NO-OP>
6566:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):259:return 204; |==> <NO-OP>
6567:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):261:return 210; |==> <NO-OP>
6568:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):263:return 217; |==> <NO-OP>
6569:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):265:return 7808; |==> <NO-OP>
6570:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):267:return 7922; |==> <NO-OP>
6571:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):269:return 224; |==> <NO-OP>
6572:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):271:return 232; |==> <NO-OP>
6573:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):273:return 236; |==> <NO-OP>
6574:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):275:return 242; |==> <NO-OP>
6575:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):277:return 249; |==> <NO-OP>
6576:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):279:return 7809; |==> <NO-OP>
6577:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):281:return 7923; |==> <NO-OP>
6578:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):285:return 193; |==> <NO-OP>
6579:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):287:return 262; |==> <NO-OP>
6580:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):289:return 201; |==> <NO-OP>
6581:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):291:return 500; |==> <NO-OP>
6582:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):293:return 205; |==> <NO-OP>
6583:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):295:return 7728; |==> <NO-OP>
6584:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):297:return 313; |==> <NO-OP>
6585:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):299:return 7742; |==> <NO-OP>
6586:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):301:return 323; |==> <NO-OP>
6587:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):303:return 211; |==> <NO-OP>
6588:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):305:return 7764; |==> <NO-OP>
6589:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):307:return 340; |==> <NO-OP>
6590:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):309:return 346; |==> <NO-OP>
6591:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):311:return 218; |==> <NO-OP>
6592:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):313:return 7810; |==> <NO-OP>
6593:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):315:return 221; |==> <NO-OP>
6594:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):317:return 377; |==> <NO-OP>
6595:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):319:return 225; |==> <NO-OP>
6596:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):321:return 263; |==> <NO-OP>
6597:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):323:return 233; |==> <NO-OP>
6598:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):325:return 501; |==> <NO-OP>
6599:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):327:return 237; |==> <NO-OP>
6600:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):329:return 7729; |==> <NO-OP>
6601:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):331:return 314; |==> <NO-OP>
6602:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):333:return 7743; |==> <NO-OP>
6603:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):335:return 324; |==> <NO-OP>
6604:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):337:return 243; |==> <NO-OP>
6605:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):339:return 7765; |==> <NO-OP>
6606:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):341:return 341; |==> <NO-OP>
6607:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):343:return 347; |==> <NO-OP>
6608:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):345:return 250; |==> <NO-OP>
6609:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):347:return 7811; |==> <NO-OP>
6610:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):349:return 253; |==> <NO-OP>
6611:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):351:return 378; |==> <NO-OP>
6612:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):353:return 508; |==> <NO-OP>
6613:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):355:return 509; |==> <NO-OP>
6614:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):359:return 194; |==> <NO-OP>
6615:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):361:return 264; |==> <NO-OP>
6616:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):363:return 202; |==> <NO-OP>
6617:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):365:return 284; |==> <NO-OP>
6618:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):367:return 292; |==> <NO-OP>
6619:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):369:return 206; |==> <NO-OP>
6620:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):371:return 308; |==> <NO-OP>
6621:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):373:return 212; |==> <NO-OP>
6622:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):375:return 348; |==> <NO-OP>
6623:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):377:return 219; |==> <NO-OP>
6624:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):379:return 372; |==> <NO-OP>
6625:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):381:return 374; |==> <NO-OP>
6626:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):383:return 7824; |==> <NO-OP>
6627:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):385:return 226; |==> <NO-OP>
6628:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):387:return 265; |==> <NO-OP>
6629:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):389:return 234; |==> <NO-OP>
6630:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):391:return 285; |==> <NO-OP>
6631:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):393:return 293; |==> <NO-OP>
6632:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):395:return 238; |==> <NO-OP>
6633:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):397:return 309; |==> <NO-OP>
6634:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):399:return 244; |==> <NO-OP>
6635:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):401:return 349; |==> <NO-OP>
6636:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):403:return 251; |==> <NO-OP>
6637:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):405:return 373; |==> <NO-OP>
6638:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):407:return 375; |==> <NO-OP>
6639:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):409:return 7825; |==> <NO-OP>
6640:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):413:return 195; |==> <NO-OP>
6641:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):415:return 7868; |==> <NO-OP>
6642:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):417:return 296; |==> <NO-OP>
6643:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):419:return 209; |==> <NO-OP>
6644:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):421:return 213; |==> <NO-OP>
6645:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):423:return 360; |==> <NO-OP>
6646:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):425:return 7804; |==> <NO-OP>
6647:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):427:return 7928; |==> <NO-OP>
6648:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):429:return 227; |==> <NO-OP>
6649:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):431:return 7869; |==> <NO-OP>
6650:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):433:return 297; |==> <NO-OP>
6651:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):435:return 241; |==> <NO-OP>
6652:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):437:return 245; |==> <NO-OP>
6653:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):439:return 361; |==> <NO-OP>
6654:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):441:return 7805; |==> <NO-OP>
6655:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):443:return 7929; |==> <NO-OP>
6656:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):447:return 256; |==> <NO-OP>
6657:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):449:return 274; |==> <NO-OP>
6658:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):451:return 7712; |==> <NO-OP>
6659:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):453:return 298; |==> <NO-OP>
6660:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):455:return 332; |==> <NO-OP>
6661:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):457:return 362; |==> <NO-OP>
6662:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):459:return 257; |==> <NO-OP>
6663:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):461:return 275; |==> <NO-OP>
6664:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):463:return 7713; |==> <NO-OP>
6665:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):465:return 299; |==> <NO-OP>
6666:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):467:return 333; |==> <NO-OP>
6667:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):469:return 363; |==> <NO-OP>
6668:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):471:return 482; |==> <NO-OP>
6669:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):473:return 483; |==> <NO-OP>
6670:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):477:return 258; |==> <NO-OP>
6671:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):479:return 276; |==> <NO-OP>
6672:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):481:return 286; |==> <NO-OP>
6673:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):483:return 300; |==> <NO-OP>
6674:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):485:return 334; |==> <NO-OP>
6675:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):487:return 364; |==> <NO-OP>
6676:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):489:return 259; |==> <NO-OP>
6677:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):491:return 277; |==> <NO-OP>
6678:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):493:return 287; |==> <NO-OP>
6679:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):495:return 301; |==> <NO-OP>
6680:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):497:return 335; |==> <NO-OP>
6681:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):499:return 365; |==> <NO-OP>
6682:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):503:return 7682; |==> <NO-OP>
6683:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):505:return 266; |==> <NO-OP>
6684:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):507:return 7690; |==> <NO-OP>
6685:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):509:return 278; |==> <NO-OP>
6686:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):511:return 7710; |==> <NO-OP>
6687:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):513:return 288; |==> <NO-OP>
6688:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):515:return 7714; |==> <NO-OP>
6689:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):517:return 304; |==> <NO-OP>
6690:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):519:return 7744; |==> <NO-OP>
6691:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):521:return 7748; |==> <NO-OP>
6692:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):523:return 7766; |==> <NO-OP>
6693:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):525:return 7768; |==> <NO-OP>
6694:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):527:return 7776; |==> <NO-OP>
6695:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):529:return 7786; |==> <NO-OP>
6696:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):531:return 7814; |==> <NO-OP>
6697:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):533:return 7818; |==> <NO-OP>
6698:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):535:return 7822; |==> <NO-OP>
6699:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):537:return 379; |==> <NO-OP>
6700:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):539:return 7683; |==> <NO-OP>
6701:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):541:return 267; |==> <NO-OP>
6702:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):543:return 7691; |==> <NO-OP>
6703:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):545:return 279; |==> <NO-OP>
6704:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):547:return 7711; |==> <NO-OP>
6705:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):549:return 289; |==> <NO-OP>
6706:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):551:return 7715; |==> <NO-OP>
6707:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):553:return 7745; |==> <NO-OP>
6708:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):555:return 7749; |==> <NO-OP>
6709:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):557:return 7767; |==> <NO-OP>
6710:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):559:return 7769; |==> <NO-OP>
6711:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):561:return 7777; |==> <NO-OP>
6712:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):563:return 7787; |==> <NO-OP>
6713:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):565:return 7815; |==> <NO-OP>
6714:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):567:return 7819; |==> <NO-OP>
6715:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):569:return 7823; |==> <NO-OP>
6716:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):571:return 380; |==> <NO-OP>
6717:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):575:return 168; |==> <NO-OP>
6718:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):577:return 196; |==> <NO-OP>
6719:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):579:return 203; |==> <NO-OP>
6720:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):581:return 7718; |==> <NO-OP>
6721:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):583:return 207; |==> <NO-OP>
6722:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):585:return 214; |==> <NO-OP>
6723:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):587:return 220; |==> <NO-OP>
6724:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):589:return 7812; |==> <NO-OP>
6725:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):591:return 7820; |==> <NO-OP>
6726:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):593:return 376; |==> <NO-OP>
6727:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):595:return 228; |==> <NO-OP>
6728:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):597:return 235; |==> <NO-OP>
6729:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):599:return 7719; |==> <NO-OP>
6730:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):601:return 239; |==> <NO-OP>
6731:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):603:return 246; |==> <NO-OP>
6732:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):605:return 7831; |==> <NO-OP>
6733:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):607:return 252; |==> <NO-OP>
6734:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):609:return 7813; |==> <NO-OP>
6735:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):611:return 7821; |==> <NO-OP>
6736:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):613:return 255; |==> <NO-OP>
6737:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):617:return 168; |==> <NO-OP>
6738:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):619:return 196; |==> <NO-OP>
6739:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):621:return 203; |==> <NO-OP>
6740:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):623:return 7718; |==> <NO-OP>
6741:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):625:return 207; |==> <NO-OP>
6742:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):627:return 214; |==> <NO-OP>
6743:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):629:return 220; |==> <NO-OP>
6744:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):631:return 7812; |==> <NO-OP>
6745:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):633:return 7820; |==> <NO-OP>
6746:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):635:return 376; |==> <NO-OP>
6747:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):637:return 228; |==> <NO-OP>
6748:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):639:return 235; |==> <NO-OP>
6749:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):641:return 7719; |==> <NO-OP>
6750:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):643:return 239; |==> <NO-OP>
6751:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):645:return 246; |==> <NO-OP>
6752:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):647:return 7831; |==> <NO-OP>
6753:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):649:return 252; |==> <NO-OP>
6754:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):651:return 7813; |==> <NO-OP>
6755:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):653:return 7821; |==> <NO-OP>
6756:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):655:return 255; |==> <NO-OP>
6757:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):659:return 197; |==> <NO-OP>
6758:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):661:return 366; |==> <NO-OP>
6759:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):663:return 229; |==> <NO-OP>
6760:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):665:return 367; |==> <NO-OP>
6761:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):667:return 7832; |==> <NO-OP>
6762:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):669:return 7833; |==> <NO-OP>
6763:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):677:return 336; |==> <NO-OP>
6764:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):679:return 368; |==> <NO-OP>
6765:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):681:return 337; |==> <NO-OP>
6766:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):683:return 369; |==> <NO-OP>
6767:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):687:return 416; |==> <NO-OP>
6768:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):689:return 431; |==> <NO-OP>
6769:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):691:return 417; |==> <NO-OP>
6770:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):693:return 432; |==> <NO-OP>
6771:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):697:return 461; |==> <NO-OP>
6772:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):699:return 268; |==> <NO-OP>
6773:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):701:return 270; |==> <NO-OP>
6774:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):703:return 282; |==> <NO-OP>
6775:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):705:return 486; |==> <NO-OP>
6776:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):707:return 463; |==> <NO-OP>
6777:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):709:return 488; |==> <NO-OP>
6778:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):711:return 317; |==> <NO-OP>
6779:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):713:return 327; |==> <NO-OP>
6780:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):715:return 465; |==> <NO-OP>
6781:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):717:return 344; |==> <NO-OP>
6782:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):719:return 352; |==> <NO-OP>
6783:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):721:return 356; |==> <NO-OP>
6784:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):723:return 467; |==> <NO-OP>
6785:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):725:return 381; |==> <NO-OP>
6786:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):727:return 462; |==> <NO-OP>
6787:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):729:return 269; |==> <NO-OP>
6788:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):731:return 271; |==> <NO-OP>
6789:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):733:return 283; |==> <NO-OP>
6790:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):735:return 487; |==> <NO-OP>
6791:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):737:return 464; |==> <NO-OP>
6792:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):739:return 496; |==> <NO-OP>
6793:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):741:return 489; |==> <NO-OP>
6794:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):743:return 318; |==> <NO-OP>
6795:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):745:return 328; |==> <NO-OP>
6796:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):747:return 466; |==> <NO-OP>
6797:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):749:return 345; |==> <NO-OP>
6798:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):751:return 353; |==> <NO-OP>
6799:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):753:return 357; |==> <NO-OP>
6800:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):755:return 468; |==> <NO-OP>
6801:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):757:return 382; |==> <NO-OP>
6802:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):761:return 184; |==> <NO-OP>
6803:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):763:return 199; |==> <NO-OP>
6804:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):765:return 7696; |==> <NO-OP>
6805:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):767:return 290; |==> <NO-OP>
6806:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):769:return 7720; |==> <NO-OP>
6807:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):771:return 310; |==> <NO-OP>
6808:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):773:return 315; |==> <NO-OP>
6809:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):775:return 325; |==> <NO-OP>
6810:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):777:return 342; |==> <NO-OP>
6811:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):779:return 350; |==> <NO-OP>
6812:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):781:return 354; |==> <NO-OP>
6813:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):783:return 231; |==> <NO-OP>
6814:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):785:return 7697; |==> <NO-OP>
6815:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):787:return 291; |==> <NO-OP>
6816:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):789:return 7721; |==> <NO-OP>
6817:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):791:return 311; |==> <NO-OP>
6818:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):793:return 316; |==> <NO-OP>
6819:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):795:return 326; |==> <NO-OP>
6820:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):797:return 343; |==> <NO-OP>
6821:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):799:return 351; |==> <NO-OP>
6822:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):801:return 355; |==> <NO-OP>
6823:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):809:return 731; |==> <NO-OP>
6824:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):811:return 260; |==> <NO-OP>
6825:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):813:return 280; |==> <NO-OP>
6826:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):815:return 302; |==> <NO-OP>
6827:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):817:return 490; |==> <NO-OP>
6828:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):819:return 370; |==> <NO-OP>
6829:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):821:return 261; |==> <NO-OP>
6830:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):823:return 281; |==> <NO-OP>
6831:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):825:return 303; |==> <NO-OP>
6832:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):827:return 491; |==> <NO-OP>
6833:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):829:return 371; |==> <NO-OP>
6834:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):833:return 7680; |==> <NO-OP>
6835:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):835:return 7681; |==> <NO-OP>
6836:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):839:return 7722; |==> <NO-OP>
6837:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):841:return 7723; |==> <NO-OP>
6838:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):845:return 7840; |==> <NO-OP>
6839:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):847:return 7684; |==> <NO-OP>
6840:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):849:return 7692; |==> <NO-OP>
6841:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):851:return 7864; |==> <NO-OP>
6842:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):853:return 7716; |==> <NO-OP>
6843:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):855:return 7882; |==> <NO-OP>
6844:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):857:return 7730; |==> <NO-OP>
6845:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):859:return 7734; |==> <NO-OP>
6846:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):861:return 7746; |==> <NO-OP>
6847:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):863:return 7750; |==> <NO-OP>
6848:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):865:return 7884; |==> <NO-OP>
6849:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):867:return 7770; |==> <NO-OP>
6850:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):869:return 7778; |==> <NO-OP>
6851:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):871:return 7788; |==> <NO-OP>
6852:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):873:return 7908; |==> <NO-OP>
6853:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):875:return 7806; |==> <NO-OP>
6854:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):877:return 7816; |==> <NO-OP>
6855:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):879:return 7924; |==> <NO-OP>
6856:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):881:return 7826; |==> <NO-OP>
6857:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):883:return 7841; |==> <NO-OP>
6858:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):885:return 7685; |==> <NO-OP>
6859:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):887:return 7693; |==> <NO-OP>
6860:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):889:return 7865; |==> <NO-OP>
6861:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):891:return 7717; |==> <NO-OP>
6862:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):893:return 7883; |==> <NO-OP>
6863:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):895:return 7731; |==> <NO-OP>
6864:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):897:return 7735; |==> <NO-OP>
6865:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):899:return 7747; |==> <NO-OP>
6866:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):901:return 7751; |==> <NO-OP>
6867:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):903:return 7885; |==> <NO-OP>
6868:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):905:return 7771; |==> <NO-OP>
6869:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):907:return 7779; |==> <NO-OP>
6870:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):909:return 7789; |==> <NO-OP>
6871:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):911:return 7909; |==> <NO-OP>
6872:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):913:return 7807; |==> <NO-OP>
6873:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):915:return 7817; |==> <NO-OP>
6874:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):917:return 7925; |==> <NO-OP>
6875:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):919:return 7827; |==> <NO-OP>
6876:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):923:return 7794; |==> <NO-OP>
6877:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):925:return 7795; |==> <NO-OP>
6878:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):929:return 95; |==> <NO-OP>
6879:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):933:return 8215; |==> <NO-OP>
6880:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso5426ToUnicode@getCombiningChar(int):937:return 716; |==> <NO-OP>
6881:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):48:i < data.length |==> i != data.length
6882:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):48:i < data.length |==> i <= data.length
6883:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):48:i < data.length |==> false
6884:COR:isAscii(c):TRUE:org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):52:isAscii(c) |==> false
6885:COR:isAscii(c):FALSE:org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):52:isAscii(c) |==> true
6886:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):53:sb.append(c) |==> <NO-OP>
6887:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):54:isCombining(c) && hasNext(i, len) |==> isCombining(c) == hasNext(i, len)
6888:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):54:isCombining(c) && hasNext(i, len) |==> false
6889:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):54:isCombining(c) && hasNext(i, len) |==> isCombining(c)
6890:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):54:isCombining(c) && hasNext(i, len) |==> hasNext(i, len)
6891:AOR:*(int,int):%(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 |==> c % 256
6892:AOR:*(int,int):+(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 |==> c + 256
6893:AOR:*(int,int):-(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 |==> c - 256
6894:AOR:*(int,int):/(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 |==> c / 256
6895:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:i + 1 |==> i % 1
6896:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:i + 1 |==> i * 1
6897:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:i + 1 |==> i - 1
6898:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:i + 1 |==> i / 1
6899:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 + data[i + 1] |==> c * 256 % data[i + 1]
6900:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 + data[i + 1] |==> c * 256 * data[i + 1]
6901:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 + data[i + 1] |==> c * 256 - data[i + 1]
6902:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):55:c * 256 + data[i + 1] |==> c * 256 / data[i + 1]
6903:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):57:d != 0 |==> d < 0
6904:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):57:d != 0 |==> d > 0
6905:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):57:d != 0 |==> true
6906:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):58:sb.append(d) |==> <NO-OP>
6907:STD:<INC>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):59:i++ |==> <NO-OP>
6908:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):61:sb.append(getChar(c)) |==> <NO-OP>
6909:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@convert(char[]):64:sb.append(getChar(c)) |==> <NO-OP>
6910:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):72:len - 1 |==> len % 1
6911:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):72:len - 1 |==> len * 1
6912:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):72:len - 1 |==> len + 1
6913:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):72:len - 1 |==> len / 1
6914:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):72:pos < (len - 1) |==> pos != (len - 1)
6915:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):72:pos < (len - 1) |==> pos <= (len - 1)
6916:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):72:pos < (len - 1) |==> false
6917:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@hasNext(int,int):73:return true; |==> <NO-OP>
6918:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i >= 0 |==> i == 0
6919:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i >= 0 |==> i > 0
6920:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i >= 0 |==> true
6921:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i <= 127 |==> i < 127
6922:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i <= 127 |==> i == 127
6923:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i <= 127 |==> true
6924:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i >= 0 && i <= 127 |==> i >= 0 == i <= 127
6925:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i >= 0 && i <= 127 |==> false
6926:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i >= 0 && i <= 127 |==> i >= 0
6927:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):80:i >= 0 && i <= 127 |==> i <= 127
6928:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@isAscii(int):81:return true; |==> <NO-OP>
6929:ROR:>=(int,int):==(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i >= 192 |==> i == 192
6930:ROR:>=(int,int):>(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i >= 192 |==> i > 192
6931:ROR:>=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i >= 192 |==> true
6932:ROR:<=(int,int):<(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i <= 223 |==> i < 223
6933:ROR:<=(int,int):==(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i <= 223 |==> i == 223
6934:ROR:<=(int,int):TRUE(int,int):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i <= 223 |==> true
6935:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i >= 192 && i <= 223 |==> i >= 192 == i <= 223
6936:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i >= 192 && i <= 223 |==> false
6937:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i >= 192 && i <= 223 |==> i >= 192
6938:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):88:i >= 192 && i <= 223 |==> i <= 223
6939:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@isCombining(int):89:return true; |==> <NO-OP>
6940:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):111:return 160; |==> <NO-OP>
6941:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):113:return 161; |==> <NO-OP>
6942:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):115:return 162; |==> <NO-OP>
6943:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):117:return 163; |==> <NO-OP>
6944:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):120:return 165; |==> <NO-OP>
6945:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):123:return 167; |==> <NO-OP>
6946:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):125:return 164; |==> <NO-OP>
6947:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):127:return 8216; |==> <NO-OP>
6948:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):129:return 8220; |==> <NO-OP>
6949:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):131:return 171; |==> <NO-OP>
6950:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):134:return 8592; |==> <NO-OP>
6951:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):136:return 8593; |==> <NO-OP>
6952:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):138:return 8594; |==> <NO-OP>
6953:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):140:return 8595; |==> <NO-OP>
6954:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):143:return 176; |==> <NO-OP>
6955:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):145:return 177; |==> <NO-OP>
6956:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):147:return 178; |==> <NO-OP>
6957:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):149:return 179; |==> <NO-OP>
6958:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):151:return 215; |==> <NO-OP>
6959:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):153:return 181; |==> <NO-OP>
6960:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):155:return 182; |==> <NO-OP>
6961:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):157:return 183; |==> <NO-OP>
6962:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):159:return 247; |==> <NO-OP>
6963:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):161:return 8217; |==> <NO-OP>
6964:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):163:return 8221; |==> <NO-OP>
6965:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):165:return 187; |==> <NO-OP>
6966:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):168:return 188; |==> <NO-OP>
6967:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):170:return 189; |==> <NO-OP>
6968:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):172:return 190; |==> <NO-OP>
6969:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):174:return 191; |==> <NO-OP>
6970:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):179:return 8213; |==> <NO-OP>
6971:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):181:return 185; |==> <NO-OP>
6972:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):183:return 8471; |==> <NO-OP>
6973:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):185:return 169; |==> <NO-OP>
6974:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):187:return 174; |==> <NO-OP>
6975:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):189:return 9834; |==> <NO-OP>
6976:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):191:return 172; |==> <NO-OP>
6977:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):193:return 166; |==> <NO-OP>
6978:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):199:return 8539; |==> <NO-OP>
6979:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):201:return 8542; |==> <NO-OP>
6980:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):204:return 8486; |==> <NO-OP>
6981:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):206:return 198; |==> <NO-OP>
6982:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):208:return 272; |==> <NO-OP>
6983:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):210:return 170; |==> <NO-OP>
6984:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):212:return 294; |==> <NO-OP>
6985:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):215:return 306; |==> <NO-OP>
6986:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):217:return 319; |==> <NO-OP>
6987:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):219:return 321; |==> <NO-OP>
6988:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):221:return 216; |==> <NO-OP>
6989:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):223:return 338; |==> <NO-OP>
6990:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):225:return 186; |==> <NO-OP>
6991:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):227:return 222; |==> <NO-OP>
6992:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):229:return 358; |==> <NO-OP>
6993:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):231:return 330; |==> <NO-OP>
6994:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):233:return 329; |==> <NO-OP>
6995:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):237:return 312; |==> <NO-OP>
6996:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):239:return 230; |==> <NO-OP>
6997:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):241:return 273; |==> <NO-OP>
6998:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):243:return 240; |==> <NO-OP>
6999:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):245:return 295; |==> <NO-OP>
7000:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):247:return 305; |==> <NO-OP>
7001:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):249:return 307; |==> <NO-OP>
7002:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):251:return 320; |==> <NO-OP>
7003:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):253:return 322; |==> <NO-OP>
7004:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):255:return 248; |==> <NO-OP>
7005:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):257:return 339; |==> <NO-OP>
7006:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):259:return 223; |==> <NO-OP>
7007:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):261:return 254; |==> <NO-OP>
7008:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):263:return 359; |==> <NO-OP>
7009:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):265:return 331; |==> <NO-OP>
7010:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getChar(int):267:return 173; |==> <NO-OP>
7011:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):280:return 192; |==> <NO-OP>
7012:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):282:return 200; |==> <NO-OP>
7013:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):284:return 204; |==> <NO-OP>
7014:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):286:return 210; |==> <NO-OP>
7015:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):288:return 217; |==> <NO-OP>
7016:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):290:return 224; |==> <NO-OP>
7017:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):292:return 232; |==> <NO-OP>
7018:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):294:return 236; |==> <NO-OP>
7019:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):296:return 242; |==> <NO-OP>
7020:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):298:return 249; |==> <NO-OP>
7021:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):302:return 180; |==> <NO-OP>
7022:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):304:return 193; |==> <NO-OP>
7023:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):306:return 262; |==> <NO-OP>
7024:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):308:return 201; |==> <NO-OP>
7025:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):310:return 205; |==> <NO-OP>
7026:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):312:return 313; |==> <NO-OP>
7027:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):314:return 323; |==> <NO-OP>
7028:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):316:return 211; |==> <NO-OP>
7029:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):318:return 340; |==> <NO-OP>
7030:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):320:return 346; |==> <NO-OP>
7031:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):322:return 218; |==> <NO-OP>
7032:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):324:return 221; |==> <NO-OP>
7033:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):326:return 377; |==> <NO-OP>
7034:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):328:return 225; |==> <NO-OP>
7035:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):330:return 263; |==> <NO-OP>
7036:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):332:return 233; |==> <NO-OP>
7037:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):334:return 501; |==> <NO-OP>
7038:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):336:return 237; |==> <NO-OP>
7039:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):338:return 314; |==> <NO-OP>
7040:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):340:return 324; |==> <NO-OP>
7041:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):342:return 243; |==> <NO-OP>
7042:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):344:return 341; |==> <NO-OP>
7043:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):346:return 347; |==> <NO-OP>
7044:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):348:return 250; |==> <NO-OP>
7045:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):350:return 253; |==> <NO-OP>
7046:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):352:return 378; |==> <NO-OP>
7047:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):356:return 194; |==> <NO-OP>
7048:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):358:return 264; |==> <NO-OP>
7049:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):360:return 202; |==> <NO-OP>
7050:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):362:return 284; |==> <NO-OP>
7051:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):364:return 292; |==> <NO-OP>
7052:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):366:return 206; |==> <NO-OP>
7053:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):368:return 308; |==> <NO-OP>
7054:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):370:return 212; |==> <NO-OP>
7055:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):372:return 348; |==> <NO-OP>
7056:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):374:return 219; |==> <NO-OP>
7057:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):376:return 372; |==> <NO-OP>
7058:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):378:return 374; |==> <NO-OP>
7059:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):380:return 226; |==> <NO-OP>
7060:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):382:return 265; |==> <NO-OP>
7061:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):384:return 234; |==> <NO-OP>
7062:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):386:return 285; |==> <NO-OP>
7063:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):388:return 293; |==> <NO-OP>
7064:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):390:return 238; |==> <NO-OP>
7065:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):392:return 309; |==> <NO-OP>
7066:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):394:return 244; |==> <NO-OP>
7067:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):396:return 349; |==> <NO-OP>
7068:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):398:return 251; |==> <NO-OP>
7069:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):400:return 373; |==> <NO-OP>
7070:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):402:return 375; |==> <NO-OP>
7071:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):406:return 195; |==> <NO-OP>
7072:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):408:return 296; |==> <NO-OP>
7073:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):410:return 209; |==> <NO-OP>
7074:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):412:return 213; |==> <NO-OP>
7075:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):414:return 360; |==> <NO-OP>
7076:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):416:return 227; |==> <NO-OP>
7077:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):418:return 297; |==> <NO-OP>
7078:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):420:return 241; |==> <NO-OP>
7079:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):422:return 245; |==> <NO-OP>
7080:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):424:return 361; |==> <NO-OP>
7081:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):428:return 256; |==> <NO-OP>
7082:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):430:return 274; |==> <NO-OP>
7083:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):432:return 298; |==> <NO-OP>
7084:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):434:return 332; |==> <NO-OP>
7085:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):436:return 362; |==> <NO-OP>
7086:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):438:return 257; |==> <NO-OP>
7087:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):440:return 275; |==> <NO-OP>
7088:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):442:return 299; |==> <NO-OP>
7089:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):444:return 333; |==> <NO-OP>
7090:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):446:return 363; |==> <NO-OP>
7091:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):450:return 728; |==> <NO-OP>
7092:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):452:return 258; |==> <NO-OP>
7093:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):454:return 286; |==> <NO-OP>
7094:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):456:return 364; |==> <NO-OP>
7095:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):458:return 259; |==> <NO-OP>
7096:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):460:return 287; |==> <NO-OP>
7097:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):462:return 365; |==> <NO-OP>
7098:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):466:return 266; |==> <NO-OP>
7099:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):468:return 278; |==> <NO-OP>
7100:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):470:return 288; |==> <NO-OP>
7101:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):472:return 304; |==> <NO-OP>
7102:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):474:return 379; |==> <NO-OP>
7103:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):476:return 267; |==> <NO-OP>
7104:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):478:return 279; |==> <NO-OP>
7105:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):480:return 289; |==> <NO-OP>
7106:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):482:return 380; |==> <NO-OP>
7107:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):486:return 168; |==> <NO-OP>
7108:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):488:return 196; |==> <NO-OP>
7109:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):490:return 203; |==> <NO-OP>
7110:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):492:return 207; |==> <NO-OP>
7111:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):494:return 214; |==> <NO-OP>
7112:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):496:return 220; |==> <NO-OP>
7113:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):498:return 376; |==> <NO-OP>
7114:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):500:return 228; |==> <NO-OP>
7115:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):502:return 235; |==> <NO-OP>
7116:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):504:return 239; |==> <NO-OP>
7117:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):506:return 246; |==> <NO-OP>
7118:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):508:return 252; |==> <NO-OP>
7119:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):510:return 255; |==> <NO-OP>
7120:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):516:return 730; |==> <NO-OP>
7121:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):518:return 197; |==> <NO-OP>
7122:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):520:return 366; |==> <NO-OP>
7123:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):522:return 229; |==> <NO-OP>
7124:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):524:return 367; |==> <NO-OP>
7125:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):528:return 184; |==> <NO-OP>
7126:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):530:return 199; |==> <NO-OP>
7127:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):532:return 290; |==> <NO-OP>
7128:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):534:return 310; |==> <NO-OP>
7129:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):536:return 315; |==> <NO-OP>
7130:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):538:return 325; |==> <NO-OP>
7131:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):540:return 342; |==> <NO-OP>
7132:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):542:return 350; |==> <NO-OP>
7133:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):544:return 354; |==> <NO-OP>
7134:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):546:return 231; |==> <NO-OP>
7135:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):549:return 311; |==> <NO-OP>
7136:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):551:return 316; |==> <NO-OP>
7137:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):553:return 326; |==> <NO-OP>
7138:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):555:return 343; |==> <NO-OP>
7139:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):557:return 351; |==> <NO-OP>
7140:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):559:return 355; |==> <NO-OP>
7141:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):565:return 336; |==> <NO-OP>
7142:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):567:return 368; |==> <NO-OP>
7143:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):569:return 337; |==> <NO-OP>
7144:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):571:return 369; |==> <NO-OP>
7145:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):575:return 731; |==> <NO-OP>
7146:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):577:return 260; |==> <NO-OP>
7147:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):579:return 280; |==> <NO-OP>
7148:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):581:return 302; |==> <NO-OP>
7149:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):583:return 370; |==> <NO-OP>
7150:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):585:return 261; |==> <NO-OP>
7151:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):587:return 281; |==> <NO-OP>
7152:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):589:return 303; |==> <NO-OP>
7153:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):591:return 371; |==> <NO-OP>
7154:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):595:return 711; |==> <NO-OP>
7155:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):597:return 268; |==> <NO-OP>
7156:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):599:return 270; |==> <NO-OP>
7157:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):601:return 282; |==> <NO-OP>
7158:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):603:return 317; |==> <NO-OP>
7159:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):605:return 327; |==> <NO-OP>
7160:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):607:return 344; |==> <NO-OP>
7161:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):609:return 352; |==> <NO-OP>
7162:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):611:return 356; |==> <NO-OP>
7163:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):613:return 381; |==> <NO-OP>
7164:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):615:return 269; |==> <NO-OP>
7165:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):617:return 271; |==> <NO-OP>
7166:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):619:return 283; |==> <NO-OP>
7167:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):621:return 318; |==> <NO-OP>
7168:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):623:return 328; |==> <NO-OP>
7169:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):625:return 345; |==> <NO-OP>
7170:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):627:return 353; |==> <NO-OP>
7171:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):629:return 357; |==> <NO-OP>
7172:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.Iso6937ToUnicode@getCombiningChar(int):631:return 382; |==> <NO-OP>
7173:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@<init>():59:g = new byte[2] |==> <NO-OP>
7174:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@<init>():60:init() |==> <NO-OP>
7175:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@init():67:g[0] = 66 |==> <NO-OP>
7176:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@init():68:g[1] = 69 |==> <NO-OP>
7177:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@init():69:charsetsUsed = "BE" |==> <NO-OP>
7178:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@setPreviousG0(int):96:g[G0] = (byte)table |==> <NO-OP>
7179:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@setPreviousG1(int):105:g[G1] = (byte)table |==> <NO-OP>
7180:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):116:lastLookupKey != null |==> true
7181:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):116:lastLookupKey != null && c.equals(lastLookupKey) |==> lastLookupKey != null == c.equals(lastLookupKey)
7182:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):116:lastLookupKey != null && c.equals(lastLookupKey) |==> false
7183:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):116:lastLookupKey != null && c.equals(lastLookupKey) |==> lastLookupKey != null
7184:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):116:lastLookupKey != null && c.equals(lastLookupKey) |==> c.equals(lastLookupKey)
7185:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):117:return lastLookupValue; |==> <NO-OP>
7186:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):120:lastLookupKey = c |==> <NO-OP>
7187:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@codeTableHash(java.lang.Character):121:lastLookupValue = getCharTable(c) |==> <NO-OP>
7188:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTable@charHasMatch(java.lang.Character):133:codeTableHash(c) != null |==> true
7189:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG0CharEntry(java.lang.Character):147:chars != null |==> true
7190:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG0CharEntry(java.lang.Character):147:chars.get((int)getPreviousG0()) != null |==> true
7191:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG0CharEntry(java.lang.Character):147:chars != null && chars.get((int)getPreviousG0()) != null |==> chars != null == (chars.get((int)getPreviousG0()) != null)
7192:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG0CharEntry(java.lang.Character):147:chars != null && chars.get((int)getPreviousG0()) != null |==> false
7193:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG0CharEntry(java.lang.Character):147:chars != null && chars.get((int)getPreviousG0()) != null |==> chars != null
7194:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG0CharEntry(java.lang.Character):147:chars != null && chars.get((int)getPreviousG0()) != null |==> chars.get((int)getPreviousG0()) != null
7195:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@inPreviousG0CharEntry(java.lang.Character):148:return true; |==> <NO-OP>
7196:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG1CharEntry(java.lang.Character):165:chars != null |==> true
7197:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG1CharEntry(java.lang.Character):165:chars.get((int)getPreviousG1()) != null |==> true
7198:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG1CharEntry(java.lang.Character):165:chars != null && chars.get((int)getPreviousG1()) != null |==> chars != null == (chars.get((int)getPreviousG1()) != null)
7199:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG1CharEntry(java.lang.Character):165:chars != null && chars.get((int)getPreviousG1()) != null |==> false
7200:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG1CharEntry(java.lang.Character):165:chars != null && chars.get((int)getPreviousG1()) != null |==> chars != null
7201:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTable@inPreviousG1CharEntry(java.lang.Character):165:chars != null && chars.get((int)getPreviousG1()) != null |==> chars.get((int)getPreviousG1()) != null
7202:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@inPreviousG1CharEntry(java.lang.Character):166:return true; |==> <NO-OP>
7203:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTable@getCharEntry(java.lang.Character,int):208:chars == null |==> false
7204:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@getCharEntry(java.lang.Character,int):209:return new char[0]; |==> <NO-OP>
7205:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):229:chars.keySet().size() == 1 |==> chars.keySet().size() <= 1
7206:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):229:chars.keySet().size() == 1 |==> chars.keySet().size() >= 1
7207:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):229:chars.keySet().size() == 1 |==> false
7208:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):230:return (char)chars.keySet().iterator().next().intValue(); |==> <NO-OP>
7209:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):233:i < charsetsUsed.length() |==> i != charsetsUsed.length()
7210:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):233:i < charsetsUsed.length() |==> i <= charsetsUsed.length()
7211:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):233:i < charsetsUsed.length() |==> false
7212:COR:chars.containsKey((int)toUse):TRUE:org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):236:chars.containsKey((int)toUse) |==> false
7213:COR:chars.containsKey((int)toUse):FALSE:org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):236:chars.containsKey((int)toUse) |==> true
7214:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):237:return toUse; |==> <NO-OP>
7215:COR:chars.containsKey('S'):TRUE:org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):241:chars.containsKey('S') |==> false
7216:COR:chars.containsKey('S'):FALSE:org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):241:chars.containsKey('S') |==> true
7217:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@getBestCharSet(java.lang.Character):247:charsetsUsed = charsetsUsed + returnVal |==> <NO-OP>
7218:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):262:str.length() == 2 |==> str.length() <= 2
7219:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):262:str.length() == 2 |==> str.length() >= 2
7220:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):262:str.length() == 2 |==> false
7221:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):263:result = new char[1] |==> <NO-OP>
7222:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):264:result[0] = (char)Integer.parseInt(str, 16) |==> <NO-OP>
7223:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):265:str.length() == 6 |==> str.length() <= 6
7224:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):265:str.length() == 6 |==> str.length() >= 6
7225:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):265:str.length() == 6 |==> false
7226:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):266:result = new char[3] |==> <NO-OP>
7227:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):267:result[0] = (char)Integer.parseInt(str.substring(0, 2), 16) |==> <NO-OP>
7228:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):268:result[1] = (char)Integer.parseInt(str.substring(2, 4), 16) |==> <NO-OP>
7229:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTable@deHexify(java.lang.String):269:result[2] = (char)Integer.parseInt(str.substring(4, 6), 16) |==> <NO-OP>
7230:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):44:factory.setNamespaceAware(true) |==> <NO-OP>
7231:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):45:factory.setValidating(false) |==> <NO-OP>
7232:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):54:rdr.setContentHandler(saxUms) |==> <NO-OP>
7233:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):55:rdr.parse(src) |==> <NO-OP>
7234:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):56:charsets = saxUms.getCharSets() |==> <NO-OP>
7235:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):59:Arrays.sort(charsetsKeys) |==> <NO-OP>
7236:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):61:dumpTablesAsSwitchStatement(combining, charsets, System.out) |==> <NO-OP>
7237:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):64:details.printStackTrace(System.out) |==> <NO-OP>
7238:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@main(java.lang.String[]):65:System.err.println("Exception: " + details) |==> <NO-OP>
7239:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):71:out.println("package org.marc4j.converter.impl;") |==> <NO-OP>
7240:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):72:out.println("") |==> <NO-OP>
7241:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):73:out.println("/**") |==> <NO-OP>
7242:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):74:out.println(" * An implementation of ReverseCodeTable that is used in converting Unicode") |==> <NO-OP>
7243:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):75:out.println(" * data to MARC8 data, that doesn\'t rely on any data files or resources or") |==> <NO-OP>
7244:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):76:out.println(" * data structures") |==> <NO-OP>
7245:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):77:out.println(" *") |==> <NO-OP>
7246:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):78:out.println(" * Warning: This file is generated by running the main routine in the file") |==> <NO-OP>
7247:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):79:out.println(" * ReverseCodeTableHandler.java") |==> <NO-OP>
7248:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):80:out.println(" *") |==> <NO-OP>
7249:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):81:out.println(" * Warning: Do not edit this file, or all edits will be lost at the next") |==> <NO-OP>
7250:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):82:out.println(" * build.") |==> <NO-OP>
7251:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):83:out.println(" */") |==> <NO-OP>
7252:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):84:out.println("") |==> <NO-OP>
7253:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):85:out.println("import java.util.Hashtable;") |==> <NO-OP>
7254:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):86:out.println("") |==> <NO-OP>
7255:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):87:out.println("public class ReverseCodeTableGenerated extends ReverseCodeTable {") |==> <NO-OP>
7256:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):88:out.println("") |==> <NO-OP>
7257:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):89:out.println("\tpublic boolean isCombining(Character c) {") |==> <NO-OP>
7258:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):90:out.println("\t\tswitch ((int)c.charValue()) {") |==> <NO-OP>
7259:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):93:Arrays.sort(combineArray) |==> <NO-OP>
7260:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):96:i < combineArray.length |==> i != combineArray.length
7261:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):96:i < combineArray.length |==> i <= combineArray.length
7262:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):96:i < combineArray.length |==> false
7263:COR:c.equals(prevc):TRUE:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):98:c.equals(prevc) |==> false
7264:COR:c.equals(prevc):FALSE:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):98:c.equals(prevc) |==> true
7265:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):99:out.println("\t\t\tcase 0x" + Integer.toHexString(c.charValue()) + ":") |==> <NO-OP>
7266:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):101:prevc = c |==> <NO-OP>
7267:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):104:out.println("\t\t\t\treturn true;") |==> <NO-OP>
7268:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):105:out.println("\t\t\tdefault: return false;") |==> <NO-OP>
7269:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):106:out.println("\t\t}") |==> <NO-OP>
7270:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):107:out.println("\t}") |==> <NO-OP>
7271:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):108:out.println("") |==> <NO-OP>
7272:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):109:out.println("\tpublic Hashtable<Integer, char[]> getCharTable(Character c) {") |==> <NO-OP>
7273:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):110:out.println("\t\tString resultStr1 = getCharTableCharSet(c);") |==> <NO-OP>
7274:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):111:out.println("\t\tString resultStr2 = getCharTableCharString(c);") |==> <NO-OP>
7275:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):112:out.println("\t\tif (resultStr2 == null)  return(null);") |==> <NO-OP>
7276:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):113:out.println("\t\tHashtable<Integer, char[]> result = new Hashtable<Integer, char[]>(resultStr1.length());") |==> <NO-OP>
7277:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):114:out.println("\t\tString res2[] = resultStr2.split(\" \");") |==> <NO-OP>
7278:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):115:out.println("\t\tfor (int i = 0; i < resultStr1.length(); i++) {") |==> <NO-OP>
7279:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):116:out.println("\t\t\tresult.put(new Integer(resultStr1.charAt(i)), deHexify(res2[(res2.length==1) ? 0 : i]));") |==> <NO-OP>
7280:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):117:out.println("\t\t}") |==> <NO-OP>
7281:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):118:out.println("\t\treturn(result);") |==> <NO-OP>
7282:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):119:out.println("\t}") |==> <NO-OP>
7283:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):120:out.println("") |==> <NO-OP>
7284:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):123:Arrays.sort(charsetsKeys) |==> <NO-OP>
7285:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):126:out.println("\tprivate String getCharTableCharSet(Character c)") |==> <NO-OP>
7286:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):127:out.println("\t{") |==> <NO-OP>
7287:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):128:out.println("\t\tint cVal = (int)c.charValue();") |==> <NO-OP>
7288:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):129:out.println("\t\tswitch(cVal) {") |==> <NO-OP>
7289:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):131:sel < charsetsKeys.length |==> sel != charsetsKeys.length
7290:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):131:sel < charsetsKeys.length |==> sel <= charsetsKeys.length
7291:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):131:sel < charsetsKeys.length |==> false
7292:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):134:Arrays.sort(tableKeys) |==> <NO-OP>
7293:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):137:i < tableKeys.length |==> i != tableKeys.length
7294:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):137:i < tableKeys.length |==> i <= tableKeys.length
7295:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):137:i < tableKeys.length |==> false
7296:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):138:sb.append((char)((Integer)tableKeys[i]).intValue()) |==> <NO-OP>
7297:COR:charset.equals("1"):TRUE:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):142:charset.equals("1") |==> false
7298:COR:charset.equals("1"):FALSE:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):142:charset.equals("1") |==> true
7299:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):143:out.println("\t\t\tcase 0x" + Integer.toHexString(charsetsKeys[sel].charValue()) + ": return \"" + charset + "\";") |==> <NO-OP>
7300:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):146:out.println("\t\t}") |==> <NO-OP>
7301:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):147:out.println("\t\treturn \"1\";") |==> <NO-OP>
7302:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):148:out.println("\t}") |==> <NO-OP>
7303:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):149:dumpPartialCharTableCharString(out, buffer, charsetsKeys, charsets, 0, 3500) |==> <NO-OP>
7304:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):150:dumpPartialCharTableCharString(out, buffer, charsetsKeys, charsets, 3500, 7000) |==> <NO-OP>
7305:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):151:dumpPartialCharTableCharString(out, buffer, charsetsKeys, charsets, 7000, 10500) |==> <NO-OP>
7306:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):152:dumpPartialCharTableCharString(out, buffer, charsetsKeys, charsets, 10500, 14000) |==> <NO-OP>
7307:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):153:dumpPartialCharTableCharString(out, buffer, charsetsKeys, charsets, 14000, charsetsKeys.length) |==> <NO-OP>
7308:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):155:out.println("\tprivate String getCharTableCharString(Character c)") |==> <NO-OP>
7309:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):156:out.println("\t{") |==> <NO-OP>
7310:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):157:out.println("\t\tint cVal = (int)c.charValue();") |==> <NO-OP>
7311:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):158:out.println(buffer.toString()) |==> <NO-OP>
7312:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):159:out.println("\t\treturn null;") |==> <NO-OP>
7313:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):160:out.println("\t}") |==> <NO-OP>
7314:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpTablesAsSwitchStatement(java.util.Vector<java.lang.Character>,java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,java.io.PrintStream):161:out.println("}") |==> <NO-OP>
7315:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):169:endOffset - 1 |==> endOffset % 1
7316:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):169:endOffset - 1 |==> endOffset * 1
7317:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):169:endOffset - 1 |==> endOffset + 1
7318:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):169:endOffset - 1 |==> endOffset / 1
7319:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):170:buffer.append("\t\tif (cVal >= " + startByteStr + " && cVal <= " + endByteStr + ")  return (getCharTableCharString_" + startByteStr + "_" + endByteStr + "(c));\n") |==> <NO-OP>
7320:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):172:out.println("\tprivate String getCharTableCharString_" + startByteStr + "_" + endByteStr + "(Character c) {") |==> <NO-OP>
7321:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):173:out.println("\t\tswitch((int)c.charValue()) {") |==> <NO-OP>
7322:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < charsetsKeys.length |==> sel != charsetsKeys.length
7323:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < charsetsKeys.length |==> sel <= charsetsKeys.length
7324:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < charsetsKeys.length |==> false
7325:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < endOffset |==> sel != endOffset
7326:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < endOffset |==> sel <= endOffset
7327:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < endOffset |==> false
7328:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < charsetsKeys.length && sel < endOffset |==> sel < charsetsKeys.length == sel < endOffset
7329:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < charsetsKeys.length && sel < endOffset |==> false
7330:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < charsetsKeys.length && sel < endOffset |==> sel < charsetsKeys.length
7331:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):175:sel < charsetsKeys.length && sel < endOffset |==> sel < endOffset
7332:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):178:Arrays.sort(tableKeys) |==> <NO-OP>
7333:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):184:i < tableKeys.length |==> i != tableKeys.length
7334:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):184:i < tableKeys.length |==> i <= tableKeys.length
7335:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):184:i < tableKeys.length |==> false
7336:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):187:sb1.append(hexify(valarray)) |==> <NO-OP>
7337:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):189:i == 0 |==> i <= 0
7338:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):189:i == 0 |==> i >= 0
7339:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):189:i == 0 |==> false
7340:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):190:sb2.append(hexify(valarray)) |==> <NO-OP>
7341:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 |==> i != 0
7342:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 |==> i >= 0
7343:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 |==> false
7344:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:valarray.length == 1 |==> valarray.length <= 1
7345:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:valarray.length == 1 |==> valarray.length >= 1
7346:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:valarray.length == 1 |==> false
7347:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 |==> i > 0 == (valarray.length == 1)
7348:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 |==> false
7349:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 |==> i > 0
7350:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 |==> valarray.length == 1
7351:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:prevcharArray != null |==> true
7352:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null |==> (i > 0 && valarray.length == 1) == (prevcharArray != null)
7353:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null |==> false
7354:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null |==> i > 0 && valarray.length == 1
7355:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null |==> prevcharArray != null
7356:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:prevcharArray.length == 1 |==> prevcharArray.length <= 1
7357:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:prevcharArray.length == 1 |==> prevcharArray.length >= 1
7358:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:prevcharArray.length == 1 |==> false
7359:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 |==> (i > 0 && valarray.length == 1 && prevcharArray != null) == (prevcharArray.length == 1)
7360:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 |==> false
7361:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 |==> i > 0 && valarray.length == 1 && prevcharArray != null
7362:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 |==> prevcharArray.length == 1
7363:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:valarray[0] != prevcharArray[0] |==> valarray[0] < prevcharArray[0]
7364:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:valarray[0] != prevcharArray[0] |==> valarray[0] > prevcharArray[0]
7365:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:valarray[0] != prevcharArray[0] |==> true
7366:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 && valarray[0] != prevcharArray[0] |==> (i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1) == (valarray[0] != prevcharArray[0])
7367:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 && valarray[0] != prevcharArray[0] |==> false
7368:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 && valarray[0] != prevcharArray[0] |==> i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1
7369:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):193:i > 0 && valarray.length == 1 && prevcharArray != null && prevcharArray.length == 1 && valarray[0] != prevcharArray[0] |==> valarray[0] != prevcharArray[0]
7370:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):194:useSB1 = true |==> <NO-OP>
7371:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):196:sb1.append(" ") |==> <NO-OP>
7372:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):197:prevcharArray = valarray |==> <NO-OP>
7373:COR:useSB1:TRUE:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):199:useSB1 |==> false
7374:COR:useSB1:FALSE:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):199:useSB1 |==> true
7375:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):200:out.println("\t\t\tcase 0x" + Integer.toHexString(((Character)charsetsKeys[sel]).charValue()) + ": return \"" + returnVal + "\";") |==> <NO-OP>
7376:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):204:out.println("\t\t\tdefault: return null;") |==> <NO-OP>
7377:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):205:out.println("\t\t}") |==> <NO-OP>
7378:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):206:out.println("\t}") |==> <NO-OP>
7379:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@dumpPartialCharTableCharString(java.io.PrintStream,java.lang.StringBuffer,java.lang.Object[],java.util.Hashtable<java.lang.Character,java.util.Hashtable<java.lang.Integer,char[]>>,int,int):207:out.println("") |==> <NO-OP>
7380:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@hexify(char[]):219:i < valarray.length |==> i != valarray.length
7381:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@hexify(char[]):219:i < valarray.length |==> i <= valarray.length
7382:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableGenerator@hexify(char[]):219:i < valarray.length |==> false
7383:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableGenerator@hexify(char[]):220:result += Integer.toHexString(valarray[i]) |==> <NO-OP>
7384:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@setDocumentLocator(org.xml.sax.Locator):89:this.locator = locator |==> <NO-OP>
7385:COR:name.equals("characterSet"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):95:name.equals("characterSet") |==> false
7386:COR:name.equals("characterSet"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):95:name.equals("characterSet") |==> true
7387:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):96:isocode = Integer.valueOf(atts.getValue("ISOcode"), 16) |==> <NO-OP>
7388:COR:name.equals("marc"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):97:name.equals("marc") |==> false
7389:COR:name.equals("marc"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):97:name.equals("marc") |==> true
7390:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):98:data = new StringBuffer() |==> <NO-OP>
7391:COR:name.equals("codeTables"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):99:name.equals("codeTables") |==> false
7392:COR:name.equals("codeTables"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):99:name.equals("codeTables") |==> true
7393:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):100:charsets = new Hashtable<Character, Hashtable<Integer, char[]>>() |==> <NO-OP>
7394:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):101:combiningchars = new Vector<Character>() |==> <NO-OP>
7395:COR:name.equals("ucs"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):102:name.equals("ucs") |==> false
7396:COR:name.equals("ucs"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):102:name.equals("ucs") |==> true
7397:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):103:data = new StringBuffer() |==> <NO-OP>
7398:COR:name.equals("alt"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):104:name.equals("alt") |==> false
7399:COR:name.equals("alt"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):104:name.equals("alt") |==> true
7400:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):105:data = new StringBuffer() |==> <NO-OP>
7401:COR:name.equals("code"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):106:name.equals("code") |==> false
7402:COR:name.equals("code"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):106:name.equals("code") |==> true
7403:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):107:ucs = null |==> <NO-OP>
7404:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):108:altucs = null |==> <NO-OP>
7405:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):109:combining = false |==> <NO-OP>
7406:COR:name.equals("isCombining"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):110:name.equals("isCombining") |==> false
7407:COR:name.equals("isCombining"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):110:name.equals("isCombining") |==> true
7408:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes):111:data = new StringBuffer() |==> <NO-OP>
7409:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableHandler@characters(char[],int,int):117:data != null |==> true
7410:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@characters(char[],int,int):118:data.append(ch, start, length) |==> <NO-OP>
7411:COR:name.equals("marc"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):124:name.equals("marc") |==> false
7412:COR:name.equals("marc"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):124:name.equals("marc") |==> true
7413:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):127:marcstr.length() == 6 |==> marcstr.length() <= 6
7414:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):127:marcstr.length() == 6 |==> marcstr.length() >= 6
7415:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):127:marcstr.length() == 6 |==> false
7416:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):128:marc = new char[3] |==> <NO-OP>
7417:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):129:marc[0] = (char)Integer.parseInt(marcstr.substring(0, 2), 16) |==> <NO-OP>
7418:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):130:marc[1] = (char)Integer.parseInt(marcstr.substring(2, 4), 16) |==> <NO-OP>
7419:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):131:marc[2] = (char)Integer.parseInt(marcstr.substring(4, 6), 16) |==> <NO-OP>
7420:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):133:marc = new char[1] |==> <NO-OP>
7421:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):134:marc[0] = (char)Integer.parseInt(marcstr, 16) |==> <NO-OP>
7422:COR:name.equals("ucs"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):136:name.equals("ucs") |==> false
7423:COR:name.equals("ucs"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):136:name.equals("ucs") |==> true
7424:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):137:data.length() > 0 |==> data.length() != 0
7425:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):137:data.length() > 0 |==> data.length() >= 0
7426:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):137:data.length() > 0 |==> false
7427:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):138:ucs = new Character((char)Integer.parseInt(data.toString(), 16)) |==> <NO-OP>
7428:COR:name.equals("alt"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):140:name.equals("alt") |==> false
7429:COR:name.equals("alt"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):140:name.equals("alt") |==> true
7430:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):141:data.length() > 0 |==> data.length() != 0
7431:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):141:data.length() > 0 |==> data.length() >= 0
7432:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):141:data.length() > 0 |==> false
7433:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):142:altucs = new Character((char)Integer.parseInt(data.toString(), 16)) |==> <NO-OP>
7434:COR:name.equals("code"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):144:name.equals("code") |==> false
7435:COR:name.equals("code"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):144:name.equals("code") |==> true
7436:COR:combining:TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):145:combining |==> false
7437:COR:combining:FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):145:combining |==> true
7438:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):146:ucs != null |==> true
7439:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):147:combiningchars.add(ucs) |==> <NO-OP>
7440:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):150:altucs != null |==> true
7441:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):151:combiningchars.add(altucs) |==> <NO-OP>
7442:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):155:ucs != null |==> true
7443:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):156:charsets.get(ucs) == null |==> false
7444:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):158:h.put(isocode, marc) |==> <NO-OP>
7445:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):159:charsets.put(ucs, h) |==> <NO-OP>
7446:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):162:h.put(isocode, marc) |==> <NO-OP>
7447:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):166:altucs != null |==> true
7448:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):167:charsets.get(altucs) == null |==> false
7449:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):170:h.put(isocode, marc) |==> <NO-OP>
7450:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):171:charsets.put(altucs, h) |==> <NO-OP>
7451:COR:h.containsKey(isocode):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):175:h.containsKey(isocode) |==> false
7452:COR:h.containsKey(isocode):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):175:h.containsKey(isocode) |==> true
7453:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):176:h.put(isocode, marc) |==> <NO-OP>
7454:COR:name.equals("isCombining"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):180:name.equals("isCombining") |==> false
7455:COR:name.equals("isCombining"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):180:name.equals("isCombining") |==> true
7456:COR:data.toString().equals("true"):TRUE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):181:data.toString().equals("true") |==> false
7457:COR:data.toString().equals("true"):FALSE:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):181:data.toString().equals("true") |==> true
7458:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):182:combining = true |==> <NO-OP>
7459:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHandler@endElement(java.lang.String,java.lang.String,java.lang.String):186:data = null |==> <NO-OP>
7460:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.io.InputStream):82:factory.setNamespaceAware(true) |==> <NO-OP>
7461:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.io.InputStream):83:factory.setValidating(false) |==> <NO-OP>
7462:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.io.InputStream):91:rdr.setContentHandler(saxUms) |==> <NO-OP>
7463:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.io.InputStream):92:rdr.parse(src) |==> <NO-OP>
7464:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.io.InputStream):94:charsets = saxUms.getCharSets() |==> <NO-OP>
7465:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.io.InputStream):95:combining = saxUms.getCombiningChars() |==> <NO-OP>
7466:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.lang.String):111:factory.setNamespaceAware(true) |==> <NO-OP>
7467:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.lang.String):112:factory.setValidating(false) |==> <NO-OP>
7468:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.lang.String):121:rdr.setContentHandler(saxUms) |==> <NO-OP>
7469:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.lang.String):122:rdr.parse(src) |==> <NO-OP>
7470:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.lang.String):124:charsets = saxUms.getCharSets() |==> <NO-OP>
7471:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.lang.String):125:combining = saxUms.getCombiningChars() |==> <NO-OP>
7472:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.net.URI):140:factory.setNamespaceAware(true) |==> <NO-OP>
7473:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.net.URI):141:factory.setValidating(false) |==> <NO-OP>
7474:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.net.URI):149:rdr.setContentHandler(saxUms) |==> <NO-OP>
7475:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.net.URI):150:rdr.parse(src) |==> <NO-OP>
7476:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.net.URI):152:charsets = saxUms.getCharSets() |==> <NO-OP>
7477:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.ReverseCodeTableHash@<init>(java.net.URI):153:combining = saxUms.getCombiningChars() |==> <NO-OP>
7478:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@<init>():63:rct = loadGeneratedTable() |==> <NO-OP>
7479:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@<init>(boolean):77:dontChangeCharset = true |==> <NO-OP>
7480:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@<init>(boolean):78:rct = loadGeneratedTable() |==> <NO-OP>
7481:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@<init>(java.lang.String):94:rct = new ReverseCodeTableHash(pathname) |==> <NO-OP>
7482:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@<init>(java.io.InputStream):108:rct = new ReverseCodeTableHash(in) |==> <NO-OP>
7483:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):141:rct.init() |==> <NO-OP>
7484:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):143:convertPortion(data, sb) |==> <NO-OP>
7485:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):145:rct.getPreviousG0() != ASCII |==> rct.getPreviousG0() < ASCII
7486:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):145:rct.getPreviousG0() != ASCII |==> rct.getPreviousG0() > ASCII
7487:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):145:rct.getPreviousG0() != ASCII |==> true
7488:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):146:sb.append(ESC) |==> <NO-OP>
7489:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):147:sb.append(G0) |==> <NO-OP>
7490:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convert(char[]):148:sb.append((char)ASCII) |==> <NO-OP>
7491:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):168:i < data.length |==> i != data.length
7492:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):168:i < data.length |==> i <= data.length
7493:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):168:i < data.length |==> false
7494:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:charValue == 32 |==> charValue <= 32
7495:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:charValue == 32 |==> charValue >= 32
7496:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:charValue == 32 |==> false
7497:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:rct.getPreviousG0() != '1' |==> rct.getPreviousG0() < '1'
7498:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:rct.getPreviousG0() != '1' |==> rct.getPreviousG0() > '1'
7499:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:rct.getPreviousG0() != '1' |==> true
7500:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:charValue == 32 && rct.getPreviousG0() != '1' |==> charValue == 32 == (rct.getPreviousG0() != '1')
7501:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:charValue == 32 && rct.getPreviousG0() != '1' |==> false
7502:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:charValue == 32 && rct.getPreviousG0() != '1' |==> charValue == 32
7503:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):173:charValue == 32 && rct.getPreviousG0() != '1' |==> rct.getPreviousG0() != '1'
7504:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):174:rct.getPreviousG0() == '1' |==> rct.getPreviousG0() <= '1'
7505:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):174:rct.getPreviousG0() == '1' |==> rct.getPreviousG0() >= '1'
7506:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):174:rct.getPreviousG0() == '1' |==> false
7507:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):175:sb.append(ESC) |==> <NO-OP>
7508:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):176:sb.append(G0) |==> <NO-OP>
7509:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):177:sb.append((char)ASCII) |==> <NO-OP>
7510:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):178:rct.setPreviousG0(ASCII) |==> <NO-OP>
7511:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):181:marc.append(" ") |==> <NO-OP>
7512:COR:rct.charHasMatch(c):TRUE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):182:rct.charHasMatch(c) |==> false
7513:COR:rct.charHasMatch(c):FALSE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):182:rct.charHasMatch(c) |==> true
7514:COR:tmpNormed.equals(tmpnorm):TRUE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):194:tmpNormed.equals(tmpnorm) |==> false
7515:COR:tmpNormed.equals(tmpnorm):FALSE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):194:tmpNormed.equals(tmpnorm) |==> true
7516:COR:allCharsHaveMatch(rct, tmpNormed):TRUE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):195:allCharsHaveMatch(rct, tmpNormed) |==> false
7517:COR:allCharsHaveMatch(rct, tmpNormed):FALSE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):195:allCharsHaveMatch(rct, tmpNormed) |==> true
7518:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):196:convertPortion(tmpNormed.toCharArray(), sb) |==> <NO-OP>
7519:STD:<CONT>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):197:continue; |==> <NO-OP>
7520:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):198:tmpNormed.length() > 2 |==> tmpNormed.length() != 2
7521:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):198:tmpNormed.length() > 2 |==> tmpNormed.length() >= 2
7522:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):198:tmpNormed.length() > 2 |==> false
7523:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):202:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) |==> !partialNormed.equals(firstTwo) == allCharsHaveMatch(rct, partialNormed)
7524:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):202:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) |==> false
7525:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):202:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) |==> !partialNormed.equals(firstTwo)
7526:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):202:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) |==> allCharsHaveMatch(rct, partialNormed)
7527:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):202:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) && allCharsHaveMatch(rct, tmpNormed.substring(2)) |==> (!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed)) == allCharsHaveMatch(rct, tmpNormed.substring(2))
7528:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):202:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) && allCharsHaveMatch(rct, tmpNormed.substring(2)) |==> false
7529:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):202:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) && allCharsHaveMatch(rct, tmpNormed.substring(2)) |==> !partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed)
7530:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):203:!partialNormed.equals(firstTwo) && allCharsHaveMatch(rct, partialNormed) && allCharsHaveMatch(rct, tmpNormed.substring(2)) |==> allCharsHaveMatch(rct, tmpNormed.substring(2))
7531:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):204:convertPortion((partialNormed + tmpNormed.substring(2)).toCharArray(), sb) |==> <NO-OP>
7532:STD:<CONT>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):205:continue; |==> <NO-OP>
7533:ROR:!=(int,int):<(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):210:rct.getPreviousG0() != ASCII |==> rct.getPreviousG0() < ASCII
7534:ROR:!=(int,int):>(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):210:rct.getPreviousG0() != ASCII |==> rct.getPreviousG0() > ASCII
7535:ROR:!=(int,int):TRUE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):210:rct.getPreviousG0() != ASCII |==> true
7536:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):211:sb.append(ESC) |==> <NO-OP>
7537:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):212:sb.append(G0) |==> <NO-OP>
7538:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):213:sb.append((char)ASCII) |==> <NO-OP>
7539:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):214:rct.setPreviousG0(ASCII) |==> <NO-OP>
7540:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):217:charValue < 4096 |==> charValue != 4096
7541:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):217:charValue < 4096 |==> charValue <= 4096
7542:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):217:charValue < 4096 |==> false
7543:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):218:charValue + 65536 |==> charValue % 65536
7544:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):218:charValue + 65536 |==> charValue * 65536
7545:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):218:charValue + 65536 |==> charValue - 65536
7546:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):218:charValue + 65536 |==> charValue / 65536
7547:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):218:marc.append("&#x" + Integer.toHexString(charValue + 65536).toUpperCase().substring(1) + ";") |==> <NO-OP>
7548:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):220:marc.append("&#x" + Integer.toHexString(charValue).toUpperCase() + ";") |==> <NO-OP>
7549:COR:rct.inPreviousG0CharEntry(c):TRUE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):223:rct.inPreviousG0CharEntry(c) |==> false
7550:COR:rct.inPreviousG0CharEntry(c):FALSE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):223:rct.inPreviousG0CharEntry(c) |==> true
7551:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):224:marc.append(rct.getCurrentG0CharEntry(c)) |==> <NO-OP>
7552:COR:rct.inPreviousG1CharEntry(c):TRUE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):225:rct.inPreviousG1CharEntry(c) |==> false
7553:COR:rct.inPreviousG1CharEntry(c):FALSE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):225:rct.inPreviousG1CharEntry(c) |==> true
7554:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):226:marc.append(rct.getCurrentG1CharEntry(c)) |==> <NO-OP>
7555:COR:dontChangeCharset:TRUE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):227:dontChangeCharset |==> false
7556:COR:dontChangeCharset:FALSE:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):227:dontChangeCharset |==> true
7557:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):228:charValue < 4096 |==> charValue != 4096
7558:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):228:charValue < 4096 |==> charValue <= 4096
7559:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):228:charValue < 4096 |==> false
7560:AOR:+(int,int):%(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):229:charValue + 65536 |==> charValue % 65536
7561:AOR:+(int,int):*(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):229:charValue + 65536 |==> charValue * 65536
7562:AOR:+(int,int):-(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):229:charValue + 65536 |==> charValue - 65536
7563:AOR:+(int,int):/(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):229:charValue + 65536 |==> charValue / 65536
7564:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):229:marc.append("&#x" + Integer.toHexString(charValue + 65536).toUpperCase().substring(1) + ";") |==> <NO-OP>
7565:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):231:marc.append("&#x" + Integer.toHexString(charValue).toUpperCase() + ";") |==> <NO-OP>
7566:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):244:marc8.length == 3 |==> marc8.length <= 3
7567:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):244:marc8.length == 3 |==> marc8.length >= 3
7568:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):244:marc8.length == 3 |==> false
7569:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):245:marc.append(ESC) |==> <NO-OP>
7570:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):246:marc.append(G0multibyte) |==> <NO-OP>
7571:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):247:rct.setPreviousG0(charset) |==> <NO-OP>
7572:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):248:marc8[0] < 128 |==> marc8[0] != 128
7573:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):248:marc8[0] < 128 |==> marc8[0] <= 128
7574:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):248:marc8[0] < 128 |==> false
7575:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):249:marc.append(ESC) |==> <NO-OP>
7576:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 98 |==> charset <= 98
7577:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 98 |==> charset >= 98
7578:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 98 |==> false
7579:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 112 |==> charset <= 112
7580:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 112 |==> charset >= 112
7581:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 112 |==> false
7582:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 98 || charset == 112 |==> charset == 98 != (charset == 112)
7583:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 98 || charset == 112 |==> charset == 98
7584:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 98 || charset == 112 |==> charset == 112
7585:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):251:charset == 98 || charset == 112 |==> true
7586:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):254:marc.append(G0) |==> <NO-OP>
7587:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):257:rct.setPreviousG0(charset) |==> <NO-OP>
7588:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):259:marc.append(ESC) |==> <NO-OP>
7589:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):260:marc.append(G1) |==> <NO-OP>
7590:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):261:rct.setPreviousG1(charset) |==> <NO-OP>
7591:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):264:marc.append((char)charset) |==> <NO-OP>
7592:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):265:marc.append(marc8) |==> <NO-OP>
7593:ROR:>(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):268:sb.length() > 0 |==> sb.length() != 0
7594:ROR:>(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):268:sb.length() > 0 |==> sb.length() >= 0
7595:ROR:>(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):268:sb.length() > 0 |==> false
7596:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):268:rct.isCombining(c) && sb.length() > 0 |==> rct.isCombining(c) == sb.length() > 0
7597:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):268:rct.isCombining(c) && sb.length() > 0 |==> false
7598:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):268:rct.isCombining(c) && sb.length() > 0 |==> rct.isCombining(c)
7599:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):268:rct.isCombining(c) && sb.length() > 0 |==> sb.length() > 0
7600:AOR:-(int,int):%(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):269:sb.length() - prev_len |==> sb.length() % prev_len
7601:AOR:-(int,int):*(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):269:sb.length() - prev_len |==> sb.length() * prev_len
7602:AOR:-(int,int):+(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):269:sb.length() - prev_len |==> sb.length() + prev_len
7603:AOR:-(int,int):/(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):269:sb.length() - prev_len |==> sb.length() / prev_len
7604:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):269:sb.insert(sb.length() - prev_len, marc) |==> <NO-OP>
7605:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):274:(int)c == 864 |==> (int)c <= 864
7606:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):274:(int)c == 864 |==> (int)c >= 864
7607:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):274:(int)c == 864 |==> false
7608:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):275:sb.append((char)251) |==> <NO-OP>
7609:ROR:==(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):278:(int)c == 865 |==> (int)c <= 865
7610:ROR:==(int,int):>=(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):278:(int)c == 865 |==> (int)c >= 865
7611:ROR:==(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):278:(int)c == 865 |==> false
7612:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):279:sb.append((char)236) |==> <NO-OP>
7613:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):282:sb.append(marc) |==> <NO-OP>
7614:STD:<ASSIGN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@convertPortion(char[],java.lang.StringBuffer):285:prev_len = marc.length() |==> <NO-OP>
7615:COR:rct.charHasMatch(c):TRUE:org.marc4j.converter.impl.UnicodeToAnsel@allCharsHaveMatch(org.marc4j.converter.impl.ReverseCodeTable,java.lang.String):291:rct.charHasMatch(c) |==> false
7616:COR:rct.charHasMatch(c):FALSE:org.marc4j.converter.impl.UnicodeToAnsel@allCharsHaveMatch(org.marc4j.converter.impl.ReverseCodeTable,java.lang.String):291:rct.charHasMatch(c) |==> true
7617:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToAnsel@allCharsHaveMatch(org.marc4j.converter.impl.ReverseCodeTable,java.lang.String):292:return false; |==> <NO-OP>
7618:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):56:i < normalizedData.length |==> i != normalizedData.length
7619:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):56:i < normalizedData.length |==> i <= normalizedData.length
7620:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):56:i < normalizedData.length |==> false
7621:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):58:c < 128 |==> c != 128
7622:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):58:c < 128 |==> c <= 128
7623:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):58:c < 128 |==> false
7624:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):59:sb.append(c) |==> <NO-OP>
7625:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):62:d < 256 |==> d != 256
7626:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):62:d < 256 |==> d <= 256
7627:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):62:d < 256 |==> false
7628:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):63:sb.append((char)d) |==> <NO-OP>
7629:AOR:/(int,int):%(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):65:d / 256 |==> d % 256
7630:AOR:/(int,int):*(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):65:d / 256 |==> d * 256
7631:AOR:/(int,int):+(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):65:d / 256 |==> d + 256
7632:AOR:/(int,int):-(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):65:d / 256 |==> d - 256
7633:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):65:sb.append((char)(d / 256)) |==> <NO-OP>
7634:AOR:%(int,int):*(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):66:d % 256 |==> d * 256
7635:AOR:%(int,int):+(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):66:d % 256 |==> d + 256
7636:AOR:%(int,int):-(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):66:d % 256 |==> d - 256
7637:AOR:%(int,int):/(int,int):org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):66:d % 256 |==> d / 256
7638:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(char[]):66:sb.append((char)(d % 256)) |==> <NO-OP>
7639:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):76:return 164; |==> <NO-OP>
7640:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):78:return 55328; |==> <NO-OP>
7641:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):80:return 161; |==> <NO-OP>
7642:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):82:return 163; |==> <NO-OP>
7643:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):84:return 165; |==> <NO-OP>
7644:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):86:return 167; |==> <NO-OP>
7645:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):88:return 51232; |==> <NO-OP>
7646:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):90:return 173; |==> <NO-OP>
7647:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):92:return 171; |==> <NO-OP>
7648:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):94:return 175; |==> <NO-OP>
7649:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):96:return 183; |==> <NO-OP>
7650:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):98:return 53280; |==> <NO-OP>
7651:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):100:return 187; |==> <NO-OP>
7652:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):102:return 191; |==> <NO-OP>
7653:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):104:return 49473; |==> <NO-OP>
7654:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):106:return 49729; |==> <NO-OP>
7655:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):108:return 49985; |==> <NO-OP>
7656:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):110:return 50241; |==> <NO-OP>
7657:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):112:return 51265; |==> <NO-OP>
7658:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):114:return 51777; |==> <NO-OP>
7659:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):116:return 225; |==> <NO-OP>
7660:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):118:return 53315; |==> <NO-OP>
7661:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):120:return 49477; |==> <NO-OP>
7662:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):122:return 49733; |==> <NO-OP>
7663:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):124:return 49989; |==> <NO-OP>
7664:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):126:return 51269; |==> <NO-OP>
7665:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):128:return 49481; |==> <NO-OP>
7666:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):130:return 49737; |==> <NO-OP>
7667:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):132:return 49993; |==> <NO-OP>
7668:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):134:return 51273; |==> <NO-OP>
7669:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):136:return 50254; |==> <NO-OP>
7670:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):138:return 49487; |==> <NO-OP>
7671:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):140:return 49743; |==> <NO-OP>
7672:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):142:return 49999; |==> <NO-OP>
7673:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):144:return 50255; |==> <NO-OP>
7674:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):146:return 51279; |==> <NO-OP>
7675:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):148:return 233; |==> <NO-OP>
7676:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):151:return 49493; |==> <NO-OP>
7677:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):153:return 49749; |==> <NO-OP>
7678:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):155:return 50005; |==> <NO-OP>
7679:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):157:return 51285; |==> <NO-OP>
7680:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):159:return 49753; |==> <NO-OP>
7681:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):161:return 236; |==> <NO-OP>
7682:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):163:return 251; |==> <NO-OP>
7683:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):165:return 49505; |==> <NO-OP>
7684:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):167:return 49761; |==> <NO-OP>
7685:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):169:return 50017; |==> <NO-OP>
7686:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):171:return 50273; |==> <NO-OP>
7687:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):173:return 51297; |==> <NO-OP>
7688:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):175:return 51809; |==> <NO-OP>
7689:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):177:return 241; |==> <NO-OP>
7690:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):179:return 53347; |==> <NO-OP>
7691:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):181:return 49509; |==> <NO-OP>
7692:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):183:return 49765; |==> <NO-OP>
7693:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):185:return 50021; |==> <NO-OP>
7694:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):187:return 51301; |==> <NO-OP>
7695:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):189:return 49513; |==> <NO-OP>
7696:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):191:return 49769; |==> <NO-OP>
7697:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):193:return 50025; |==> <NO-OP>
7698:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):195:return 51305; |==> <NO-OP>
7699:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):197:return 243; |==> <NO-OP>
7700:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):199:return 50286; |==> <NO-OP>
7701:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):201:return 49519; |==> <NO-OP>
7702:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):203:return 49775; |==> <NO-OP>
7703:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):205:return 50031; |==> <NO-OP>
7704:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):207:return 50287; |==> <NO-OP>
7705:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):209:return 51311; |==> <NO-OP>
7706:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):211:return 249; |==> <NO-OP>
7707:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):213:return 49525; |==> <NO-OP>
7708:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):215:return 49781; |==> <NO-OP>
7709:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):217:return 50037; |==> <NO-OP>
7710:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):219:return 51317; |==> <NO-OP>
7711:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):221:return 49785; |==> <NO-OP>
7712:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):223:return 252; |==> <NO-OP>
7713:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):225:return 51321; |==> <NO-OP>
7714:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):227:return 50497; |==> <NO-OP>
7715:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):229:return 50529; |==> <NO-OP>
7716:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):231:return 50753; |==> <NO-OP>
7717:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):233:return 50785; |==> <NO-OP>
7718:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):235:return 54081; |==> <NO-OP>
7719:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):237:return 54113; |==> <NO-OP>
7720:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):239:return 49731; |==> <NO-OP>
7721:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):241:return 49763; |==> <NO-OP>
7722:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):243:return 49987; |==> <NO-OP>
7723:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):245:return 50019; |==> <NO-OP>
7724:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):247:return 51011; |==> <NO-OP>
7725:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):249:return 51043; |==> <NO-OP>
7726:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):251:return 53059; |==> <NO-OP>
7727:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):253:return 53091; |==> <NO-OP>
7728:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):255:return 53060; |==> <NO-OP>
7729:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):257:return 53092; |==> <NO-OP>
7730:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):259:return 226; |==> <NO-OP>
7731:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):261:return 242; |==> <NO-OP>
7732:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):263:return 50501; |==> <NO-OP>
7733:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):265:return 50533; |==> <NO-OP>
7734:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):267:return 50757; |==> <NO-OP>
7735:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):269:return 50789; |==> <NO-OP>
7736:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):271:return 51013; |==> <NO-OP>
7737:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):273:return 51045; |==> <NO-OP>
7738:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):275:return 54085; |==> <NO-OP>
7739:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):277:return 54117; |==> <NO-OP>
7740:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):279:return 53061; |==> <NO-OP>
7741:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):281:return 53093; |==> <NO-OP>
7742:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):283:return 49991; |==> <NO-OP>
7743:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):285:return 50023; |==> <NO-OP>
7744:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):287:return 50759; |==> <NO-OP>
7745:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):289:return 50791; |==> <NO-OP>
7746:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):291:return 51015; |==> <NO-OP>
7747:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):293:return 51047; |==> <NO-OP>
7748:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):295:return 53319; |==> <NO-OP>
7749:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):297:return 53351; |==> <NO-OP>
7750:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):299:return 49992; |==> <NO-OP>
7751:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):301:return 50024; |==> <NO-OP>
7752:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):303:return 50249; |==> <NO-OP>
7753:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):305:return 50281; |==> <NO-OP>
7754:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):307:return 50505; |==> <NO-OP>
7755:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):309:return 50537; |==> <NO-OP>
7756:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):311:return 50761; |==> <NO-OP>
7757:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):313:return 50793; |==> <NO-OP>
7758:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):315:return 54089; |==> <NO-OP>
7759:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):317:return 54121; |==> <NO-OP>
7760:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):319:return 51017; |==> <NO-OP>
7761:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):321:return 245; |==> <NO-OP>
7762:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):323:return 230; |==> <NO-OP>
7763:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):325:return 246; |==> <NO-OP>
7764:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):327:return 49994; |==> <NO-OP>
7765:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):329:return 50026; |==> <NO-OP>
7766:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):331:return 53323; |==> <NO-OP>
7767:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):333:return 53355; |==> <NO-OP>
7768:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):335:return 49740; |==> <NO-OP>
7769:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):337:return 49772; |==> <NO-OP>
7770:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):339:return 53324; |==> <NO-OP>
7771:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):341:return 53356; |==> <NO-OP>
7772:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):343:return 53068; |==> <NO-OP>
7773:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):345:return 53100; |==> <NO-OP>
7774:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):347:return 232; |==> <NO-OP>
7775:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):349:return 248; |==> <NO-OP>
7776:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):351:return 49742; |==> <NO-OP>
7777:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):353:return 49774; |==> <NO-OP>
7778:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):355:return 53326; |==> <NO-OP>
7779:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):357:return 53358; |==> <NO-OP>
7780:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):359:return 53070; |==> <NO-OP>
7781:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):361:return 53102; |==> <NO-OP>
7782:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):363:return 50511; |==> <NO-OP>
7783:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):365:return 50543; |==> <NO-OP>
7784:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):367:return 50767; |==> <NO-OP>
7785:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):369:return 50799; |==> <NO-OP>
7786:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):371:return 52559; |==> <NO-OP>
7787:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):373:return 52591; |==> <NO-OP>
7788:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):375:return 234; |==> <NO-OP>
7789:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):377:return 250; |==> <NO-OP>
7790:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):379:return 49746; |==> <NO-OP>
7791:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):381:return 49778; |==> <NO-OP>
7792:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):383:return 53330; |==> <NO-OP>
7793:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):385:return 53362; |==> <NO-OP>
7794:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):387:return 53074; |==> <NO-OP>
7795:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):389:return 53106; |==> <NO-OP>
7796:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):391:return 49747; |==> <NO-OP>
7797:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):393:return 49779; |==> <NO-OP>
7798:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):395:return 50003; |==> <NO-OP>
7799:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):397:return 50035; |==> <NO-OP>
7800:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):399:return 53331; |==> <NO-OP>
7801:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):401:return 53363; |==> <NO-OP>
7802:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):403:return 53075; |==> <NO-OP>
7803:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):405:return 53107; |==> <NO-OP>
7804:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):407:return 53332; |==> <NO-OP>
7805:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):409:return 53364; |==> <NO-OP>
7806:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):411:return 53076; |==> <NO-OP>
7807:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):413:return 53108; |==> <NO-OP>
7808:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):415:return 50261; |==> <NO-OP>
7809:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):417:return 50293; |==> <NO-OP>
7810:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):419:return 50517; |==> <NO-OP>
7811:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):421:return 50549; |==> <NO-OP>
7812:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):423:return 50773; |==> <NO-OP>
7813:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):425:return 50805; |==> <NO-OP>
7814:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):427:return 51885; |==> <NO-OP>
7815:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):429:return 51829; |==> <NO-OP>
7816:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):431:return 52565; |==> <NO-OP>
7817:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):433:return 52597; |==> <NO-OP>
7818:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):435:return 54101; |==> <NO-OP>
7819:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):437:return 54133; |==> <NO-OP>
7820:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):439:return 50007; |==> <NO-OP>
7821:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):441:return 50039; |==> <NO-OP>
7822:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):443:return 50009; |==> <NO-OP>
7823:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):445:return 50041; |==> <NO-OP>
7824:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):447:return 51289; |==> <NO-OP>
7825:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):449:return 49754; |==> <NO-OP>
7826:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):451:return 49786; |==> <NO-OP>
7827:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):453:return 51034; |==> <NO-OP>
7828:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):455:return 51066; |==> <NO-OP>
7829:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):457:return 53082; |==> <NO-OP>
7830:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):459:return 53114; |==> <NO-OP>
7831:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):461:return 52820; |==> <NO-OP>
7832:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):463:return 52852; |==> <NO-OP>
7833:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):465:return 52821; |==> <NO-OP>
7834:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):467:return 52853; |==> <NO-OP>
7835:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):469:return 53057; |==> <NO-OP>
7836:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):471:return 53089; |==> <NO-OP>
7837:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):473:return 53065; |==> <NO-OP>
7838:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):475:return 53097; |==> <NO-OP>
7839:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):477:return 53071; |==> <NO-OP>
7840:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):479:return 53103; |==> <NO-OP>
7841:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):481:return 53077; |==> <NO-OP>
7842:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):483:return 53109; |==> <NO-OP>
7843:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):485:return 50657; |==> <NO-OP>
7844:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):487:return 50673; |==> <NO-OP>
7845:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):489:return 53063; |==> <NO-OP>
7846:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):491:return 53095; |==> <NO-OP>
7847:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):493:return 53067; |==> <NO-OP>
7848:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):495:return 53099; |==> <NO-OP>
7849:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):497:return 54095; |==> <NO-OP>
7850:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):499:return 54127; |==> <NO-OP>
7851:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):501:return 53098; |==> <NO-OP>
7852:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):503:return 49735; |==> <NO-OP>
7853:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):505:return 49767; |==> <NO-OP>
7854:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):507:return 49889; |==> <NO-OP>
7855:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):509:return 49905; |==> <NO-OP>
7856:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):511:return 189; |==> <NO-OP>
7857:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):513:return 190; |==> <NO-OP>
7858:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):515:return 176; |==> <NO-OP>
7859:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):517:return 177; |==> <NO-OP>
7860:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):519:return 55840; |==> <NO-OP>
7861:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):521:return 54048; |==> <NO-OP>
7862:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):523:return 54337; |==> <NO-OP>
7863:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):525:return 54369; |==> <NO-OP>
7864:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):527:return 51010; |==> <NO-OP>
7865:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):529:return 51042; |==> <NO-OP>
7866:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):531:return 54850; |==> <NO-OP>
7867:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):533:return 54882; |==> <NO-OP>
7868:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):535:return 51012; |==> <NO-OP>
7869:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):537:return 51044; |==> <NO-OP>
7870:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):539:return 54852; |==> <NO-OP>
7871:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):541:return 54884; |==> <NO-OP>
7872:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):543:return 53316; |==> <NO-OP>
7873:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):545:return 53348; |==> <NO-OP>
7874:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):547:return 51014; |==> <NO-OP>
7875:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):549:return 51046; |==> <NO-OP>
7876:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):551:return 50503; |==> <NO-OP>
7877:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):553:return 50535; |==> <NO-OP>
7878:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):555:return 51016; |==> <NO-OP>
7879:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):557:return 51048; |==> <NO-OP>
7880:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):559:return 54856; |==> <NO-OP>
7881:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):561:return 54888; |==> <NO-OP>
7882:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):563:return 51272; |==> <NO-OP>
7883:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):565:return 51304; |==> <NO-OP>
7884:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):567:return 53320; |==> <NO-OP>
7885:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):569:return 53352; |==> <NO-OP>
7886:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):571:return 63816; |==> <NO-OP>
7887:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):573:return 63848; |==> <NO-OP>
7888:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):575:return 49739; |==> <NO-OP>
7889:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):577:return 49771; |==> <NO-OP>
7890:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):579:return 54859; |==> <NO-OP>
7891:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):581:return 54891; |==> <NO-OP>
7892:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):583:return 54860; |==> <NO-OP>
7893:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):585:return 54892; |==> <NO-OP>
7894:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):587:return 49741; |==> <NO-OP>
7895:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):589:return 49773; |==> <NO-OP>
7896:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):591:return 51021; |==> <NO-OP>
7897:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):593:return 51053; |==> <NO-OP>
7898:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):595:return 54861; |==> <NO-OP>
7899:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):597:return 54893; |==> <NO-OP>
7900:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):599:return 51022; |==> <NO-OP>
7901:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):601:return 51054; |==> <NO-OP>
7902:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):603:return 54862; |==> <NO-OP>
7903:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):605:return 54894; |==> <NO-OP>
7904:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):607:return 49744; |==> <NO-OP>
7905:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):609:return 49776; |==> <NO-OP>
7906:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):611:return 51024; |==> <NO-OP>
7907:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):613:return 51056; |==> <NO-OP>
7908:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):615:return 51026; |==> <NO-OP>
7909:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):617:return 51058; |==> <NO-OP>
7910:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):619:return 54866; |==> <NO-OP>
7911:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):621:return 54898; |==> <NO-OP>
7912:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):623:return 51027; |==> <NO-OP>
7913:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):625:return 51059; |==> <NO-OP>
7914:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):627:return 54867; |==> <NO-OP>
7915:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):629:return 54899; |==> <NO-OP>
7916:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):631:return 51028; |==> <NO-OP>
7917:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):633:return 51060; |==> <NO-OP>
7918:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):635:return 54868; |==> <NO-OP>
7919:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):637:return 54900; |==> <NO-OP>
7920:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):639:return 55125; |==> <NO-OP>
7921:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):641:return 55157; |==> <NO-OP>
7922:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):643:return 50262; |==> <NO-OP>
7923:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):645:return 50294; |==> <NO-OP>
7924:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):647:return 54870; |==> <NO-OP>
7925:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):649:return 54902; |==> <NO-OP>
7926:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):651:return 49495; |==> <NO-OP>
7927:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):653:return 49527; |==> <NO-OP>
7928:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):655:return 49751; |==> <NO-OP>
7929:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):657:return 49783; |==> <NO-OP>
7930:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):659:return 51287; |==> <NO-OP>
7931:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):661:return 51319; |==> <NO-OP>
7932:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):663:return 51031; |==> <NO-OP>
7933:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):665:return 51063; |==> <NO-OP>
7934:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):667:return 54871; |==> <NO-OP>
7935:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):669:return 54903; |==> <NO-OP>
7936:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):671:return 51032; |==> <NO-OP>
7937:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):673:return 51064; |==> <NO-OP>
7938:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):675:return 51288; |==> <NO-OP>
7939:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):677:return 51320; |==> <NO-OP>
7940:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):679:return 51033; |==> <NO-OP>
7941:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):681:return 51065; |==> <NO-OP>
7942:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):683:return 50010; |==> <NO-OP>
7943:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):685:return 50042; |==> <NO-OP>
7944:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):687:return 54874; |==> <NO-OP>
7945:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):689:return 54906; |==> <NO-OP>
7946:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):691:return 51316; |==> <NO-OP>
7947:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):693:return 51831; |==> <NO-OP>
7948:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):695:return 51833; |==> <NO-OP>
7949:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):697:return 54849; |==> <NO-OP>
7950:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):699:return 54881; |==> <NO-OP>
7951:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):701:return 49217; |==> <NO-OP>
7952:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):703:return 49249; |==> <NO-OP>
7953:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):705:return 54853; |==> <NO-OP>
7954:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):707:return 54885; |==> <NO-OP>
7955:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):709:return 49221; |==> <NO-OP>
7956:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):711:return 49253; |==> <NO-OP>
7957:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):713:return 50245; |==> <NO-OP>
7958:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):715:return 50277; |==> <NO-OP>
7959:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):717:return 49225; |==> <NO-OP>
7960:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):719:return 49257; |==> <NO-OP>
7961:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):721:return 54857; |==> <NO-OP>
7962:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):723:return 54889; |==> <NO-OP>
7963:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):725:return 54863; |==> <NO-OP>
7964:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):727:return 54895; |==> <NO-OP>
7965:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):729:return 49231; |==> <NO-OP>
7966:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):731:return 49263; |==> <NO-OP>
7967:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):733:return 54869; |==> <NO-OP>
7968:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):735:return 54901; |==> <NO-OP>
7969:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):737:return 49237; |==> <NO-OP>
7970:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):739:return 49269; |==> <NO-OP>
7971:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):741:return 49497; |==> <NO-OP>
7972:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):743:return 49529; |==> <NO-OP>
7973:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):745:return 54873; |==> <NO-OP>
7974:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):747:return 54905; |==> <NO-OP>
7975:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):749:return 49241; |==> <NO-OP>
7976:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):751:return 49273; |==> <NO-OP>
7977:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):753:return 50265; |==> <NO-OP>
7978:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):755:return 50297; |==> <NO-OP>
7979:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):757:return 55584; |==> <NO-OP>
7980:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):759:return 169; |==> <NO-OP>
7981:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):761:return 185; |==> <NO-OP>
7982:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):763:return 178; |==> <NO-OP>
7983:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):765:return 170; |==> <NO-OP>
7984:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):767:return 186; |==> <NO-OP>
7985:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):769:return 162; |==> <NO-OP>
7986:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):771:return 166; |==> <NO-OP>
7987:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):773:return 182; |==> <NO-OP>
7988:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):775:return 168; |==> <NO-OP>
7989:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):777:return 184; |==> <NO-OP>
7990:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):779:return 174; |==> <NO-OP>
7991:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):781:return 172; |==> <NO-OP>
7992:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso5426@convert(int):783:return 188; |==> <NO-OP>
7993:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):49:i < data.length |==> i != data.length
7994:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):49:i < data.length |==> i <= data.length
7995:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):49:i < data.length |==> false
7996:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):51:c < 128 |==> c != 128
7997:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):51:c < 128 |==> c <= 128
7998:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):51:c < 128 |==> false
7999:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):52:sb.append(c) |==> <NO-OP>
8000:ROR:<(int,int):!=(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):55:d < 256 |==> d != 256
8001:ROR:<(int,int):<=(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):55:d < 256 |==> d <= 256
8002:ROR:<(int,int):FALSE(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):55:d < 256 |==> false
8003:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):56:sb.append((char)d) |==> <NO-OP>
8004:AOR:/(int,int):%(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):58:d / 256 |==> d % 256
8005:AOR:/(int,int):*(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):58:d / 256 |==> d * 256
8006:AOR:/(int,int):+(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):58:d / 256 |==> d + 256
8007:AOR:/(int,int):-(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):58:d / 256 |==> d - 256
8008:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):58:sb.append((char)(d / 256)) |==> <NO-OP>
8009:AOR:%(int,int):*(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):59:d % 256 |==> d * 256
8010:AOR:%(int,int):+(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):59:d % 256 |==> d + 256
8011:AOR:%(int,int):-(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):59:d % 256 |==> d - 256
8012:AOR:%(int,int):/(int,int):org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):59:d % 256 |==> d / 256
8013:STD:<CALL>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(char[]):59:sb.append((char)(d % 256)) |==> <NO-OP>
8014:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):69:return 160; |==> <NO-OP>
8015:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):71:return 161; |==> <NO-OP>
8016:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):73:return 162; |==> <NO-OP>
8017:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):75:return 163; |==> <NO-OP>
8018:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):77:return 168; |==> <NO-OP>
8019:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):79:return 165; |==> <NO-OP>
8020:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):81:return 215; |==> <NO-OP>
8021:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):83:return 167; |==> <NO-OP>
8022:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):85:return 51232; |==> <NO-OP>
8023:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):87:return 211; |==> <NO-OP>
8024:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):89:return 227; |==> <NO-OP>
8025:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):91:return 171; |==> <NO-OP>
8026:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):93:return 214; |==> <NO-OP>
8027:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):95:return 255; |==> <NO-OP>
8028:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):97:return 212; |==> <NO-OP>
8029:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):99:return 176; |==> <NO-OP>
8030:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):101:return 177; |==> <NO-OP>
8031:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):103:return 178; |==> <NO-OP>
8032:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):105:return 179; |==> <NO-OP>
8033:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):107:return 49696; |==> <NO-OP>
8034:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):109:return 181; |==> <NO-OP>
8035:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):111:return 182; |==> <NO-OP>
8036:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):113:return 183; |==> <NO-OP>
8037:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):115:return 52000; |==> <NO-OP>
8038:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):117:return 209; |==> <NO-OP>
8039:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):119:return 235; |==> <NO-OP>
8040:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):121:return 187; |==> <NO-OP>
8041:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):123:return 188; |==> <NO-OP>
8042:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):125:return 189; |==> <NO-OP>
8043:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):127:return 190; |==> <NO-OP>
8044:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):129:return 191; |==> <NO-OP>
8045:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):131:return 49473; |==> <NO-OP>
8046:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):133:return 49729; |==> <NO-OP>
8047:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):135:return 49985; |==> <NO-OP>
8048:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):137:return 50241; |==> <NO-OP>
8049:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):139:return 51265; |==> <NO-OP>
8050:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):141:return 51777; |==> <NO-OP>
8051:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):143:return 225; |==> <NO-OP>
8052:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):145:return 52035; |==> <NO-OP>
8053:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):147:return 49477; |==> <NO-OP>
8054:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):149:return 49733; |==> <NO-OP>
8055:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):151:return 49989; |==> <NO-OP>
8056:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):153:return 51269; |==> <NO-OP>
8057:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):155:return 49481; |==> <NO-OP>
8058:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):157:return 49737; |==> <NO-OP>
8059:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):159:return 49993; |==> <NO-OP>
8060:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):161:return 51273; |==> <NO-OP>
8061:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):163:return 50254; |==> <NO-OP>
8062:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):165:return 49487; |==> <NO-OP>
8063:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):167:return 49743; |==> <NO-OP>
8064:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):169:return 49999; |==> <NO-OP>
8065:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):171:return 50255; |==> <NO-OP>
8066:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):173:return 51279; |==> <NO-OP>
8067:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):175:return 180; |==> <NO-OP>
8068:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):177:return 233; |==> <NO-OP>
8069:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):179:return 49493; |==> <NO-OP>
8070:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):181:return 49749; |==> <NO-OP>
8071:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):183:return 50005; |==> <NO-OP>
8072:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):185:return 51285; |==> <NO-OP>
8073:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):187:return 49753; |==> <NO-OP>
8074:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):189:return 236; |==> <NO-OP>
8075:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):191:return 251; |==> <NO-OP>
8076:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):193:return 49505; |==> <NO-OP>
8077:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):195:return 49761; |==> <NO-OP>
8078:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):197:return 50017; |==> <NO-OP>
8079:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):199:return 50273; |==> <NO-OP>
8080:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):201:return 51297; |==> <NO-OP>
8081:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):203:return 51809; |==> <NO-OP>
8082:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):205:return 241; |==> <NO-OP>
8083:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):207:return 52067; |==> <NO-OP>
8084:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):209:return 49509; |==> <NO-OP>
8085:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):211:return 49765; |==> <NO-OP>
8086:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):213:return 50021; |==> <NO-OP>
8087:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):215:return 51301; |==> <NO-OP>
8088:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):217:return 49513; |==> <NO-OP>
8089:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):219:return 49769; |==> <NO-OP>
8090:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):221:return 50025; |==> <NO-OP>
8091:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):223:return 51305; |==> <NO-OP>
8092:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):225:return 243; |==> <NO-OP>
8093:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):227:return 50286; |==> <NO-OP>
8094:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):229:return 49519; |==> <NO-OP>
8095:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):231:return 49775; |==> <NO-OP>
8096:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):233:return 50031; |==> <NO-OP>
8097:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):235:return 50287; |==> <NO-OP>
8098:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):237:return 51311; |==> <NO-OP>
8099:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):239:return 184; |==> <NO-OP>
8100:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):241:return 249; |==> <NO-OP>
8101:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):243:return 49525; |==> <NO-OP>
8102:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):245:return 49781; |==> <NO-OP>
8103:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):247:return 50037; |==> <NO-OP>
8104:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):249:return 51317; |==> <NO-OP>
8105:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):251:return 49785; |==> <NO-OP>
8106:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):253:return 252; |==> <NO-OP>
8107:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):255:return 51321; |==> <NO-OP>
8108:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):257:return 50497; |==> <NO-OP>
8109:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):259:return 50529; |==> <NO-OP>
8110:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):261:return 50753; |==> <NO-OP>
8111:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):263:return 50785; |==> <NO-OP>
8112:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):265:return 52801; |==> <NO-OP>
8113:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):267:return 52833; |==> <NO-OP>
8114:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):269:return 49731; |==> <NO-OP>
8115:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):271:return 49763; |==> <NO-OP>
8116:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):273:return 49987; |==> <NO-OP>
8117:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):275:return 50019; |==> <NO-OP>
8118:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):277:return 51011; |==> <NO-OP>
8119:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):279:return 51043; |==> <NO-OP>
8120:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):281:return 53059; |==> <NO-OP>
8121:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):283:return 53091; |==> <NO-OP>
8122:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):285:return 53060; |==> <NO-OP>
8123:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):287:return 53092; |==> <NO-OP>
8124:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):289:return 226; |==> <NO-OP>
8125:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):291:return 242; |==> <NO-OP>
8126:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):293:return 50501; |==> <NO-OP>
8127:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):295:return 50533; |==> <NO-OP>
8128:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):297:return 51013; |==> <NO-OP>
8129:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):299:return 51045; |==> <NO-OP>
8130:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):301:return 52805; |==> <NO-OP>
8131:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):303:return 52837; |==> <NO-OP>
8132:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):305:return 53061; |==> <NO-OP>
8133:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):307:return 53093; |==> <NO-OP>
8134:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):309:return 49991; |==> <NO-OP>
8135:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):311:return 50023; |==> <NO-OP>
8136:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):313:return 50759; |==> <NO-OP>
8137:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):315:return 50791; |==> <NO-OP>
8138:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):317:return 51015; |==> <NO-OP>
8139:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):319:return 51047; |==> <NO-OP>
8140:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):321:return 52039; |==> <NO-OP>
8141:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):324:return 49992; |==> <NO-OP>
8142:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):326:return 50024; |==> <NO-OP>
8143:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):328:return 228; |==> <NO-OP>
8144:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):330:return 244; |==> <NO-OP>
8145:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):332:return 50249; |==> <NO-OP>
8146:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):334:return 50281; |==> <NO-OP>
8147:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):336:return 50505; |==> <NO-OP>
8148:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):338:return 50537; |==> <NO-OP>
8149:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):340:return 52809; |==> <NO-OP>
8150:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):342:return 52841; |==> <NO-OP>
8151:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):344:return 51017; |==> <NO-OP>
8152:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):346:return 245; |==> <NO-OP>
8153:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):348:return 230; |==> <NO-OP>
8154:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):350:return 246; |==> <NO-OP>
8155:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):352:return 49994; |==> <NO-OP>
8156:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):354:return 50026; |==> <NO-OP>
8157:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):356:return 52043; |==> <NO-OP>
8158:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):358:return 52075; |==> <NO-OP>
8159:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):360:return 240; |==> <NO-OP>
8160:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):362:return 49740; |==> <NO-OP>
8161:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):364:return 49772; |==> <NO-OP>
8162:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):366:return 52044; |==> <NO-OP>
8163:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):368:return 52076; |==> <NO-OP>
8164:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):370:return 53068; |==> <NO-OP>
8165:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):372:return 53100; |==> <NO-OP>
8166:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):374:return 231; |==> <NO-OP>
8167:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):376:return 247; |==> <NO-OP>
8168:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):378:return 232; |==> <NO-OP>
8169:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):380:return 248; |==> <NO-OP>
8170:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):382:return 49742; |==> <NO-OP>
8171:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):384:return 49774; |==> <NO-OP>
8172:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):386:return 52046; |==> <NO-OP>
8173:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):388:return 52078; |==> <NO-OP>
8174:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):390:return 53070; |==> <NO-OP>
8175:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):392:return 53102; |==> <NO-OP>
8176:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):394:return 239; |==> <NO-OP>
8177:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):397:return 238; |==> <NO-OP>
8178:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):399:return 254; |==> <NO-OP>
8179:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):401:return 50511; |==> <NO-OP>
8180:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):403:return 50543; |==> <NO-OP>
8181:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):405:return 52559; |==> <NO-OP>
8182:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):407:return 52591; |==> <NO-OP>
8183:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):409:return 234; |==> <NO-OP>
8184:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):411:return 250; |==> <NO-OP>
8185:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):413:return 49746; |==> <NO-OP>
8186:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):415:return 49778; |==> <NO-OP>
8187:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):417:return 52050; |==> <NO-OP>
8188:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):419:return 52082; |==> <NO-OP>
8189:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):421:return 53074; |==> <NO-OP>
8190:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):423:return 53106; |==> <NO-OP>
8191:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):425:return 49747; |==> <NO-OP>
8192:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):427:return 49779; |==> <NO-OP>
8193:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):429:return 50003; |==> <NO-OP>
8194:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):431:return 50035; |==> <NO-OP>
8195:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):433:return 52051; |==> <NO-OP>
8196:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):435:return 52083; |==> <NO-OP>
8197:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):437:return 53075; |==> <NO-OP>
8198:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):439:return 53107; |==> <NO-OP>
8199:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):441:return 52052; |==> <NO-OP>
8200:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):443:return 52084; |==> <NO-OP>
8201:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):445:return 53076; |==> <NO-OP>
8202:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):447:return 53108; |==> <NO-OP>
8203:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):449:return 237; |==> <NO-OP>
8204:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):451:return 253; |==> <NO-OP>
8205:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):453:return 50261; |==> <NO-OP>
8206:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):455:return 50293; |==> <NO-OP>
8207:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):457:return 50517; |==> <NO-OP>
8208:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):459:return 50549; |==> <NO-OP>
8209:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):461:return 50773; |==> <NO-OP>
8210:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):463:return 50805; |==> <NO-OP>
8211:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):465:return 51885; |==> <NO-OP>
8212:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):467:return 51829; |==> <NO-OP>
8213:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):469:return 52565; |==> <NO-OP>
8214:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):471:return 52597; |==> <NO-OP>
8215:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):473:return 52821; |==> <NO-OP>
8216:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):475:return 52853; |==> <NO-OP>
8217:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):477:return 50007; |==> <NO-OP>
8218:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):479:return 50039; |==> <NO-OP>
8219:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):481:return 50009; |==> <NO-OP>
8220:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):483:return 50041; |==> <NO-OP>
8221:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):485:return 51289; |==> <NO-OP>
8222:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):487:return 49754; |==> <NO-OP>
8223:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):489:return 49786; |==> <NO-OP>
8224:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):491:return 51034; |==> <NO-OP>
8225:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):493:return 51066; |==> <NO-OP>
8226:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):495:return 53082; |==> <NO-OP>
8227:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):497:return 53114; |==> <NO-OP>
8228:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):499:return 49767; |==> <NO-OP>
8229:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):501:return 53024; |==> <NO-OP>
8230:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):503:return 50720; |==> <NO-OP>
8231:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):505:return 51744; |==> <NO-OP>
8232:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):507:return 52768; |==> <NO-OP>
8233:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):509:return 208; |==> <NO-OP>
8234:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):511:return 169; |==> <NO-OP>
8235:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):513:return 185; |==> <NO-OP>
8236:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):515:return 170; |==> <NO-OP>
8237:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):517:return 186; |==> <NO-OP>
8238:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):519:return 210; |==> <NO-OP>
8239:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):521:return 224; |==> <NO-OP>
8240:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):523:return 220; |==> <NO-OP>
8241:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):525:return 223; |==> <NO-OP>
8242:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):527:return 172; |==> <NO-OP>
8243:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):529:return 173; |==> <NO-OP>
8244:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):531:return 174; |==> <NO-OP>
8245:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):533:return 175; |==> <NO-OP>
8246:STD:<RETURN>:<NO-OP>:org.marc4j.converter.impl.UnicodeToIso6937@convert(int):535:return 213; |==> <NO-OP>
8247:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.ControlFieldImpl@<init>(java.lang.String,java.lang.String):67:this.setData(data) |==> <NO-OP>
8248:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.ControlFieldImpl@setData(java.lang.String):77:this.data = data |==> <NO-OP>
8249:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.ControlFieldImpl@setId(java.lang.Long):121:this.id = id |==> <NO-OP>
8250:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.VariableFieldImpl@<init>(java.lang.String):51:tag == null |==> false
8251:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.VariableFieldImpl@<init>(java.lang.String):54:this.setTag(tag) |==> <NO-OP>
8252:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.VariableFieldImpl@setTag(java.lang.String):64:this.tag = tag |==> <NO-OP>
8253:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@<init>(java.lang.String,char,char):71:this.setIndicator1(ind1) |==> <NO-OP>
8254:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@<init>(java.lang.String,char,char):72:this.setIndicator2(ind2) |==> <NO-OP>
8255:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@setIndicator1(char):82:this.ind1 = ind1 |==> <NO-OP>
8256:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@setIndicator2(char):102:this.ind2 = ind2 |==> <NO-OP>
8257:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@addSubfield(org.marc4j.marc.Subfield):124:subfields.add(subfield) |==> <NO-OP>
8258:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@addSubfield(int,org.marc4j.marc.Subfield):139:subfields.add(index, subfield) |==> <NO-OP>
8259:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@removeSubfield(org.marc4j.marc.Subfield):149:subfields.remove(subfield) |==> <NO-OP>
8260:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfields(char):173:sf.getCode() == code |==> sf.getCode() <= code
8261:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfields(char):173:sf.getCode() == code |==> sf.getCode() >= code
8262:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfields(char):173:sf.getCode() == code |==> false
8263:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfields(char):174:result.add(sf) |==> <NO-OP>
8264:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec == null |==> false
8265:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec.length() == 0 |==> sfSpec.length() <= 0
8266:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec.length() == 0 |==> sfSpec.length() >= 0
8267:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec.length() == 0 |==> false
8268:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec == null || sfSpec.length() == 0 |==> sfSpec == null != (sfSpec.length() == 0)
8269:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec == null || sfSpec.length() == 0 |==> sfSpec == null
8270:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec == null || sfSpec.length() == 0 |==> sfSpec.length() == 0
8271:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):192:sfSpec == null || sfSpec.length() == 0 |==> true
8272:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):194:sfData.add(sf) |==> <NO-OP>
8273:COR:sfSpec.contains("["):TRUE:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):196:sfSpec.contains("[") |==> false
8274:COR:sfSpec.contains("["):FALSE:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):196:sfSpec.contains("[") |==> true
8275:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):200:sfPattern = Pattern.compile(sfSpec) |==> <NO-OP>
8276:COR:m.matches():TRUE:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):204:m.matches() |==> false
8277:COR:m.matches():FALSE:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):204:m.matches() |==> true
8278:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):205:sfData.add(sf) |==> <NO-OP>
8279:COR:sfSpec.contains(String.valueOf(sf.getCode())):TRUE:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):216:sfSpec.contains(String.valueOf(sf.getCode())) |==> false
8280:COR:sfSpec.contains(String.valueOf(sf.getCode())):FALSE:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):216:sfSpec.contains(String.valueOf(sf.getCode())) |==> true
8281:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfields(java.lang.String):217:sfData.add(sf) |==> <NO-OP>
8282:COR:sfList.isEmpty():TRUE:org.marc4j.marc.impl.DataFieldImpl@getSubfieldsAsString(java.lang.String):230:sfList.isEmpty() |==> false
8283:COR:sfList.isEmpty():FALSE:org.marc4j.marc.impl.DataFieldImpl@getSubfieldsAsString(java.lang.String):230:sfList.isEmpty() |==> true
8284:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfieldsAsString(java.lang.String):231:return null; |==> <NO-OP>
8285:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfieldsAsString(java.lang.String):235:buf.append(sf.getData()) |==> <NO-OP>
8286:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfield(char):248:sf.getCode() == code |==> sf.getCode() <= code
8287:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfield(char):248:sf.getCode() == code |==> sf.getCode() >= code
8288:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.DataFieldImpl@getSubfield(char):248:sf.getCode() == code |==> false
8289:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@getSubfield(char):249:return sf; |==> <NO-OP>
8290:COR:sf.find(pattern):TRUE:org.marc4j.marc.impl.DataFieldImpl@find(java.lang.String):265:sf.find(pattern) |==> false
8291:COR:sf.find(pattern):FALSE:org.marc4j.marc.impl.DataFieldImpl@find(java.lang.String):265:sf.find(pattern) |==> true
8292:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@find(java.lang.String):266:return true; |==> <NO-OP>
8293:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@toString():287:sb.append(super.toString()) |==> <NO-OP>
8294:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@toString():288:sb.append(' ') |==> <NO-OP>
8295:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@toString():289:sb.append(getIndicator1()) |==> <NO-OP>
8296:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@toString():290:sb.append(getIndicator2()) |==> <NO-OP>
8297:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@toString():293:sb.append(sf.toString()) |==> <NO-OP>
8298:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.DataFieldImpl@setId(java.lang.Long):300:this.id = id |==> <NO-OP>
8299:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@<init>(java.lang.String):83:unmarshal(ldr) |==> <NO-OP>
8300:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setRecordLength(int):93:this.recordLength = recordLength |==> <NO-OP>
8301:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setRecordStatus(char):103:this.recordStatus = recordStatus |==> <NO-OP>
8302:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setTypeOfRecord(char):113:this.typeOfRecord = typeOfRecord |==> <NO-OP>
8303:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setImplDefined1(char[]):124:this.implDefined1 = implDefined1 |==> <NO-OP>
8304:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setCharCodingScheme(char):134:this.charCodingScheme = charCodingScheme |==> <NO-OP>
8305:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setIndicatorCount(int):145:this.indicatorCount = indicatorCount |==> <NO-OP>
8306:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setSubfieldCodeLength(int):155:this.subfieldCodeLength = subfieldCodeLength |==> <NO-OP>
8307:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setBaseAddressOfData(int):165:this.baseAddressOfData = baseAddressOfData |==> <NO-OP>
8308:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setImplDefined2(char[]):176:this.implDefined2 = implDefined2 |==> <NO-OP>
8309:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setEntryMap(char[]):186:this.entryMap = entryMap |==> <NO-OP>
8310:COR:isInteger(s):TRUE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):305:isInteger(s) |==> false
8311:COR:isInteger(s):FALSE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):305:isInteger(s) |==> true
8312:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):306:setRecordLength(Integer.parseInt(s)) |==> <NO-OP>
8313:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):308:setRecordLength(0) |==> <NO-OP>
8314:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):310:setRecordStatus(ldr.charAt(5)) |==> <NO-OP>
8315:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):311:setTypeOfRecord(ldr.charAt(6)) |==> <NO-OP>
8316:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):312:setImplDefined1(ldr.substring(7, 9).toCharArray()) |==> <NO-OP>
8317:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):313:setCharCodingScheme(ldr.charAt(9)) |==> <NO-OP>
8318:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):314:s = String.valueOf(ldr.charAt(10)) |==> <NO-OP>
8319:COR:isInteger(s):TRUE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):315:isInteger(s) |==> false
8320:COR:isInteger(s):FALSE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):315:isInteger(s) |==> true
8321:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):316:setIndicatorCount(Integer.parseInt(s)) |==> <NO-OP>
8322:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):318:setIndicatorCount(2) |==> <NO-OP>
8323:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):320:s = String.valueOf(ldr.charAt(11)) |==> <NO-OP>
8324:COR:isInteger(s):TRUE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):321:isInteger(s) |==> false
8325:COR:isInteger(s):FALSE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):321:isInteger(s) |==> true
8326:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):322:setSubfieldCodeLength(Integer.parseInt(s)) |==> <NO-OP>
8327:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):324:setSubfieldCodeLength(2) |==> <NO-OP>
8328:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):326:s = ldr.substring(12, 17) |==> <NO-OP>
8329:COR:isInteger(s):TRUE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):327:isInteger(s) |==> false
8330:COR:isInteger(s):FALSE:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):327:isInteger(s) |==> true
8331:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):328:setBaseAddressOfData(Integer.parseInt(s)) |==> <NO-OP>
8332:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):330:setBaseAddressOfData(0) |==> <NO-OP>
8333:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):332:setImplDefined2(ldr.substring(17, 20).toCharArray()) |==> <NO-OP>
8334:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@unmarshal(java.lang.String):333:setEntryMap(ldr.substring(20, 24).toCharArray()) |==> <NO-OP>
8335:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):370:len == 0 |==> len <= 0
8336:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):370:len == 0 |==> len >= 0
8337:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):370:len == 0 |==> false
8338:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):371:return false; |==> <NO-OP>
8339:STD:<BREAK>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):386:break; |==> <NO-OP>
8340:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):388:return false; |==> <NO-OP>
8341:ROR:<(int,int):!=(int,int):org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):390:++i < len |==> ++i != len
8342:ROR:<(int,int):<=(int,int):org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):390:++i < len |==> ++i <= len
8343:ROR:<(int,int):FALSE(int,int):org.marc4j.marc.impl.LeaderImpl@isInteger(java.lang.String):390:++i < len |==> false
8344:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.LeaderImpl@setId(java.lang.Long):401:this.id = id |==> <NO-OP>
8345:AOR:%(int,int):*(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):106:subfieldCodesAndData.length % 2 |==> subfieldCodesAndData.length * 2
8346:AOR:%(int,int):+(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):106:subfieldCodesAndData.length % 2 |==> subfieldCodesAndData.length + 2
8347:AOR:%(int,int):-(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):106:subfieldCodesAndData.length % 2 |==> subfieldCodesAndData.length - 2
8348:AOR:%(int,int):/(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):106:subfieldCodesAndData.length % 2 |==> subfieldCodesAndData.length / 2
8349:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):106:subfieldCodesAndData.length % 2 == 1 |==> subfieldCodesAndData.length % 2 <= 1
8350:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):106:subfieldCodesAndData.length % 2 == 1 |==> subfieldCodesAndData.length % 2 >= 1
8351:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):106:subfieldCodesAndData.length % 2 == 1 |==> false
8352:ROR:<(int,int):!=(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):110:i < subfieldCodesAndData.length |==> i != subfieldCodesAndData.length
8353:ROR:<(int,int):<=(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):110:i < subfieldCodesAndData.length |==> i <= subfieldCodesAndData.length
8354:ROR:<(int,int):FALSE(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):110:i < subfieldCodesAndData.length |==> false
8355:ROR:!=(int,int):<(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):111:subfieldCodesAndData[i].length() != 1 |==> subfieldCodesAndData[i].length() < 1
8356:ROR:!=(int,int):>(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):111:subfieldCodesAndData[i].length() != 1 |==> subfieldCodesAndData[i].length() > 1
8357:ROR:!=(int,int):TRUE(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):111:subfieldCodesAndData[i].length() != 1 |==> true
8358:AOR:+(int,int):%(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):115:i + 1 |==> i % 1
8359:AOR:+(int,int):*(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):115:i + 1 |==> i * 1
8360:AOR:+(int,int):-(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):115:i + 1 |==> i - 1
8361:AOR:+(int,int):/(int,int):org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):115:i + 1 |==> i / 1
8362:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.MarcFactoryImpl@newDataField(java.lang.String,char,char,java.lang.String[]):116:df.addSubfield(sf) |==> <NO-OP>
8363:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.MarcFactoryImpl@newRecord(org.marc4j.marc.Leader):187:record.setLeader(leader) |==> <NO-OP>
8364:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@<init>():67:controlFields = new ArrayList<ControlField>() |==> <NO-OP>
8365:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@<init>():68:dataFields = new ArrayList<DataField>() |==> <NO-OP>
8366:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@setType(java.lang.String):78:this.type = type |==> <NO-OP>
8367:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@setLeader(org.marc4j.marc.Leader):98:this.leader = leader |==> <NO-OP>
8368:COR:Verifier.isLeaderField(tag):TRUE:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):127:Verifier.isLeaderField(tag) |==> false
8369:COR:Verifier.isLeaderField(tag):FALSE:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):127:Verifier.isLeaderField(tag) |==> true
8370:COR:Verifier.isControlNumberField(tag):TRUE:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):129:Verifier.isControlNumberField(tag) |==> false
8371:COR:Verifier.isControlNumberField(tag):FALSE:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):129:Verifier.isControlNumberField(tag) |==> true
8372:COR:Verifier.hasControlNumberField(controlFields):TRUE:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):130:Verifier.hasControlNumberField(controlFields) |==> false
8373:COR:Verifier.hasControlNumberField(controlFields):FALSE:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):130:Verifier.hasControlNumberField(controlFields) |==> true
8374:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):131:controlFields.set(0, controlField) |==> <NO-OP>
8375:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):133:controlFields.add(0, controlField) |==> <NO-OP>
8376:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):136:controlFields.add(controlField) |==> <NO-OP>
8377:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addVariableField(org.marc4j.marc.VariableField):139:dataFields.add((DataField)field) |==> <NO-OP>
8378:COR:Verifier.isControlField(tag):TRUE:org.marc4j.marc.impl.RecordImpl@removeVariableField(org.marc4j.marc.VariableField):146:Verifier.isControlField(tag) |==> false
8379:COR:Verifier.isControlField(tag):FALSE:org.marc4j.marc.impl.RecordImpl@removeVariableField(org.marc4j.marc.VariableField):146:Verifier.isControlField(tag) |==> true
8380:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@removeVariableField(org.marc4j.marc.VariableField):147:controlFields.remove(field) |==> <NO-OP>
8381:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@removeVariableField(org.marc4j.marc.VariableField):149:dataFields.remove(field) |==> <NO-OP>
8382:COR:Verifier.hasControlNumberField(controlFields):TRUE:org.marc4j.marc.impl.RecordImpl@getControlNumberField():160:Verifier.hasControlNumberField(controlFields) |==> false
8383:COR:Verifier.hasControlNumberField(controlFields):FALSE:org.marc4j.marc.impl.RecordImpl@getControlNumberField():160:Verifier.hasControlNumberField(controlFields) |==> true
8384:COR:fieldMatches(field, tag):TRUE:org.marc4j.marc.impl.RecordImpl@getVariableField(java.lang.String):193:fieldMatches(field, tag) |==> false
8385:COR:fieldMatches(field, tag):FALSE:org.marc4j.marc.impl.RecordImpl@getVariableField(java.lang.String):193:fieldMatches(field, tag) |==> true
8386:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableField(java.lang.String):194:return field; |==> <NO-OP>
8387:COR:field.getTag().equals(tag):TRUE:org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):202:field.getTag().equals(tag) |==> false
8388:COR:field.getTag().equals(tag):FALSE:org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):202:field.getTag().equals(tag) |==> true
8389:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):203:return true; |==> <NO-OP>
8390:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):205:tag.startsWith("LNK") && field.getTag().equals("880") |==> tag.startsWith("LNK") == field.getTag().equals("880")
8391:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):205:tag.startsWith("LNK") && field.getTag().equals("880") |==> false
8392:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):205:tag.startsWith("LNK") && field.getTag().equals("880") |==> tag.startsWith("LNK")
8393:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):205:tag.startsWith("LNK") && field.getTag().equals("880") |==> field.getTag().equals("880")
8394:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):208:link != null |==> true
8395:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):208:link != null && link.getData().equals(tag.substring(3)) |==> link != null == link.getData().equals(tag.substring(3))
8396:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):208:link != null && link.getData().equals(tag.substring(3)) |==> false
8397:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):208:link != null && link.getData().equals(tag.substring(3)) |==> link != null
8398:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):208:link != null && link.getData().equals(tag.substring(3)) |==> link.getData().equals(tag.substring(3))
8399:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@fieldMatches(org.marc4j.marc.VariableField,java.lang.String):209:return true; |==> <NO-OP>
8400:COR:fieldMatches(field, tag):TRUE:org.marc4j.marc.impl.RecordImpl@getVariableFields(java.lang.String):224:fieldMatches(field, tag) |==> false
8401:COR:fieldMatches(field, tag):FALSE:org.marc4j.marc.impl.RecordImpl@getVariableFields(java.lang.String):224:fieldMatches(field, tag) |==> true
8402:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFields(java.lang.String):225:result.add(field) |==> <NO-OP>
8403:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFields():238:fields.addAll(controlFields) |==> <NO-OP>
8404:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFields():239:fields.addAll(dataFields) |==> <NO-OP>
8405:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFieldsWithLeader():253:fields.add(leaderAsField) |==> <NO-OP>
8406:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFieldsWithLeader():254:fields.addAll(controlFields) |==> <NO-OP>
8407:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFieldsWithLeader():255:fields.addAll(dataFields) |==> <NO-OP>
8408:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.RecordImpl@getControlNumber():266:f == null |==> false
8409:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.RecordImpl@getControlNumber():266:f.getData() == null |==> false
8410:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.marc.impl.RecordImpl@getControlNumber():266:f == null || f.getData() == null |==> f == null != (f.getData() == null)
8411:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@getControlNumber():266:f == null || f.getData() == null |==> f == null
8412:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@getControlNumber():266:f == null || f.getData() == null |==> f.getData() == null
8413:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.marc.impl.RecordImpl@getControlNumber():266:f == null || f.getData() == null |==> true
8414:COR:fieldMatches(field, tag):TRUE:org.marc4j.marc.impl.RecordImpl@getVariableFields(java.lang.String[]):283:fieldMatches(field, tag) |==> false
8415:COR:fieldMatches(field, tag):FALSE:org.marc4j.marc.impl.RecordImpl@getVariableFields(java.lang.String[]):283:fieldMatches(field, tag) |==> true
8416:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFields(java.lang.String[]):284:result.add(field) |==> <NO-OP>
8417:STD:<BREAK>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@getVariableFields(java.lang.String[]):285:break; |==> <NO-OP>
8418:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@toString():323:sb.append("LEADER ") |==> <NO-OP>
8419:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@toString():324:sb.append(getLeader().toString()) |==> <NO-OP>
8420:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@toString():325:sb.append('\n') |==> <NO-OP>
8421:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@toString():328:sb.append(field.toString()) |==> <NO-OP>
8422:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@toString():329:sb.append('\n') |==> <NO-OP>
8423:COR:field.find(pattern):TRUE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String):346:field.find(pattern) |==> false
8424:COR:field.find(pattern):FALSE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String):346:field.find(pattern) |==> true
8425:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@find(java.lang.String):347:result.add(field) |==> <NO-OP>
8426:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@find(java.lang.String):351:i = dataFields.iterator() |==> <NO-OP>
8427:COR:field.find(pattern):TRUE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String):356:field.find(pattern) |==> false
8428:COR:field.find(pattern):FALSE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String):356:field.find(pattern) |==> true
8429:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@find(java.lang.String):357:result.add(field) |==> <NO-OP>
8430:COR:field.find(pattern):TRUE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String,java.lang.String):372:field.find(pattern) |==> false
8431:COR:field.find(pattern):FALSE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String,java.lang.String):372:field.find(pattern) |==> true
8432:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@find(java.lang.String,java.lang.String):373:result.add(field) |==> <NO-OP>
8433:COR:field.find(pattern):TRUE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String[],java.lang.String):388:field.find(pattern) |==> false
8434:COR:field.find(pattern):FALSE:org.marc4j.marc.impl.RecordImpl@find(java.lang.String[],java.lang.String):388:field.find(pattern) |==> true
8435:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@find(java.lang.String[],java.lang.String):389:result.add(field) |==> <NO-OP>
8436:COR:field.find(pattern):TRUE:org.marc4j.marc.impl.RecordImpl@hasMatch(java.lang.String[],java.lang.String):398:field.find(pattern) |==> false
8437:COR:field.find(pattern):FALSE:org.marc4j.marc.impl.RecordImpl@hasMatch(java.lang.String[],java.lang.String):398:field.find(pattern) |==> true
8438:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@hasMatch(java.lang.String[],java.lang.String):399:return true; |==> <NO-OP>
8439:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@setId(java.lang.Long):412:this.id = id |==> <NO-OP>
8440:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.RecordImpl@addError(java.lang.String,java.lang.String,int,java.lang.String):438:errors == null |==> false
8441:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addError(java.lang.String,java.lang.String,int,java.lang.String):439:errors = new LinkedList<MarcError>() |==> <NO-OP>
8442:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addError(java.lang.String,java.lang.String,int,java.lang.String):441:errors.add(new MarcError(field, subfield, severity, message)) |==> <NO-OP>
8443:ROR:>(int,int):!=(int,int):org.marc4j.marc.impl.RecordImpl@addError(java.lang.String,java.lang.String,int,java.lang.String):442:severity > maxSeverity |==> severity != maxSeverity
8444:ROR:>(int,int):>=(int,int):org.marc4j.marc.impl.RecordImpl@addError(java.lang.String,java.lang.String,int,java.lang.String):442:severity > maxSeverity |==> severity >= maxSeverity
8445:ROR:>(int,int):FALSE(int,int):org.marc4j.marc.impl.RecordImpl@addError(java.lang.String,java.lang.String,int,java.lang.String):442:severity > maxSeverity |==> false
8446:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addError(java.lang.String,java.lang.String,int,java.lang.String):443:maxSeverity = severity |==> <NO-OP>
8447:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors == null |==> false
8448:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors.size() == 0 |==> newErrors.size() <= 0
8449:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors.size() == 0 |==> newErrors.size() >= 0
8450:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors.size() == 0 |==> false
8451:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors == null || newErrors.size() == 0 |==> newErrors == null != (newErrors.size() == 0)
8452:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors == null || newErrors.size() == 0 |==> newErrors == null
8453:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors == null || newErrors.size() == 0 |==> newErrors.size() == 0
8454:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):454:newErrors == null || newErrors.size() == 0 |==> true
8455:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):455:return; |==> <NO-OP>
8456:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):457:errors == null |==> false
8457:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):458:errors = new LinkedList<MarcError>() |==> <NO-OP>
8458:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):461:errors.add(err) |==> <NO-OP>
8459:ROR:>(int,int):!=(int,int):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):462:err.severity > maxSeverity |==> err.severity != maxSeverity
8460:ROR:>(int,int):>=(int,int):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):462:err.severity > maxSeverity |==> err.severity >= maxSeverity
8461:ROR:>(int,int):FALSE(int,int):org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):462:err.severity > maxSeverity |==> false
8462:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.RecordImpl@addErrors(java.util.List<org.marc4j.MarcError>):463:maxSeverity = err.severity |==> <NO-OP>
8463:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors != null |==> true
8464:ROR:>(int,int):!=(int,int):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors.size() > 0 |==> errors.size() != 0
8465:ROR:>(int,int):>=(int,int):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors.size() > 0 |==> errors.size() >= 0
8466:ROR:>(int,int):FALSE(int,int):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors.size() > 0 |==> false
8467:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors != null && errors.size() > 0 |==> errors != null == errors.size() > 0
8468:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors != null && errors.size() > 0 |==> false
8469:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors != null && errors.size() > 0 |==> errors != null
8470:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.RecordImpl@hasErrors():470:errors != null && errors.size() > 0 |==> errors.size() > 0
8471:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedMarcFactoryImpl@newRecord(org.marc4j.marc.Leader):19:record.setLeader(leader) |==> <NO-OP>
8472:COR:Verifier.isControlNumberField(tag):TRUE:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):34:Verifier.isControlNumberField(tag) |==> false
8473:COR:Verifier.isControlNumberField(tag):FALSE:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):34:Verifier.isControlNumberField(tag) |==> true
8474:COR:Verifier.hasControlNumberField(getControlFields()):TRUE:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):35:Verifier.hasControlNumberField(getControlFields()) |==> false
8475:COR:Verifier.hasControlNumberField(getControlFields()):FALSE:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):35:Verifier.hasControlNumberField(getControlFields()) |==> true
8476:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):36:getControlFields().set(0, controlField) |==> <NO-OP>
8477:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):38:getControlFields().add(0, controlField) |==> <NO-OP>
8478:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):41:Collections.sort(controlFields) |==> <NO-OP>
8479:COR:Verifier.isControlField(tag):TRUE:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):42:Verifier.isControlField(tag) |==> false
8480:COR:Verifier.isControlField(tag):FALSE:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):42:Verifier.isControlField(tag) |==> true
8481:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):43:getControlFields().add(controlField) |==> <NO-OP>
8482:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):44:Collections.sort(controlFields) |==> <NO-OP>
8483:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):47:getDataFields().add((DataField)field) |==> <NO-OP>
8484:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SortedRecordImpl@addVariableField(org.marc4j.marc.VariableField):48:Collections.sort(dataFields) |==> <NO-OP>
8485:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SubfieldImpl@<init>(char):58:this.setCode(code) |==> <NO-OP>
8486:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SubfieldImpl@<init>(char,java.lang.String):69:this.setCode(code) |==> <NO-OP>
8487:STD:<CALL>:<NO-OP>:org.marc4j.marc.impl.SubfieldImpl@<init>(char,java.lang.String):70:this.setData(data) |==> <NO-OP>
8488:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.SubfieldImpl@setCode(char):78:this.code = code |==> <NO-OP>
8489:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.SubfieldImpl@setData(java.lang.String):94:this.data = data |==> <NO-OP>
8490:STD:<ASSIGN>:<NO-OP>:org.marc4j.marc.impl.SubfieldImpl@setId(java.lang.Long):138:this.id = id |==> <NO-OP>
8491:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 |==> tag.length() <= 3
8492:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 |==> tag.length() >= 3
8493:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 |==> false
8494:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(0) == '0' |==> tag.charAt(0) <= '0'
8495:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(0) == '0' |==> tag.charAt(0) >= '0'
8496:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(0) == '0' |==> false
8497:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' |==> tag.length() == 3 == (tag.charAt(0) == '0')
8498:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' |==> false
8499:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' |==> tag.length() == 3
8500:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' |==> tag.charAt(0) == '0'
8501:ROR:==(int,int):<=(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(1) == '0' |==> tag.charAt(1) <= '0'
8502:ROR:==(int,int):>=(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(1) == '0' |==> tag.charAt(1) >= '0'
8503:ROR:==(int,int):FALSE(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(1) == '0' |==> false
8504:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' |==> (tag.length() == 3 && tag.charAt(0) == '0') == (tag.charAt(1) == '0')
8505:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' |==> false
8506:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' |==> tag.length() == 3 && tag.charAt(0) == '0'
8507:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' |==> tag.charAt(1) == '0'
8508:ROR:>=(int,int):==(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(2) >= '0' |==> tag.charAt(2) == '0'
8509:ROR:>=(int,int):>(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(2) >= '0' |==> tag.charAt(2) > '0'
8510:ROR:>=(int,int):TRUE(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(2) >= '0' |==> true
8511:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' |==> (tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0') == tag.charAt(2) >= '0'
8512:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' |==> false
8513:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' |==> tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0'
8514:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' |==> tag.charAt(2) >= '0'
8515:ROR:<=(int,int):<(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(2) <= '9' |==> tag.charAt(2) < '9'
8516:ROR:<=(int,int):==(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(2) <= '9' |==> tag.charAt(2) == '9'
8517:ROR:<=(int,int):TRUE(int,int):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.charAt(2) <= '9' |==> true
8518:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' && tag.charAt(2) <= '9' |==> (tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0') == tag.charAt(2) <= '9'
8519:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' && tag.charAt(2) <= '9' |==> false
8520:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' && tag.charAt(2) <= '9' |==> tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0'
8521:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):44:tag.length() == 3 && tag.charAt(0) == '0' && tag.charAt(1) == '0' && tag.charAt(2) >= '0' && tag.charAt(2) <= '9' |==> tag.charAt(2) <= '9'
8522:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.Verifier@isControlField(java.lang.String):46:return true; |==> <NO-OP>
8523:COR:isControlNumberField(tag):TRUE:org.marc4j.marc.impl.Verifier@hasControlNumberField(java.util.Collection<org.marc4j.marc.ControlField>):82:isControlNumberField(tag) |==> false
8524:COR:isControlNumberField(tag):FALSE:org.marc4j.marc.impl.Verifier@hasControlNumberField(java.util.Collection<org.marc4j.marc.ControlField>):82:isControlNumberField(tag) |==> true
8525:STD:<RETURN>:<NO-OP>:org.marc4j.marc.impl.Verifier@hasControlNumberField(java.util.Collection<org.marc4j.marc.ControlField>):82:return true; |==> <NO-OP>
8526:STD:<CALL>:<NO-OP>:org.marc4j.samples.AddLocationExample@main(java.lang.String[]):49:field.addSubfield(factory.newSubfield('3', "Contributor biographical information")) |==> <NO-OP>
8527:STD:<CALL>:<NO-OP>:org.marc4j.samples.AddLocationExample@main(java.lang.String[]):51:field.addSubfield(factory.newSubfield('u', "http://en.wikipedia.org/wiki/Michael_Chabon")) |==> <NO-OP>
8528:STD:<CALL>:<NO-OP>:org.marc4j.samples.AddLocationExample@main(java.lang.String[]):53:record.addVariableField(field) |==> <NO-OP>
8529:STD:<CALL>:<NO-OP>:org.marc4j.samples.AddLocationExample@main(java.lang.String[]):55:System.out.println(record.toString()) |==> <NO-OP>
8530:ROR:>(int,int):!=(int,int):org.marc4j.samples.CheckAgencyExample@main(java.lang.String[]):48:result.size() > 0 |==> result.size() != 0
8531:ROR:>(int,int):>=(int,int):org.marc4j.samples.CheckAgencyExample@main(java.lang.String[]):48:result.size() > 0 |==> result.size() >= 0
8532:ROR:>(int,int):FALSE(int,int):org.marc4j.samples.CheckAgencyExample@main(java.lang.String[]):48:result.size() > 0 |==> false
8533:STD:<CALL>:<NO-OP>:org.marc4j.samples.CheckAgencyExample@main(java.lang.String[]):49:System.out.println("Agency for this record is DLC") |==> <NO-OP>
8534:COR:agency.matches("DLC"):TRUE:org.marc4j.samples.CheckAgencyExample@main(java.lang.String[]):55:agency.matches("DLC") |==> false
8535:COR:agency.matches("DLC"):FALSE:org.marc4j.samples.CheckAgencyExample@main(java.lang.String[]):55:agency.matches("DLC") |==> true
8536:STD:<CALL>:<NO-OP>:org.marc4j.samples.CheckAgencyExample@main(java.lang.String[]):56:System.out.println("DLC is the original agency") |==> <NO-OP>
8537:STD:<CALL>:<NO-OP>:org.marc4j.samples.ControlFieldExample@main(java.lang.String[]):54:System.out.println("Language code (008 35-37): " + lang) |==> <NO-OP>
8538:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):50:System.out.println(dataField.toString() + '\n') |==> <NO-OP>
8539:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):56:dataField = (DataField)i.next() |==> <NO-OP>
8540:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):57:System.out.println(dataField.toString()) |==> <NO-OP>
8541:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):59:System.out.print('\n') |==> <NO-OP>
8542:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):63:dataFields = record.getVariableFields(tags) |==> <NO-OP>
8543:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):64:i = dataFields.iterator() |==> <NO-OP>
8544:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):66:dataField = (DataField)i.next() |==> <NO-OP>
8545:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):67:System.out.println(dataField.toString()) |==> <NO-OP>
8546:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):69:System.out.print('\n') |==> <NO-OP>
8547:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):72:dataField = (DataField)record.getVariableField("245") |==> <NO-OP>
8548:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):77:System.out.println("Tag: " + tag + " Indicator 1: " + ind1 + " Indicator 2: " + ind2) |==> <NO-OP>
8549:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):81:i = subfields.iterator() |==> <NO-OP>
8550:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):88:System.out.println("Subfield code: " + code + " Data element: " + data) |==> <NO-OP>
8551:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):91:System.out.print('\n') |==> <NO-OP>
8552:STD:<CALL>:<NO-OP>:org.marc4j.samples.DataFieldExample@main(java.lang.String[]):95:System.out.println("Title proper: " + subfield.getData()) |==> <NO-OP>
8553:STD:<CALL>:<NO-OP>:org.marc4j.samples.HandleExceptionExample@main(java.lang.String[]):45:System.out.println(record.toString()) |==> <NO-OP>
8554:STD:<CALL>:<NO-OP>:org.marc4j.samples.HandleExceptionExample@main(java.lang.String[]):48:System.out.println("something went wrong man!") |==> <NO-OP>
8555:STD:<CALL>:<NO-OP>:org.marc4j.samples.HandleExceptionExample@main(java.lang.String[]):52:System.out.println("damn!") |==> <NO-OP>
8556:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2DomExample@main(java.lang.String[]):49:writer.setConverter(new AnselToUnicode()) |==> <NO-OP>
8557:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2DomExample@main(java.lang.String[]):52:writer.write(record) |==> <NO-OP>
8558:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2DomExample@main(java.lang.String[]):54:writer.close() |==> <NO-OP>
8559:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2DomExample@main(java.lang.String[]):57:System.out.println(doc.getDocumentElement().getLocalName()) |==> <NO-OP>
8560:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2MarcXmlExample@main(java.lang.String[]):47:writer.setConverter(converter) |==> <NO-OP>
8561:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2MarcXmlExample@main(java.lang.String[]):51:writer.write(record) |==> <NO-OP>
8562:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2MarcXmlExample@main(java.lang.String[]):53:writer.close() |==> <NO-OP>
8563:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2ModsExample@main(java.lang.String[]):54:writer.setConverter(new AnselToUnicode()) |==> <NO-OP>
8564:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2ModsExample@main(java.lang.String[]):57:writer.write(record) |==> <NO-OP>
8565:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2ModsExample@main(java.lang.String[]):59:writer.close() |==> <NO-OP>
8566:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2ModsInDomExample@main(java.lang.String[]):54:writer.setConverter(new AnselToUnicode()) |==> <NO-OP>
8567:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2ModsInDomExample@main(java.lang.String[]):57:writer.write(record) |==> <NO-OP>
8568:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2ModsInDomExample@main(java.lang.String[]):59:writer.close() |==> <NO-OP>
8569:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc2ModsInDomExample@main(java.lang.String[]):63:System.out.println(doc.getDocumentElement().getLocalName()) |==> <NO-OP>
8570:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc8ToMarcXmlExample@main(java.lang.String[]):51:writer.setConverter(converter) |==> <NO-OP>
8571:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc8ToMarcXmlExample@main(java.lang.String[]):55:writer.write(record) |==> <NO-OP>
8572:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc8ToMarcXmlExample@main(java.lang.String[]):57:writer.close() |==> <NO-OP>
8573:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc8ToUnicodeExample@main(java.lang.String[]):47:writer.setConverter(converter) |==> <NO-OP>
8574:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc8ToUnicodeExample@main(java.lang.String[]):51:writer.write(record) |==> <NO-OP>
8575:STD:<CALL>:<NO-OP>:org.marc4j.samples.Marc8ToUnicodeExample@main(java.lang.String[]):53:writer.close() |==> <NO-OP>
8576:STD:<CALL>:<NO-OP>:org.marc4j.samples.ModsToMarc21lExample@main(java.lang.String[]):45:System.out.println(record.toString()) |==> <NO-OP>
8577:STD:<CALL>:<NO-OP>:org.marc4j.samples.NonSortExample@main(java.lang.String[]):55:System.out.println("Title proper: " + title) |==> <NO-OP>
8578:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.NonSortExample@main(java.lang.String[]):59:title = title.substring(nonSort) |==> <NO-OP>
8579:STD:<CALL>:<NO-OP>:org.marc4j.samples.NonSortExample@main(java.lang.String[]):60:System.out.println("Title non-sort (" + nonSort + "): " + title + '\n') |==> <NO-OP>
8580:COR:args[0].equals("-v"):TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):71:args[0].equals("-v") |==> false
8581:COR:args[0].equals("-v"):FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):71:args[0].equals("-v") |==> true
8582:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):73:verbose = true |==> <NO-OP>
8583:AOR:-(int,int):%(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):74:args.length - 1 |==> args.length % 1
8584:AOR:-(int,int):*(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):74:args.length - 1 |==> args.length * 1
8585:AOR:-(int,int):+(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):74:args.length - 1 |==> args.length + 1
8586:AOR:-(int,int):/(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):74:args.length - 1 |==> args.length / 1
8587:AOR:-(int,int):%(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):75:args.length - 1 |==> args.length % 1
8588:AOR:-(int,int):*(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):75:args.length - 1 |==> args.length * 1
8589:AOR:-(int,int):+(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):75:args.length - 1 |==> args.length + 1
8590:AOR:-(int,int):/(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):75:args.length - 1 |==> args.length / 1
8591:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):75:System.arraycopy(args, 1, newArgs, 0, args.length - 1) |==> <NO-OP>
8592:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):76:args = newArgs |==> <NO-OP>
8593:COR:args[0].equals("-vv"):TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):78:args[0].equals("-vv") |==> false
8594:COR:args[0].equals("-vv"):FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):78:args[0].equals("-vv") |==> true
8595:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):80:verbose = true |==> <NO-OP>
8596:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):81:veryverbose = true |==> <NO-OP>
8597:AOR:-(int,int):%(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):82:args.length - 1 |==> args.length % 1
8598:AOR:-(int,int):*(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):82:args.length - 1 |==> args.length * 1
8599:AOR:-(int,int):+(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):82:args.length - 1 |==> args.length + 1
8600:AOR:-(int,int):/(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):82:args.length - 1 |==> args.length / 1
8601:AOR:-(int,int):%(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):83:args.length - 1 |==> args.length % 1
8602:AOR:-(int,int):*(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):83:args.length - 1 |==> args.length * 1
8603:AOR:-(int,int):+(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):83:args.length - 1 |==> args.length + 1
8604:AOR:-(int,int):/(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):83:args.length - 1 |==> args.length / 1
8605:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):83:System.arraycopy(args, 1, newArgs, 0, args.length - 1) |==> <NO-OP>
8606:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):84:args = newArgs |==> <NO-OP>
8607:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):100:readerNormal = new MarcPermissiveStreamReader(inNorm, false, to_utf_8) |==> <NO-OP>
8608:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):102:readerPermissive = new MarcPermissiveStreamReader(inPerm, true, to_utf_8, "BESTGUESS") |==> <NO-OP>
8609:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):107:e.printStackTrace() |==> <NO-OP>
8610:ROR:>(int,int):!=(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):109:args.length > 1 |==> args.length != 1
8611:ROR:>(int,int):>=(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):109:args.length > 1 |==> args.length >= 1
8612:ROR:>(int,int):FALSE(int,int):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):109:args.length > 1 |==> false
8613:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):114:patchedRecs = new MarcStreamWriter(patchedRecStream) |==> <NO-OP>
8614:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):119:e.printStackTrace() |==> <NO-OP>
8615:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):122:readerNormal.hasNext() && readerPermissive.hasNext() |==> readerNormal.hasNext() == readerPermissive.hasNext()
8616:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):122:readerNormal.hasNext() && readerPermissive.hasNext() |==> false
8617:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):122:readerNormal.hasNext() && readerPermissive.hasNext() |==> readerNormal.hasNext()
8618:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):122:readerNormal.hasNext() && readerPermissive.hasNext() |==> readerPermissive.hasNext()
8619:COR:verbose:TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):133:verbose |==> false
8620:COR:verbose:FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):133:verbose |==> true
8621:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):135:out.println("Fatal Exception: " + me.getMessage()) |==> <NO-OP>
8622:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):136:dumpErrors(out, recPerm.getErrors()) |==> <NO-OP>
8623:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):137:showDiffs(out, null, strPerm) |==> <NO-OP>
8624:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):138:out.println("-------------------------------------------------------------------------------------") |==> <NO-OP>
8625:COR:strNorm.equals(strPerm):TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):143:strNorm.equals(strPerm) |==> false
8626:COR:strNorm.equals(strPerm):FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):143:strNorm.equals(strPerm) |==> true
8627:COR:verbose:TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):145:verbose |==> false
8628:COR:verbose:FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):145:verbose |==> true
8629:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):147:dumpErrors(out, recPerm.getErrors()) |==> <NO-OP>
8630:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):148:showDiffs(out, strNorm, strPerm) |==> <NO-OP>
8631:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):149:out.println("-------------------------------------------------------------------------------------") |==> <NO-OP>
8632:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):152:patchedRecs != null |==> true
8633:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):154:patchedRecs.write(recPerm) |==> <NO-OP>
8634:COR:recPerm.hasErrors():TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):157:recPerm.hasErrors() |==> false
8635:COR:recPerm.hasErrors():FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):157:recPerm.hasErrors() |==> true
8636:COR:verbose:TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):159:verbose |==> false
8637:COR:verbose:FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):159:verbose |==> true
8638:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):161:out.println("Results identical, but errors reported") |==> <NO-OP>
8639:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):162:dumpErrors(out, recPerm.getErrors()) |==> <NO-OP>
8640:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):163:showDiffs(out, strNorm, strPerm) |==> <NO-OP>
8641:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):164:out.println("-------------------------------------------------------------------------------------") |==> <NO-OP>
8642:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):166:patchedRecs != null |==> true
8643:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):168:patchedRecs.write(recPerm) |==> <NO-OP>
8644:COR:veryverbose:TRUE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):171:veryverbose |==> false
8645:COR:veryverbose:FALSE:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):171:veryverbose |==> true
8646:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@main(java.lang.String[]):173:showDiffs(out, strNorm, strPerm) |==> <NO-OP>
8647:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):181:strNorm != null |==> true
8648:ROR:==(int,int):<=(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):185:normLines.length == permLines.length |==> normLines.length <= permLines.length
8649:ROR:==(int,int):>=(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):185:normLines.length == permLines.length |==> normLines.length >= permLines.length
8650:ROR:==(int,int):FALSE(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):185:normLines.length == permLines.length |==> false
8651:ROR:<(int,int):!=(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):187:i < normLines.length |==> i != normLines.length
8652:ROR:<(int,int):<=(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):187:i < normLines.length |==> i <= normLines.length
8653:ROR:<(int,int):FALSE(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):187:i < normLines.length |==> false
8654:COR:normLines[i].equals(permLines[i]):TRUE:org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):189:normLines[i].equals(permLines[i]) |==> false
8655:COR:normLines[i].equals(permLines[i]):FALSE:org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):189:normLines[i].equals(permLines[i]) |==> true
8656:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):191:out.println("   " + normLines[i]) |==> <NO-OP>
8657:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):195:out.println(" < " + normLines[i]) |==> <NO-OP>
8658:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):196:out.println(" > " + permLines[i]) |==> <NO-OP>
8659:ROR:<(int,int):!=(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):204:i < permLines.length |==> i != permLines.length
8660:ROR:<(int,int):<=(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):204:i < permLines.length |==> i <= permLines.length
8661:ROR:<(int,int):FALSE(int,int):org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):204:i < permLines.length |==> false
8662:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@showDiffs(java.io.PrintStream,java.lang.String,java.lang.String):206:out.println("   " + permLines[i]) |==> <NO-OP>
8663:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.samples.PermissiveReaderExample@dumpErrors(java.io.PrintStream,java.util.List<org.marc4j.MarcError>):215:errors != null |==> true
8664:STD:<CALL>:<NO-OP>:org.marc4j.samples.PermissiveReaderExample@dumpErrors(java.io.PrintStream,java.util.List<org.marc4j.MarcError>):221:out.println(error.toString()) |==> <NO-OP>
8665:STD:<CALL>:<NO-OP>:org.marc4j.samples.PersonalNamesExample@main(java.lang.String[]):42:System.out.println(record.toString()) |==> <NO-OP>
8666:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PersonalNamesReader@<init>(java.io.InputStream):24:factory = MarcFactory.newInstance() |==> <NO-OP>
8667:STD:<ASSIGN>:<NO-OP>:org.marc4j.samples.PersonalNamesReader@<init>(java.io.InputStream):25:br = new BufferedReader(new InputStreamReader(in)) |==> <NO-OP>
8668:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.samples.PersonalNamesReader@hasNext():30:(line = br.readLine()) != null |==> true
8669:ROR:!=(int,int):<(int,int):org.marc4j.samples.PersonalNamesReader@next():42:tokens.length != 3 |==> tokens.length < 3
8670:ROR:!=(int,int):>(int,int):org.marc4j.samples.PersonalNamesReader@next():42:tokens.length != 3 |==> tokens.length > 3
8671:ROR:!=(int,int):TRUE(int,int):org.marc4j.samples.PersonalNamesReader@next():42:tokens.length != 3 |==> true
8672:STD:<CALL>:<NO-OP>:org.marc4j.samples.PersonalNamesReader@next():48:record.addVariableField(cf) |==> <NO-OP>
8673:STD:<CALL>:<NO-OP>:org.marc4j.samples.PersonalNamesReader@next():51:df.addSubfield(factory.newSubfield('a', tokens[1])) |==> <NO-OP>
8674:STD:<CALL>:<NO-OP>:org.marc4j.samples.PersonalNamesReader@next():52:df.addSubfield(factory.newSubfield('d', tokens[2])) |==> <NO-OP>
8675:STD:<CALL>:<NO-OP>:org.marc4j.samples.PersonalNamesReader@next():53:record.addVariableField(df) |==> <NO-OP>
8676:STD:<CALL>:<NO-OP>:org.marc4j.samples.ReadFromInputSourceExample@main(java.lang.String[]):42:System.out.println(record.toString()) |==> <NO-OP>
8677:STD:<CALL>:<NO-OP>:org.marc4j.samples.ReadMarcExample@main(java.lang.String[]):43:System.out.println(record.toString()) |==> <NO-OP>
8678:STD:<CALL>:<NO-OP>:org.marc4j.samples.ReadMarcFromURLExample@main(java.lang.String[]):43:System.out.println(record.toString()) |==> <NO-OP>
8679:STD:<CALL>:<NO-OP>:org.marc4j.samples.ReadMarcXmlExample@main(java.lang.String[]):43:System.out.println(record.toString()) |==> <NO-OP>
8680:STD:<CALL>:<NO-OP>:org.marc4j.samples.ReadSingleRecordExample@main(java.lang.String[]):42:System.out.println(record.toString()) |==> <NO-OP>
8681:STD:<CALL>:<NO-OP>:org.marc4j.samples.RemoveLocalFieldsExample@main(java.lang.String[]):48:System.out.println(record.toString()) |==> <NO-OP>
8682:COR:matcher.matches():TRUE:org.marc4j.samples.RemoveLocalFieldsExample@main(java.lang.String[]):58:matcher.matches() |==> false
8683:COR:matcher.matches():FALSE:org.marc4j.samples.RemoveLocalFieldsExample@main(java.lang.String[]):58:matcher.matches() |==> true
8684:STD:<CALL>:<NO-OP>:org.marc4j.samples.RemoveLocalFieldsExample@main(java.lang.String[]):59:i.remove() |==> <NO-OP>
8685:STD:<CALL>:<NO-OP>:org.marc4j.samples.RemoveLocalFieldsExample@main(java.lang.String[]):61:System.out.println(record.toString()) |==> <NO-OP>
8686:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):33:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> tFactory.getFeature(SAXSource.FEATURE) == tFactory.getFeature(SAXResult.FEATURE)
8687:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):34:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> false
8688:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):33:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> tFactory.getFeature(SAXSource.FEATURE)
8689:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):34:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> tFactory.getFeature(SAXResult.FEATURE)
8690:STD:<CALL>:<NO-OP>:org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):51:tHandler1.setResult(new SAXResult(tHandler2)) |==> <NO-OP>
8691:STD:<CALL>:<NO-OP>:org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):52:tHandler2.setResult(new SAXResult(tHandler3)) |==> <NO-OP>
8692:STD:<CALL>:<NO-OP>:org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):55:tHandler3.setResult(new StreamResult(out)) |==> <NO-OP>
8693:STD:<CALL>:<NO-OP>:org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):69:writer.write(record) |==> <NO-OP>
8694:STD:<CALL>:<NO-OP>:org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):71:writer.close() |==> <NO-OP>
8695:STD:<CALL>:<NO-OP>:org.marc4j.samples.StylesheetChainExample@main(java.lang.String[]):73:out.close() |==> <NO-OP>
8696:STD:<INC>:<NO-OP>:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):33:counter++ |==> <NO-OP>
8697:COR:table.containsKey(tag):TRUE:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):42:table.containsKey(tag) |==> false
8698:COR:table.containsKey(tag):FALSE:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):42:table.containsKey(tag) |==> true
8699:AOR:+(int,int):%(int,int):org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):44:counts.intValue() + 1 |==> counts.intValue() % 1
8700:AOR:+(int,int):*(int,int):org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):44:counts.intValue() + 1 |==> counts.intValue() * 1
8701:AOR:+(int,int):-(int,int):org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):44:counts.intValue() + 1 |==> counts.intValue() - 1
8702:AOR:+(int,int):/(int,int):org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):44:counts.intValue() + 1 |==> counts.intValue() / 1
8703:STD:<CALL>:<NO-OP>:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):44:table.put(tag, new Integer(counts.intValue() + 1)) |==> <NO-OP>
8704:STD:<CALL>:<NO-OP>:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):46:table.put(tag, new Integer(1)) |==> <NO-OP>
8705:STD:<CALL>:<NO-OP>:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):52:System.out.println("Analyzed " + counter + " records") |==> <NO-OP>
8706:STD:<CALL>:<NO-OP>:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):53:System.out.println("Tag\tCount") |==> <NO-OP>
8707:STD:<CALL>:<NO-OP>:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):56:Collections.sort(list) |==> <NO-OP>
8708:STD:<CALL>:<NO-OP>:org.marc4j.samples.TagAnalysisExample@main(java.lang.String[]):61:System.out.println(tag + "\t" + value) |==> <NO-OP>
8709:ROR:!=(int,int):<(int,int):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):29:args.length != 1 |==> args.length < 1
8710:ROR:!=(int,int):>(int,int):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):29:args.length != 1 |==> args.length > 1
8711:ROR:!=(int,int):TRUE(int,int):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):29:args.length != 1 |==> true
8712:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):36:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> tFactory.getFeature(SAXSource.FEATURE) == tFactory.getFeature(SAXResult.FEATURE)
8713:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):37:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> false
8714:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):36:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> tFactory.getFeature(SAXSource.FEATURE)
8715:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):37:tFactory.getFeature(SAXSource.FEATURE) && tFactory.getFeature(SAXResult.FEATURE) |==> tFactory.getFeature(SAXResult.FEATURE)
8716:ROR:<(int,int):!=(int,int):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):58:i < files.length |==> i != files.length
8717:ROR:<(int,int):<=(int,int):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):58:i < files.length |==> i <= files.length
8718:ROR:<(int,int):FALSE(int,int):org.marc4j.samples.TemplatesExample@main(java.lang.String[]):58:i < files.length |==> false
8719:STD:<CALL>:<NO-OP>:org.marc4j.samples.TemplatesExample@main(java.lang.String[]):68:System.out.println(record.toString()) |==> <NO-OP>
8720:STD:<CALL>:<NO-OP>:org.marc4j.samples.WriteMarcExample@main(java.lang.String[]):46:writer.write(record) |==> <NO-OP>
8721:STD:<CALL>:<NO-OP>:org.marc4j.samples.WriteMarcExample@main(java.lang.String[]):48:writer.close() |==> <NO-OP>
8722:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@<init>(int):44:maximumValue = Long.parseLong(maxString.substring(0, numberDigits)) |==> <NO-OP>
8723:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@<init>(int):45:overflowRepresentation = REP_ALL_NINES |==> <NO-OP>
8724:STD:<CALL>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@<init>(int):47:this.setMaximumIntegerDigits(numberDigits) |==> <NO-OP>
8725:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@<init>(int,int):60:maximumValue = Long.parseLong(maxString.substring(0, numberDigits)) |==> <NO-OP>
8726:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@<init>(int,int):61:overflowRepresentation = overflowType |==> <NO-OP>
8727:STD:<CALL>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@<init>(int,int):63:this.setMaximumIntegerDigits(5) |==> <NO-OP>
8728:ROR:>(double,double):!=(double,double):org.marc4j.util.CustomDecimalFormat@format(double,java.lang.StringBuffer,java.text.FieldPosition):68:number > maximumValue |==> number != maximumValue
8729:ROR:>(double,double):>=(double,double):org.marc4j.util.CustomDecimalFormat@format(double,java.lang.StringBuffer,java.text.FieldPosition):68:number > maximumValue |==> number >= maximumValue
8730:ROR:>(double,double):FALSE(double,double):org.marc4j.util.CustomDecimalFormat@format(double,java.lang.StringBuffer,java.text.FieldPosition):68:number > maximumValue |==> false
8731:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@format(double,java.lang.StringBuffer,java.text.FieldPosition):69:number = getOverflowRepresentation((long)number) |==> <NO-OP>
8732:ROR:>(long,long):!=(long,long):org.marc4j.util.CustomDecimalFormat@format(long,java.lang.StringBuffer,java.text.FieldPosition):77:number > maximumValue |==> number != maximumValue
8733:ROR:>(long,long):>=(long,long):org.marc4j.util.CustomDecimalFormat@format(long,java.lang.StringBuffer,java.text.FieldPosition):77:number > maximumValue |==> number >= maximumValue
8734:ROR:>(long,long):FALSE(long,long):org.marc4j.util.CustomDecimalFormat@format(long,java.lang.StringBuffer,java.text.FieldPosition):77:number > maximumValue |==> false
8735:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@format(long,java.lang.StringBuffer,java.text.FieldPosition):78:number = getOverflowRepresentation(number) |==> <NO-OP>
8736:STD:<RETURN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):86:return (0); |==> <NO-OP>
8737:STD:<RETURN>:<NO-OP>:org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):89:return (maximumValue); |==> <NO-OP>
8738:AOR:+(long,long):%(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:maximumValue + 1 |==> maximumValue % 1
8739:AOR:+(long,long):*(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:maximumValue + 1 |==> maximumValue * 1
8740:AOR:+(long,long):-(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:maximumValue + 1 |==> maximumValue - 1
8741:AOR:+(long,long):/(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:maximumValue + 1 |==> maximumValue / 1
8742:AOR:%(long,long):*(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:number % (maximumValue + 1) |==> number * (maximumValue + 1)
8743:AOR:%(long,long):+(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:number % (maximumValue + 1) |==> number + (maximumValue + 1)
8744:AOR:%(long,long):-(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:number % (maximumValue + 1) |==> number - (maximumValue + 1)
8745:AOR:%(long,long):/(long,long):org.marc4j.util.CustomDecimalFormat@getOverflowRepresentation(long):91:number % (maximumValue + 1) |==> number / (maximumValue + 1)
8746:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileInputStream(java.lang.String):15:in = url.openStream() |==> <NO-OP>
8747:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() |==> file.isAbsolute() == file.exists()
8748:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() |==> false
8749:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() |==> file.isAbsolute()
8750:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() |==> file.exists()
8751:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() |==> (file.isAbsolute() && file.exists()) == file.isFile()
8752:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() |==> false
8753:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() |==> file.isAbsolute() && file.exists()
8754:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() |==> file.isFile()
8755:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() && file.canRead() |==> (file.isAbsolute() && file.exists() && file.isFile()) == file.canRead()
8756:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() && file.canRead() |==> false
8757:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() && file.canRead() |==> file.isAbsolute() && file.exists() && file.isFile()
8758:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):35:file.isAbsolute() && file.exists() && file.isFile() && file.canRead() |==> file.canRead()
8759:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):36:numFound = 1 |==> <NO-OP>
8760:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):37:fileToReturn = file |==> <NO-OP>
8761:STD:<CALL>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):41:e.printStackTrace() |==> <NO-OP>
8762:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths != null |==> true
8763:ROR:!=(int,int):<(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths.length != 0 |==> directoryPaths.length < 0
8764:ROR:!=(int,int):>(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths.length != 0 |==> directoryPaths.length > 0
8765:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths.length != 0 |==> true
8766:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths != null && directoryPaths.length != 0 |==> directoryPaths != null == (directoryPaths.length != 0)
8767:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths != null && directoryPaths.length != 0 |==> false
8768:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths != null && directoryPaths.length != 0 |==> directoryPaths != null
8769:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):43:directoryPaths != null && directoryPaths.length != 0 |==> directoryPaths.length != 0
8770:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):45:file = new File(pathPrefix, fileName) |==> <NO-OP>
8771:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() |==> file.exists() == file.isFile()
8772:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() |==> false
8773:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() |==> file.exists()
8774:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() |==> file.isFile()
8775:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() && file.canRead() |==> (file.exists() && file.isFile()) == file.canRead()
8776:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() && file.canRead() |==> false
8777:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() && file.canRead() |==> file.exists() && file.isFile()
8778:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):46:file.exists() && file.isFile() && file.canRead() |==> file.canRead()
8779:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):47:fileToReturn == null |==> false
8780:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):48:fileToReturn = file |==> <NO-OP>
8781:STD:<INC>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):50:numFound++ |==> <NO-OP>
8782:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):54:fileToReturn != null |==> true
8783:STD:<CALL>:<NO-OP>:org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):59:e.printStackTrace() |==> <NO-OP>
8784:ROR:==(int,int):<=(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):62:numFound == 0 |==> numFound <= 0
8785:ROR:==(int,int):>=(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):62:numFound == 0 |==> numFound >= 0
8786:ROR:==(int,int):FALSE(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):62:numFound == 0 |==> false
8787:ROR:==(int,int):<=(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):66:numFound == 1 |==> numFound <= 1
8788:ROR:==(int,int):>=(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):66:numFound == 1 |==> numFound >= 1
8789:ROR:==(int,int):FALSE(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):66:numFound == 1 |==> false
8790:ROR:>(int,int):!=(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):68:numFound > 1 |==> numFound != 1
8791:ROR:>(int,int):>=(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):68:numFound > 1 |==> numFound >= 1
8792:ROR:>(int,int):FALSE(int,int):org.marc4j.util.FileFinderUtil@getFileAbsoluteURL(java.lang.String[],java.lang.String):68:numFound > 1 |==> false
8793:ROR:<(int,int):!=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):114:i < args.length |==> i != args.length
8794:ROR:<(int,int):<=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):114:i < args.length |==> i <= args.length
8795:ROR:<(int,int):FALSE(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):114:i < args.length |==> false
8796:COR:args[i].equals("-xsl"):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):115:args[i].equals("-xsl") |==> false
8797:COR:args[i].equals("-xsl"):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):115:args[i].equals("-xsl") |==> true
8798:AOR:-(int,int):%(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length % 1
8799:AOR:-(int,int):*(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length * 1
8800:AOR:-(int,int):+(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length + 1
8801:AOR:-(int,int):/(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length / 1
8802:ROR:==(int,int):<=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):116:i == args.length - 1 |==> i <= args.length - 1
8803:ROR:==(int,int):>=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):116:i == args.length - 1 |==> i >= args.length - 1
8804:ROR:==(int,int):FALSE(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):116:i == args.length - 1 |==> false
8805:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):117:usage() |==> <NO-OP>
8806:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):119:stylesheet = args[++i].trim() |==> <NO-OP>
8807:COR:args[i].equals("-out"):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):120:args[i].equals("-out") |==> false
8808:COR:args[i].equals("-out"):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):120:args[i].equals("-out") |==> true
8809:AOR:-(int,int):%(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length % 1
8810:AOR:-(int,int):*(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length * 1
8811:AOR:-(int,int):+(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length + 1
8812:AOR:-(int,int):/(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length / 1
8813:ROR:==(int,int):<=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):121:i == args.length - 1 |==> i <= args.length - 1
8814:ROR:==(int,int):>=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):121:i == args.length - 1 |==> i >= args.length - 1
8815:ROR:==(int,int):FALSE(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):121:i == args.length - 1 |==> false
8816:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):122:usage() |==> <NO-OP>
8817:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):124:output = args[++i].trim() |==> <NO-OP>
8818:COR:args[i].equals("-convert"):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):125:args[i].equals("-convert") |==> false
8819:COR:args[i].equals("-convert"):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):125:args[i].equals("-convert") |==> true
8820:AOR:-(int,int):%(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length % 1
8821:AOR:-(int,int):*(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length * 1
8822:AOR:-(int,int):+(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length + 1
8823:AOR:-(int,int):/(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length / 1
8824:ROR:==(int,int):<=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):126:i == args.length - 1 |==> i <= args.length - 1
8825:ROR:==(int,int):>=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):126:i == args.length - 1 |==> i >= args.length - 1
8826:ROR:==(int,int):FALSE(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):126:i == args.length - 1 |==> false
8827:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):127:usage() |==> <NO-OP>
8828:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):129:convert = args[++i].trim() |==> <NO-OP>
8829:COR:args[i].equals("-encoding"):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):130:args[i].equals("-encoding") |==> false
8830:COR:args[i].equals("-encoding"):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):130:args[i].equals("-encoding") |==> true
8831:AOR:-(int,int):%(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):131:args.length - 1 |==> args.length % 1
8832:AOR:-(int,int):*(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):131:args.length - 1 |==> args.length * 1
8833:AOR:-(int,int):+(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):131:args.length - 1 |==> args.length + 1
8834:AOR:-(int,int):/(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):131:args.length - 1 |==> args.length / 1
8835:ROR:==(int,int):<=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):131:i == args.length - 1 |==> i <= args.length - 1
8836:ROR:==(int,int):>=(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):131:i == args.length - 1 |==> i >= args.length - 1
8837:ROR:==(int,int):FALSE(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):131:i == args.length - 1 |==> false
8838:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):132:usage() |==> <NO-OP>
8839:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):134:encoding = args[++i].trim() |==> <NO-OP>
8840:COR:args[i].equals("-normalize"):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):135:args[i].equals("-normalize") |==> false
8841:COR:args[i].equals("-normalize"):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):135:args[i].equals("-normalize") |==> true
8842:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):136:normalize = true |==> <NO-OP>
8843:COR:args[i].equals("-usage"):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):137:args[i].equals("-usage") |==> false
8844:COR:args[i].equals("-usage"):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):137:args[i].equals("-usage") |==> true
8845:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):138:usage() |==> <NO-OP>
8846:COR:args[i].equals("-help"):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):139:args[i].equals("-help") |==> false
8847:COR:args[i].equals("-help"):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):139:args[i].equals("-help") |==> true
8848:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):140:usage() |==> <NO-OP>
8849:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):142:input = args[i].trim() |==> <NO-OP>
8850:AOR:-(int,int):%(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):145:args.length - 1 |==> args.length % 1
8851:AOR:-(int,int):*(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):145:args.length - 1 |==> args.length * 1
8852:AOR:-(int,int):+(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):145:args.length - 1 |==> args.length + 1
8853:AOR:-(int,int):/(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):145:args.length - 1 |==> args.length / 1
8854:ROR:!=(int,int):<(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):145:i != args.length - 1 |==> i < args.length - 1
8855:ROR:!=(int,int):>(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):145:i != args.length - 1 |==> i > args.length - 1
8856:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):145:i != args.length - 1 |==> true
8857:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):146:usage() |==> <NO-OP>
8858:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):150:input == null |==> false
8859:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):151:usage() |==> <NO-OP>
8860:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):158:e.printStackTrace() |==> <NO-OP>
8861:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):161:encoding != null |==> true
8862:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):162:reader = new MarcStreamReader(in, encoding) |==> <NO-OP>
8863:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):164:reader = new MarcStreamReader(in) |==> <NO-OP>
8864:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):168:output != null |==> true
8865:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):172:e.printStackTrace() |==> <NO-OP>
8866:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):175:out = System.out |==> <NO-OP>
8867:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):180:stylesheet == null |==> false
8868:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):181:convert != null |==> true
8869:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):182:writer = new MarcXmlWriter(out, "UTF8") |==> <NO-OP>
8870:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):184:writer = new MarcXmlWriter(out, "UTF8") |==> <NO-OP>
8871:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):188:convert != null |==> true
8872:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):192:e.printStackTrace() |==> <NO-OP>
8873:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):194:outputWriter = new BufferedWriter(outputWriter) |==> <NO-OP>
8874:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):196:outputWriter = new OutputStreamWriter(out) |==> <NO-OP>
8875:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):197:outputWriter = new BufferedWriter(outputWriter) |==> <NO-OP>
8876:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):201:writer = new MarcXmlWriter(result, source) |==> <NO-OP>
8877:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):203:writer.setIndent(true) |==> <NO-OP>
8878:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):205:convert != null |==> true
8879:COR:Constants.MARC_8_ENCODING.equals(convert):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):207:Constants.MARC_8_ENCODING.equals(convert) |==> false
8880:COR:Constants.MARC_8_ENCODING.equals(convert):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):207:Constants.MARC_8_ENCODING.equals(convert) |==> true
8881:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):208:charconv = new AnselToUnicode() |==> <NO-OP>
8882:COR:Constants.ISO5426_ENCODING.equals(convert):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):209:Constants.ISO5426_ENCODING.equals(convert) |==> false
8883:COR:Constants.ISO5426_ENCODING.equals(convert):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):209:Constants.ISO5426_ENCODING.equals(convert) |==> true
8884:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):210:charconv = new Iso5426ToUnicode() |==> <NO-OP>
8885:COR:Constants.ISO6937_ENCODING.equals(convert):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):211:Constants.ISO6937_ENCODING.equals(convert) |==> false
8886:COR:Constants.ISO6937_ENCODING.equals(convert):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):211:Constants.ISO6937_ENCODING.equals(convert) |==> true
8887:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):212:charconv = new Iso6937ToUnicode() |==> <NO-OP>
8888:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):214:System.err.println("Unknown character set") |==> <NO-OP>
8889:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):215:System.exit(1) |==> <NO-OP>
8890:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):217:writer.setConverter(charconv) |==> <NO-OP>
8891:COR:normalize:TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):220:normalize |==> false
8892:COR:normalize:FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):220:normalize |==> true
8893:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):221:writer.setUnicodeNormalization(true) |==> <NO-OP>
8894:COR:Constants.MARC_8_ENCODING.equals(convert):TRUE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):226:Constants.MARC_8_ENCODING.equals(convert) |==> false
8895:COR:Constants.MARC_8_ENCODING.equals(convert):FALSE:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):226:Constants.MARC_8_ENCODING.equals(convert) |==> true
8896:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):227:record.getLeader().setCharCodingScheme('a') |==> <NO-OP>
8897:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):229:writer.write(record) |==> <NO-OP>
8898:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):231:writer.close() |==> <NO-OP>
8899:AOR:-(long,long):%(long,long):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):233:System.currentTimeMillis() - start |==> System.currentTimeMillis() % start
8900:AOR:-(long,long):*(long,long):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):233:System.currentTimeMillis() - start |==> System.currentTimeMillis() * start
8901:AOR:-(long,long):+(long,long):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):233:System.currentTimeMillis() - start |==> System.currentTimeMillis() + start
8902:AOR:-(long,long):/(long,long):org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):233:System.currentTimeMillis() - start |==> System.currentTimeMillis() / start
8903:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@main(java.lang.String[]):233:System.err.println("Total time: " + (System.currentTimeMillis() - start) + " miliseconds") |==> <NO-OP>
8904:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():237:System.err.println("MARC4J, Copyright (C) 2002-2006 Bas Peters") |==> <NO-OP>
8905:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():238:System.err.println("Usage: org.marc4j.util.MarcXmlDriver [-options] <file.mrc>") |==> <NO-OP>
8906:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():239:System.err.println("       -convert <encoding> = Converts <encoding> to UTF-8") |==> <NO-OP>
8907:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():240:System.err.println("       Valid encodings are: MARC8, ISO5426, ISO6937") |==> <NO-OP>
8908:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():241:System.err.println("       -normalize = perform Unicode normalization") |==> <NO-OP>
8909:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():242:System.err.println("       -xsl <file> = Post-process MARCXML using XSLT stylesheet <file>") |==> <NO-OP>
8910:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():243:System.err.println("       -out <file> = Output using <file>") |==> <NO-OP>
8911:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():244:System.err.println("       -usage or -help = this message") |==> <NO-OP>
8912:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():245:System.err.println("The program outputs well-formed MARCXML") |==> <NO-OP>
8913:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():246:System.err.println("See http://marc4j.tigris.org for more information.") |==> <NO-OP>
8914:STD:<CALL>:<NO-OP>:org.marc4j.util.MarcXmlDriver@usage():247:System.exit(1) |==> <NO-OP>
8915:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@<init>(java.io.DataInputStream):35:init(ds) |==> <NO-OP>
8916:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecord@<init>(java.io.DataInputStream):37:rawRecordData != null |==> true
8917:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@<init>(java.io.DataInputStream):38:id = getRecordId() |==> <NO-OP>
8918:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):43:id = null |==> <NO-OP>
8919:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):44:ds.mark(24) |==> <NO-OP>
8920:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecord@init(java.io.DataInputStream):46:leader == null |==> false
8921:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):47:leader = new byte[24] |==> <NO-OP>
8922:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):51:ds.readFully(leader) |==> <NO-OP>
8923:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):53:ds.reset() |==> <NO-OP>
8924:AOR:*(int,int):%(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):54:length * 2 |==> length % 2
8925:AOR:*(int,int):+(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):54:length * 2 |==> length + 2
8926:AOR:*(int,int):-(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):54:length * 2 |==> length - 2
8927:AOR:*(int,int):/(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):54:length * 2 |==> length / 2
8928:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):54:ds.mark(length * 2) |==> <NO-OP>
8929:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):55:rawRecordData = new byte[length] |==> <NO-OP>
8930:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):58:ds.readFully(rawRecordData) |==> <NO-OP>
8931:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):60:ds.reset() |==> <NO-OP>
8932:ROR:!=(int,int):<(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):64:(c = ds.read()) != -1 |==> (c = ds.read()) < -1
8933:ROR:!=(int,int):>(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):64:(c = ds.read()) != -1 |==> (c = ds.read()) > -1
8934:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):65:rawRecordData[cnt++] = (byte)c |==> <NO-OP>
8935:ROR:!=(int,int):<(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):70:location != -1 |==> location < -1
8936:ROR:!=(int,int):>(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):70:location != -1 |==> location > -1
8937:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):70:location != -1 |==> true
8938:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):71:location + 1 |==> location % 1
8939:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):71:location + 1 |==> location * 1
8940:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):71:location + 1 |==> location - 1
8941:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):71:location + 1 |==> location / 1
8942:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):71:length = location + 1 |==> <NO-OP>
8943:AOR:-(int,int):%(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):77:length - 1 |==> length % 1
8944:AOR:-(int,int):*(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):77:length - 1 |==> length * 1
8945:AOR:-(int,int):+(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):77:length - 1 |==> length + 1
8946:AOR:-(int,int):/(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):77:length - 1 |==> length / 1
8947:ROR:!=(int,int):<(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):77:rawRecordData[length - 1] != Constants.RT |==> rawRecordData[length - 1] < Constants.RT
8948:ROR:!=(int,int):>(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):77:rawRecordData[length - 1] != Constants.RT |==> rawRecordData[length - 1] > Constants.RT
8949:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):77:rawRecordData[length - 1] != Constants.RT |==> true
8950:ROR:!=(int,int):<(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):81:location != -1 |==> location < -1
8951:ROR:!=(int,int):>(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):81:location != -1 |==> location > -1
8952:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):81:location != -1 |==> true
8953:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):82:ds.reset() |==> <NO-OP>
8954:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):83:rawRecordData = new byte[location] |==> <NO-OP>
8955:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):84:ds.readFully(rawRecordData) |==> <NO-OP>
8956:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):88:ds.reset() |==> <NO-OP>
8957:ROR:==(int,int):<=(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):95:numRead == -1 |==> numRead <= -1
8958:ROR:==(int,int):>=(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):95:numRead == -1 |==> numRead >= -1
8959:ROR:==(int,int):FALSE(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):95:numRead == -1 |==> false
8960:STD:<BREAK>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):96:break; |==> <NO-OP>
8961:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):98:recBuf.add(byteRead[0]) |==> <NO-OP>
8962:ROR:==(int,int):<=(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):100:byteRead[0] == Constants.RT |==> byteRead[0] <= Constants.RT
8963:ROR:==(int,int):>=(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):100:byteRead[0] == Constants.RT |==> byteRead[0] >= Constants.RT
8964:ROR:==(int,int):FALSE(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):100:byteRead[0] == Constants.RT |==> false
8965:STD:<BREAK>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):101:break; |==> <NO-OP>
8966:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):105:rawRecordData = new byte[recBuf.size()] |==> <NO-OP>
8967:ROR:<(int,int):!=(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):107:i < recBuf.size() |==> i != recBuf.size()
8968:ROR:<(int,int):<=(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):107:i < recBuf.size() |==> i <= recBuf.size()
8969:ROR:<(int,int):FALSE(int,int):org.marc4j.util.RawRecord@init(java.io.DataInputStream):107:i < recBuf.size() |==> false
8970:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):108:rawRecordData[i] = recBuf.get(i) |==> <NO-OP>
8971:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):114:rawRecordData = null |==> <NO-OP>
8972:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@init(java.io.DataInputStream):115:ds.reset() |==> <NO-OP>
8973:ROR:<(int,int):!=(int,int):org.marc4j.util.RawRecord@byteArrayContains(byte[],int):123:i < data.length |==> i != data.length
8974:ROR:<(int,int):<=(int,int):org.marc4j.util.RawRecord@byteArrayContains(byte[],int):123:i < data.length |==> i <= data.length
8975:ROR:<(int,int):FALSE(int,int):org.marc4j.util.RawRecord@byteArrayContains(byte[],int):123:i < data.length |==> false
8976:ROR:==(int,int):<=(int,int):org.marc4j.util.RawRecord@byteArrayContains(byte[],int):124:data[i] == value |==> data[i] <= value
8977:ROR:==(int,int):>=(int,int):org.marc4j.util.RawRecord@byteArrayContains(byte[],int):124:data[i] == value |==> data[i] >= value
8978:ROR:==(int,int):FALSE(int,int):org.marc4j.util.RawRecord@byteArrayContains(byte[],int):124:data[i] == value |==> false
8979:STD:<RETURN>:<NO-OP>:org.marc4j.util.RawRecord@byteArrayContains(byte[],int):125:return (i); |==> <NO-OP>
8980:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):139:rec1.getRecordBytes().length + rec2.getRecordBytes().length |==> rec1.getRecordBytes().length % rec2.getRecordBytes().length
8981:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):139:rec1.getRecordBytes().length + rec2.getRecordBytes().length |==> rec1.getRecordBytes().length * rec2.getRecordBytes().length
8982:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):139:rec1.getRecordBytes().length + rec2.getRecordBytes().length |==> rec1.getRecordBytes().length - rec2.getRecordBytes().length
8983:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):139:rec1.getRecordBytes().length + rec2.getRecordBytes().length |==> rec1.getRecordBytes().length / rec2.getRecordBytes().length
8984:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):139:rawRecordData = new byte[rec1.getRecordBytes().length + rec2.getRecordBytes().length] |==> <NO-OP>
8985:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):140:System.arraycopy(rec1.getRecordBytes(), 0, rawRecordData, 0, rec1.getRecordBytes().length) |==> <NO-OP>
8986:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):141:System.arraycopy(rec2.getRecordBytes(), 0, rawRecordData, rec1.getRecordBytes().length, rec2.getRecordBytes().length) |==> <NO-OP>
8987:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@<init>(org.marc4j.util.RawRecord,org.marc4j.util.RawRecord):143:id = getRecordId() |==> <NO-OP>
8988:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecord@getRecordId():152:id != null |==> true
8989:STD:<RETURN>:<NO-OP>:org.marc4j.util.RawRecord@getRecordId():153:return (id); |==> <NO-OP>
8990:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@getRecordId():155:id = getFieldVal("001") |==> <NO-OP>
8991:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@getFieldVal(java.lang.String):172:e.printStackTrace() |==> <NO-OP>
8992:ROR:==(int,int):<=(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset == 99999 |==> offset <= 99999
8993:ROR:==(int,int):>=(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset == 99999 |==> offset >= 99999
8994:ROR:==(int,int):FALSE(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset == 99999 |==> false
8995:AOR:-(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset - 1 |==> offset % 1
8996:AOR:-(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset - 1 |==> offset * 1
8997:AOR:-(int,int):+(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset - 1 |==> offset + 1
8998:AOR:-(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset - 1 |==> offset / 1
8999:ROR:!=(int,int):<(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:recordStr.charAt(offset - 1) != Constants.FT |==> recordStr.charAt(offset - 1) < Constants.FT
9000:ROR:!=(int,int):>(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:recordStr.charAt(offset - 1) != Constants.FT |==> recordStr.charAt(offset - 1) > Constants.FT
9001:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:recordStr.charAt(offset - 1) != Constants.FT |==> true
9002:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset == 99999 || recordStr.charAt(offset - 1) != Constants.FT |==> offset == 99999 != (recordStr.charAt(offset - 1) != Constants.FT)
9003:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset == 99999 || recordStr.charAt(offset - 1) != Constants.FT |==> offset == 99999
9004:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset == 99999 || recordStr.charAt(offset - 1) != Constants.FT |==> recordStr.charAt(offset - 1) != Constants.FT
9005:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):175:offset == 99999 || recordStr.charAt(offset - 1) != Constants.FT |==> true
9006:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):176:recordStr.indexOf(Constants.FT) + 1 |==> recordStr.indexOf(Constants.FT) % 1
9007:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):176:recordStr.indexOf(Constants.FT) + 1 |==> recordStr.indexOf(Constants.FT) * 1
9008:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):176:recordStr.indexOf(Constants.FT) + 1 |==> recordStr.indexOf(Constants.FT) - 1
9009:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):176:recordStr.indexOf(Constants.FT) + 1 |==> recordStr.indexOf(Constants.FT) / 1
9010:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@getFieldVal(java.lang.String):176:offset = recordStr.indexOf(Constants.FT) + 1 |==> <NO-OP>
9011:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):179:dirOffset + 3 |==> dirOffset % 3
9012:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):179:dirOffset + 3 |==> dirOffset * 3
9013:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):179:dirOffset + 3 |==> dirOffset - 3
9014:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):179:dirOffset + 3 |==> dirOffset / 3
9015:ROR:<(int,int):!=(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):181:dirOffset < offset |==> dirOffset != offset
9016:ROR:<(int,int):<=(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):181:dirOffset < offset |==> dirOffset <= offset
9017:ROR:<(int,int):FALSE(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):181:dirOffset < offset |==> false
9018:COR:fieldNum.equals(idField):TRUE:org.marc4j.util.RawRecord@getFieldVal(java.lang.String):182:fieldNum.equals(idField) |==> false
9019:COR:fieldNum.equals(idField):FALSE:org.marc4j.util.RawRecord@getFieldVal(java.lang.String):182:fieldNum.equals(idField) |==> true
9020:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):183:dirOffset + 3 |==> dirOffset % 3
9021:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):183:dirOffset + 3 |==> dirOffset * 3
9022:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):183:dirOffset + 3 |==> dirOffset - 3
9023:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):183:dirOffset + 3 |==> dirOffset / 3
9024:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):184:dirOffset + 7 |==> dirOffset % 7
9025:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):184:dirOffset + 7 |==> dirOffset * 7
9026:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):184:dirOffset + 7 |==> dirOffset - 7
9027:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):184:dirOffset + 7 |==> dirOffset / 7
9028:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):185:dirOffset + 7 |==> dirOffset % 7
9029:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):185:dirOffset + 7 |==> dirOffset * 7
9030:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):185:dirOffset + 7 |==> dirOffset - 7
9031:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):185:dirOffset + 7 |==> dirOffset / 7
9032:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):186:dirOffset + 12 |==> dirOffset % 12
9033:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):186:dirOffset + 12 |==> dirOffset * 12
9034:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):186:dirOffset + 12 |==> dirOffset - 12
9035:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):186:dirOffset + 12 |==> dirOffset / 12
9036:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):187:offset + offset2 |==> offset % offset2
9037:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):187:offset + offset2 |==> offset * offset2
9038:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):187:offset + offset2 |==> offset - offset2
9039:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):187:offset + offset2 |==> offset / offset2
9040:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 |==> offset % offset2
9041:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 |==> offset * offset2
9042:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 |==> offset - offset2
9043:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 |==> offset / offset2
9044:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length |==> (offset + offset2) % length
9045:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length |==> (offset + offset2) * length
9046:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length |==> offset + offset2 - length
9047:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length |==> (offset + offset2) / length
9048:AOR:-(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length - 1 |==> (offset + offset2 + length) % 1
9049:AOR:-(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length - 1 |==> (offset + offset2 + length) * 1
9050:AOR:-(int,int):+(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length - 1 |==> offset + offset2 + length + 1
9051:AOR:-(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):188:offset + offset2 + length - 1 |==> (offset + offset2 + length) / 1
9052:STD:<RETURN>:<NO-OP>:org.marc4j.util.RawRecord@getFieldVal(java.lang.String):189:return id; |==> <NO-OP>
9053:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@getFieldVal(java.lang.String):192:dirOffset += 12 |==> <NO-OP>
9054:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):193:dirOffset + 3 |==> dirOffset % 3
9055:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):193:dirOffset + 3 |==> dirOffset * 3
9056:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):193:dirOffset + 3 |==> dirOffset - 3
9057:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecord@getFieldVal(java.lang.String):193:dirOffset + 3 |==> dirOffset / 3
9058:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@getFieldVal(java.lang.String):193:fieldNum = recordStr.substring(dirOffset, dirOffset + 3) |==> <NO-OP>
9059:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecord@getAsRecord(boolean,boolean,java.lang.String,java.lang.String):224:combinePartials != null |==> true
9060:COR:combinePartials.contains(vf.getTag()):TRUE:org.marc4j.util.RawRecord@getAsRecord(boolean,boolean,java.lang.String,java.lang.String):231:combinePartials.contains(vf.getTag()) |==> false
9061:COR:combinePartials.contains(vf.getTag()):FALSE:org.marc4j.util.RawRecord@getAsRecord(boolean,boolean,java.lang.String,java.lang.String):231:combinePartials.contains(vf.getTag()) |==> true
9062:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@getAsRecord(boolean,boolean,java.lang.String,java.lang.String):232:next.addVariableField(vf) |==> <NO-OP>
9063:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecord@parseRecordLength(byte[]):244:isr.read(tmp) |==> <NO-OP>
9064:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecord@parseRecordLength(byte[]):246:length = Integer.parseInt(new String(tmp)) |==> <NO-OP>
9065:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@<init>(java.io.InputStream,boolean):48:this.mergeRecords = mergeRecords |==> <NO-OP>
9066:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@hasNext():58:nextRec == null |==> false
9067:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@hasNext():59:nextRec = new RawRecord(input) |==> <NO-OP>
9068:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@hasNext():62:nextRec != null |==> true
9069:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@hasNext():62:nextRec.getRecordBytes() != null |==> true
9070:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():62:nextRec != null && nextRec.getRecordBytes() != null |==> nextRec != null == (nextRec.getRecordBytes() != null)
9071:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():62:nextRec != null && nextRec.getRecordBytes() != null |==> false
9072:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():62:nextRec != null && nextRec.getRecordBytes() != null |==> nextRec != null
9073:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():62:nextRec != null && nextRec.getRecordBytes() != null |==> nextRec.getRecordBytes() != null
9074:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@hasNext():63:afterNextRec == null |==> false
9075:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@hasNext():64:afterNextRec = new RawRecord(input) |==> <NO-OP>
9076:COR:mergeRecords:TRUE:org.marc4j.util.RawRecordReader@hasNext():65:mergeRecords |==> false
9077:COR:mergeRecords:FALSE:org.marc4j.util.RawRecordReader@hasNext():65:mergeRecords |==> true
9078:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null |==> true
9079:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec.getRecordBytes() != null |==> true
9080:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null |==> afterNextRec != null == (afterNextRec.getRecordBytes() != null)
9081:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null |==> false
9082:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null |==> afterNextRec != null
9083:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null |==> afterNextRec.getRecordBytes() != null
9084:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null && afterNextRec.getRecordId().equals(nextRec.getRecordId()) |==> (afterNextRec != null && afterNextRec.getRecordBytes() != null) == afterNextRec.getRecordId().equals(nextRec.getRecordId())
9085:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null && afterNextRec.getRecordId().equals(nextRec.getRecordId()) |==> false
9086:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null && afterNextRec.getRecordId().equals(nextRec.getRecordId()) |==> afterNextRec != null && afterNextRec.getRecordBytes() != null
9087:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@hasNext():66:afterNextRec != null && afterNextRec.getRecordBytes() != null && afterNextRec.getRecordId().equals(nextRec.getRecordId()) |==> afterNextRec.getRecordId().equals(nextRec.getRecordId())
9088:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@hasNext():68:nextRec = new RawRecord(nextRec, afterNextRec) |==> <NO-OP>
9089:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@hasNext():69:afterNextRec = new RawRecord(input) |==> <NO-OP>
9090:STD:<RETURN>:<NO-OP>:org.marc4j.util.RawRecordReader@hasNext():74:return true; |==> <NO-OP>
9091:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@next():88:nextRec = afterNextRec |==> <NO-OP>
9092:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@next():89:afterNextRec = null |==> <NO-OP>
9093:ROR:<(int,int):!=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):112:args.length < 2 |==> args.length != 2
9094:ROR:<(int,int):<=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):112:args.length < 2 |==> args.length <= 2
9095:ROR:<(int,int):FALSE(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):112:args.length < 2 |==> false
9096:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):113:System.err.println("Error: No records specified for extraction") |==> <NO-OP>
9097:COR:args[offset].equals("-"):TRUE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):121:args[offset].equals("-") |==> false
9098:COR:args[offset].equals("-"):FALSE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):121:args[offset].equals("-") |==> true
9099:STD:<INC>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):126:offset++ |==> <NO-OP>
9100:ROR:<(int,int):!=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:offset < args.length |==> offset != args.length
9101:ROR:<(int,int):<=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:offset < args.length |==> offset <= args.length
9102:ROR:<(int,int):FALSE(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:offset < args.length |==> false
9103:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:args[offset].equals("-skip") || args[offset].equals("-num") |==> args[offset].equals("-skip") != args[offset].equals("-num")
9104:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:args[offset].equals("-skip") || args[offset].equals("-num") |==> args[offset].equals("-skip")
9105:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:args[offset].equals("-skip") || args[offset].equals("-num") |==> args[offset].equals("-num")
9106:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:args[offset].equals("-skip") || args[offset].equals("-num") |==> true
9107:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:offset < args.length && (args[offset].equals("-skip") || args[offset].equals("-num")) |==> offset < args.length == (args[offset].equals("-skip") || args[offset].equals("-num"))
9108:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:offset < args.length && (args[offset].equals("-skip") || args[offset].equals("-num")) |==> false
9109:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:offset < args.length && (args[offset].equals("-skip") || args[offset].equals("-num")) |==> offset < args.length
9110:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):128:offset < args.length && (args[offset].equals("-skip") || args[offset].equals("-num")) |==> (args[offset].equals("-skip") || args[offset].equals("-num"))
9111:COR:args[offset].equals("-skip"):TRUE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):130:args[offset].equals("-skip") |==> false
9112:COR:args[offset].equals("-skip"):FALSE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):130:args[offset].equals("-skip") |==> true
9113:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):131:offset + 1 |==> offset % 1
9114:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):131:offset + 1 |==> offset * 1
9115:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):131:offset + 1 |==> offset - 1
9116:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):131:offset + 1 |==> offset / 1
9117:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):131:numToSkip = Integer.parseInt(args[offset + 1]) |==> <NO-OP>
9118:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):132:offset += 2 |==> <NO-OP>
9119:COR:args[offset].equals("-num"):TRUE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):133:args[offset].equals("-num") |==> false
9120:COR:args[offset].equals("-num"):FALSE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):133:args[offset].equals("-num") |==> true
9121:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):134:offset + 1 |==> offset % 1
9122:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):134:offset + 1 |==> offset * 1
9123:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):134:offset + 1 |==> offset - 1
9124:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):134:offset + 1 |==> offset / 1
9125:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):134:numToOutput = Integer.parseInt(args[offset + 1]) |==> <NO-OP>
9126:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):135:offset += 2 |==> <NO-OP>
9127:ROR:<(int,int):!=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):139:offset < args.length |==> offset != args.length
9128:ROR:<(int,int):<=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):139:offset < args.length |==> offset <= args.length
9129:ROR:<(int,int):FALSE(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):139:offset < args.length |==> false
9130:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):139:offset < args.length && args[offset].equals("-nomerge") |==> offset < args.length == args[offset].equals("-nomerge")
9131:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):139:offset < args.length && args[offset].equals("-nomerge") |==> false
9132:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):139:offset < args.length && args[offset].equals("-nomerge") |==> offset < args.length
9133:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):139:offset < args.length && args[offset].equals("-nomerge") |==> args[offset].equals("-nomerge")
9134:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):140:reader.mergeRecords = false |==> <NO-OP>
9135:STD:<INC>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):141:offset++ |==> <NO-OP>
9136:ROR:!=(int,int):<(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToSkip != 0 |==> numToSkip < 0
9137:ROR:!=(int,int):>(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToSkip != 0 |==> numToSkip > 0
9138:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToSkip != 0 |==> true
9139:ROR:!=(int,int):<(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToOutput != -1 |==> numToOutput < -1
9140:ROR:!=(int,int):>(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToOutput != -1 |==> numToOutput > -1
9141:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToOutput != -1 |==> true
9142:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToSkip != 0 || numToOutput != -1 |==> numToSkip != 0 != (numToOutput != -1)
9143:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToSkip != 0 || numToOutput != -1 |==> numToSkip != 0
9144:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToSkip != 0 || numToOutput != -1 |==> numToOutput != -1
9145:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):144:numToSkip != 0 || numToOutput != -1 |==> true
9146:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):145:processInput(reader, numToSkip, numToOutput) |==> <NO-OP>
9147:COR:args[offset].equals("-id"):TRUE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):146:args[offset].equals("-id") |==> false
9148:COR:args[offset].equals("-id"):FALSE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):146:args[offset].equals("-id") |==> true
9149:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):147:printIds(reader) |==> <NO-OP>
9150:ROR:>=(int,int):==(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):148:args.length >= 3 |==> args.length == 3
9151:ROR:>=(int,int):>(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):148:args.length >= 3 |==> args.length > 3
9152:ROR:>=(int,int):TRUE(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):148:args.length >= 3 |==> true
9153:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):148:args[offset].equals("-h") && args.length >= 3 |==> args[offset].equals("-h") == args.length >= 3
9154:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):148:args[offset].equals("-h") && args.length >= 3 |==> false
9155:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):148:args[offset].equals("-h") && args.length >= 3 |==> args[offset].equals("-h")
9156:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@main(java.lang.String[]):148:args[offset].equals("-h") && args.length >= 3 |==> args.length >= 3
9157:AOR:+(int,int):%(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):149:offset + 1 |==> offset % 1
9158:AOR:+(int,int):*(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):149:offset + 1 |==> offset * 1
9159:AOR:+(int,int):-(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):149:offset + 1 |==> offset - 1
9160:AOR:+(int,int):/(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):149:offset + 1 |==> offset / 1
9161:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):150:processInput(reader, null, idRegex, null) |==> <NO-OP>
9162:COR:args[offset].endsWith(".txt"):TRUE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):151:args[offset].endsWith(".txt") |==> false
9163:COR:args[offset].endsWith(".txt"):FALSE:org.marc4j.util.RawRecordReader@main(java.lang.String[]):151:args[offset].endsWith(".txt") |==> true
9164:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):153:processInput(reader, idRegex, null, null) |==> <NO-OP>
9165:ROR:>(int,int):!=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):161:args.length > 2 |==> args.length != 2
9166:ROR:>(int,int):>=(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):161:args.length > 2 |==> args.length >= 2
9167:ROR:>(int,int):FALSE(int,int):org.marc4j.util.RawRecordReader@main(java.lang.String[]):161:args.length > 2 |==> false
9168:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):162:findReplace = args[2].split("->") |==> <NO-OP>
9169:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@main(java.lang.String[]):168:findReplace != null |==> true
9170:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):169:line = line.replaceFirst(findReplace[0], findReplace[1]) |==> <NO-OP>
9171:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):172:idsLookedFor.add(line) |==> <NO-OP>
9172:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):175:idStream.close() |==> <NO-OP>
9173:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@main(java.lang.String[]):176:processInput(reader, null, null, idsLookedFor) |==> <NO-OP>
9174:STD:<INC>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):195:num++ |==> <NO-OP>
9175:ROR:<=(int,int):<(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):197:num <= numToSkip |==> num < numToSkip
9176:ROR:<=(int,int):==(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):197:num <= numToSkip |==> num == numToSkip
9177:ROR:<=(int,int):TRUE(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):197:num <= numToSkip |==> true
9178:STD:<CONT>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):198:continue; |==> <NO-OP>
9179:ROR:==(int,int):<=(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numToOutput == -1 |==> numToOutput <= -1
9180:ROR:==(int,int):>=(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numToOutput == -1 |==> numToOutput >= -1
9181:ROR:==(int,int):FALSE(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numToOutput == -1 |==> false
9182:ROR:<(int,int):!=(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numOutput < numToOutput |==> numOutput != numToOutput
9183:ROR:<(int,int):<=(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numOutput < numToOutput |==> numOutput <= numToOutput
9184:ROR:<(int,int):FALSE(int,int):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numOutput < numToOutput |==> false
9185:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numToOutput == -1 || numOutput < numToOutput |==> numToOutput == -1 != numOutput < numToOutput
9186:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numToOutput == -1 || numOutput < numToOutput |==> numToOutput == -1
9187:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numToOutput == -1 || numOutput < numToOutput |==> numOutput < numToOutput
9188:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):201:numToOutput == -1 || numOutput < numToOutput |==> true
9189:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):204:System.out.write(recordBytes) |==> <NO-OP>
9190:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):205:System.out.flush() |==> <NO-OP>
9191:STD:<INC>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,int,int):207:numOutput++ |==> <NO-OP>
9192:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@printIds(org.marc4j.util.RawRecordReader):216:System.out.println(id) |==> <NO-OP>
9193:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null |==> false
9194:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:recordHas == null |==> false
9195:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null |==> idsLookedFor == null == (recordHas == null)
9196:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null |==> false
9197:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null |==> idsLookedFor == null
9198:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null |==> recordHas == null
9199:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) |==> (idsLookedFor == null && recordHas == null) == id.matches(idRegex)
9200:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) |==> false
9201:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) |==> idsLookedFor == null && recordHas == null
9202:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) |==> id.matches(idRegex)
9203:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor != null |==> true
9204:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor != null && idsLookedFor.contains(id) |==> idsLookedFor != null == idsLookedFor.contains(id)
9205:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor != null && idsLookedFor.contains(id) |==> false
9206:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor != null && idsLookedFor.contains(id) |==> idsLookedFor != null
9207:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor != null && idsLookedFor.contains(id) |==> idsLookedFor.contains(id)
9208:COR:||(boolean,boolean):!=(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) || idsLookedFor != null && idsLookedFor.contains(id) |==> (idsLookedFor == null && recordHas == null && id.matches(idRegex)) != (idsLookedFor != null && idsLookedFor.contains(id))
9209:COR:||(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) || idsLookedFor != null && idsLookedFor.contains(id) |==> idsLookedFor == null && recordHas == null && id.matches(idRegex)
9210:COR:||(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) || idsLookedFor != null && idsLookedFor.contains(id) |==> idsLookedFor != null && idsLookedFor.contains(id)
9211:COR:||(boolean,boolean):TRUE(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):225:idsLookedFor == null && recordHas == null && id.matches(idRegex) || idsLookedFor != null && idsLookedFor.contains(id) |==> true
9212:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):228:System.out.write(recordBytes) |==> <NO-OP>
9213:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):229:System.out.flush() |==> <NO-OP>
9214:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null |==> false
9215:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idRegex == null |==> false
9216:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null |==> idsLookedFor == null == (idRegex == null)
9217:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null |==> false
9218:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null |==> idsLookedFor == null
9219:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null |==> idRegex == null
9220:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:recordHas != null |==> true
9221:COR:&&(boolean,boolean):==(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null && recordHas != null |==> (idsLookedFor == null && idRegex == null) == (recordHas != null)
9222:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null && recordHas != null |==> false
9223:COR:&&(boolean,boolean):LHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null && recordHas != null |==> idsLookedFor == null && idRegex == null
9224:COR:&&(boolean,boolean):RHS(boolean,boolean):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):230:idsLookedFor == null && idRegex == null && recordHas != null |==> recordHas != null
9225:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):233:field != null |==> true
9226:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):235:System.out.write(recordBytes) |==> <NO-OP>
9227:STD:<CALL>:<NO-OP>:org.marc4j.util.RawRecordReader@processInput(org.marc4j.util.RawRecordReader,java.lang.String,java.lang.String,java.util.HashSet<java.lang.String>):236:System.out.flush() |==> <NO-OP>
9228:ROR:<(int,int):!=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):109:i < args.length |==> i != args.length
9229:ROR:<(int,int):<=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):109:i < args.length |==> i <= args.length
9230:ROR:<(int,int):FALSE(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):109:i < args.length |==> false
9231:COR:args[i].equals("-xsl"):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):110:args[i].equals("-xsl") |==> false
9232:COR:args[i].equals("-xsl"):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):110:args[i].equals("-xsl") |==> true
9233:AOR:-(int,int):%(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):111:args.length - 1 |==> args.length % 1
9234:AOR:-(int,int):*(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):111:args.length - 1 |==> args.length * 1
9235:AOR:-(int,int):+(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):111:args.length - 1 |==> args.length + 1
9236:AOR:-(int,int):/(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):111:args.length - 1 |==> args.length / 1
9237:ROR:==(int,int):<=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):111:i == args.length - 1 |==> i <= args.length - 1
9238:ROR:==(int,int):>=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):111:i == args.length - 1 |==> i >= args.length - 1
9239:ROR:==(int,int):FALSE(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):111:i == args.length - 1 |==> false
9240:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):112:usage() |==> <NO-OP>
9241:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):114:stylesheet = args[++i].trim() |==> <NO-OP>
9242:COR:args[i].equals("-out"):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):115:args[i].equals("-out") |==> false
9243:COR:args[i].equals("-out"):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):115:args[i].equals("-out") |==> true
9244:AOR:-(int,int):%(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length % 1
9245:AOR:-(int,int):*(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length * 1
9246:AOR:-(int,int):+(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length + 1
9247:AOR:-(int,int):/(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):116:args.length - 1 |==> args.length / 1
9248:ROR:==(int,int):<=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):116:i == args.length - 1 |==> i <= args.length - 1
9249:ROR:==(int,int):>=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):116:i == args.length - 1 |==> i >= args.length - 1
9250:ROR:==(int,int):FALSE(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):116:i == args.length - 1 |==> false
9251:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):117:usage() |==> <NO-OP>
9252:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):119:output = args[++i].trim() |==> <NO-OP>
9253:COR:args[i].equals("-convert"):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):120:args[i].equals("-convert") |==> false
9254:COR:args[i].equals("-convert"):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):120:args[i].equals("-convert") |==> true
9255:AOR:-(int,int):%(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length % 1
9256:AOR:-(int,int):*(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length * 1
9257:AOR:-(int,int):+(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length + 1
9258:AOR:-(int,int):/(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):121:args.length - 1 |==> args.length / 1
9259:ROR:==(int,int):<=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):121:i == args.length - 1 |==> i <= args.length - 1
9260:ROR:==(int,int):>=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):121:i == args.length - 1 |==> i >= args.length - 1
9261:ROR:==(int,int):FALSE(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):121:i == args.length - 1 |==> false
9262:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):122:usage() |==> <NO-OP>
9263:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):124:convert = args[++i].trim() |==> <NO-OP>
9264:COR:args[i].equals("-encoding"):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):125:args[i].equals("-encoding") |==> false
9265:COR:args[i].equals("-encoding"):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):125:args[i].equals("-encoding") |==> true
9266:AOR:-(int,int):%(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length % 1
9267:AOR:-(int,int):*(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length * 1
9268:AOR:-(int,int):+(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length + 1
9269:AOR:-(int,int):/(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):126:args.length - 1 |==> args.length / 1
9270:ROR:==(int,int):<=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):126:i == args.length - 1 |==> i <= args.length - 1
9271:ROR:==(int,int):>=(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):126:i == args.length - 1 |==> i >= args.length - 1
9272:ROR:==(int,int):FALSE(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):126:i == args.length - 1 |==> false
9273:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):127:usage() |==> <NO-OP>
9274:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):129:encoding = args[++i].trim() |==> <NO-OP>
9275:COR:args[i].equals("-usage"):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):130:args[i].equals("-usage") |==> false
9276:COR:args[i].equals("-usage"):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):130:args[i].equals("-usage") |==> true
9277:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):131:usage() |==> <NO-OP>
9278:COR:args[i].equals("-help"):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):132:args[i].equals("-help") |==> false
9279:COR:args[i].equals("-help"):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):132:args[i].equals("-help") |==> true
9280:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):133:usage() |==> <NO-OP>
9281:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):135:input = args[i].trim() |==> <NO-OP>
9282:AOR:-(int,int):%(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):138:args.length - 1 |==> args.length % 1
9283:AOR:-(int,int):*(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):138:args.length - 1 |==> args.length * 1
9284:AOR:-(int,int):+(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):138:args.length - 1 |==> args.length + 1
9285:AOR:-(int,int):/(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):138:args.length - 1 |==> args.length / 1
9286:ROR:!=(int,int):<(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):138:i != args.length - 1 |==> i < args.length - 1
9287:ROR:!=(int,int):>(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):138:i != args.length - 1 |==> i > args.length - 1
9288:ROR:!=(int,int):TRUE(int,int):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):138:i != args.length - 1 |==> true
9289:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):139:usage() |==> <NO-OP>
9290:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):143:input == null |==> false
9291:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):144:usage() |==> <NO-OP>
9292:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):151:e.printStackTrace() |==> <NO-OP>
9293:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):154:stylesheet == null |==> false
9294:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):155:reader = new MarcXmlReader(in) |==> <NO-OP>
9295:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):158:reader = new MarcXmlReader(in, source) |==> <NO-OP>
9296:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):162:output != null |==> true
9297:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):166:e.printStackTrace() |==> <NO-OP>
9298:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):169:out = System.out |==> <NO-OP>
9299:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):173:encoding != null |==> true
9300:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):174:writer = new MarcStreamWriter(out, encoding) |==> <NO-OP>
9301:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):176:writer = new MarcStreamWriter(out) |==> <NO-OP>
9302:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):179:convert != null |==> true
9303:COR:Constants.MARC_8_ENCODING.equals(convert):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):181:Constants.MARC_8_ENCODING.equals(convert) |==> false
9304:COR:Constants.MARC_8_ENCODING.equals(convert):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):181:Constants.MARC_8_ENCODING.equals(convert) |==> true
9305:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):182:charconv = new UnicodeToAnsel() |==> <NO-OP>
9306:COR:Constants.ISO5426_ENCODING.equals(convert):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):183:Constants.ISO5426_ENCODING.equals(convert) |==> false
9307:COR:Constants.ISO5426_ENCODING.equals(convert):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):183:Constants.ISO5426_ENCODING.equals(convert) |==> true
9308:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):184:charconv = new UnicodeToIso5426() |==> <NO-OP>
9309:COR:Constants.ISO6937_ENCODING.equals(convert):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):185:Constants.ISO6937_ENCODING.equals(convert) |==> false
9310:COR:Constants.ISO6937_ENCODING.equals(convert):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):185:Constants.ISO6937_ENCODING.equals(convert) |==> true
9311:STD:<ASSIGN>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):186:charconv = new UnicodeToIso6937() |==> <NO-OP>
9312:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):188:System.err.println("Unknown character set") |==> <NO-OP>
9313:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):189:System.exit(1) |==> <NO-OP>
9314:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):191:writer.setConverter(charconv) |==> <NO-OP>
9315:COR:Constants.MARC_8_ENCODING.equals(convert):TRUE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):196:Constants.MARC_8_ENCODING.equals(convert) |==> false
9316:COR:Constants.MARC_8_ENCODING.equals(convert):FALSE:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):196:Constants.MARC_8_ENCODING.equals(convert) |==> true
9317:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):197:record.getLeader().setCharCodingScheme(' ') |==> <NO-OP>
9318:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):199:writer.write(record) |==> <NO-OP>
9319:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):201:writer.close() |==> <NO-OP>
9320:AOR:-(long,long):%(long,long):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):203:System.currentTimeMillis() - start |==> System.currentTimeMillis() % start
9321:AOR:-(long,long):*(long,long):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):203:System.currentTimeMillis() - start |==> System.currentTimeMillis() * start
9322:AOR:-(long,long):+(long,long):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):203:System.currentTimeMillis() - start |==> System.currentTimeMillis() + start
9323:AOR:-(long,long):/(long,long):org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):203:System.currentTimeMillis() - start |==> System.currentTimeMillis() / start
9324:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@main(java.lang.String[]):203:System.err.println("Total time: " + (System.currentTimeMillis() - start) + " miliseconds") |==> <NO-OP>
9325:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():207:System.err.println("MARC4J, Copyright (C) 2002-2006 Bas Peters") |==> <NO-OP>
9326:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():208:System.err.println("Usage: org.marc4j.util.XmlMarcDriver [-options] <file.mrc>") |==> <NO-OP>
9327:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():209:System.err.println("       -convert <encoding> = Converts UTF-8 to <encoding>") |==> <NO-OP>
9328:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():210:System.err.println("       Valid encodings are: MARC8, ISO5426, ISO6937") |==> <NO-OP>
9329:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():211:System.err.println("       -encoding <encoding> = Output using specified Java character encoding") |==> <NO-OP>
9330:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():213:System.err.println("       -xsl <file> = Pre-process MARCXML using XSLT stylesheet <file>") |==> <NO-OP>
9331:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():214:System.err.println("       -out <file> = Output using <file>") |==> <NO-OP>
9332:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():215:System.err.println("       -usage or -help = this message") |==> <NO-OP>
9333:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():216:System.err.println("The program outputs MARC records in ISO 2709 format") |==> <NO-OP>
9334:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():217:System.err.println("See http://marc4j.tigris.org for more information.") |==> <NO-OP>
9335:STD:<CALL>:<NO-OP>:org.marc4j.util.XmlMarcDriver@usage():218:System.exit(1) |==> <NO-OP>
